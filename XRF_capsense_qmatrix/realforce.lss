
realforce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00003656  000036ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c7  0080010e  0080010e  000036f8  2**0
                  ALLOC
  3 .noinit       00000004  008002d5  008002d5  000036f8  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000036f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000076  00000000  00000000  00003fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004058  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000768  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d0b7  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b6e  00000000  00000000  000118b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000622c  00000000  00000000  00015425  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001364  00000000  00000000  0001b654  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000039ae  00000000  00000000  0001c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006279  00000000  00000000  00020366  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  000265df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 02 	jmp	0x52e	; 0x52e <__ctors_end>
       4:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
       8:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
       c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      10:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      14:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      18:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      1c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      20:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      24:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      28:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_10>
      2c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      30:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__vector_12>
      34:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      38:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      3c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      40:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      44:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      48:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      4c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      50:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      54:	0c 94 37 19 	jmp	0x326e	; 0x326e <__vector_21>
      58:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      5c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      60:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      64:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      68:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      6c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      70:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      74:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      78:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      7c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      80:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      84:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      88:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      8c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      90:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      94:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__bad_interrupt>
      98:	c3 0b       	sbc	r28, r19
      9a:	e5 0b       	sbc	r30, r21
      9c:	d3 0c       	add	r13, r3
      9e:	e5 0b       	sbc	r30, r21
      a0:	d3 0c       	add	r13, r3
      a2:	2a 0c       	add	r2, r10
      a4:	4d 0c       	add	r4, r13
      a6:	d3 0c       	add	r13, r3
      a8:	a2 0c       	add	r10, r2
      aa:	b5 0c       	add	r11, r5
      ac:	9a 0f       	add	r25, r26
      ae:	9a 0f       	add	r25, r26
      b0:	c7 0f       	add	r28, r23
      b2:	c7 0f       	add	r28, r23
      b4:	fd 11       	cpse	r31, r13
      b6:	fd 11       	cpse	r31, r13
      b8:	fd 11       	cpse	r31, r13
      ba:	fd 11       	cpse	r31, r13
      bc:	1f 10       	cpse	r1, r15
      be:	fd 11       	cpse	r31, r13
      c0:	18 11       	cpse	r17, r8
      c2:	18 11       	cpse	r17, r8
      c4:	d3 11       	cpse	r29, r3
      c6:	fd 11       	cpse	r31, r13
      c8:	fd 11       	cpse	r31, r13
      ca:	e9 11       	cpse	r30, r9

000000cc <__trampolines_end>:
      cc:	0d 0a       	sbc	r0, r29
      ce:	00 25       	Address 0x000000ce is out of bounds.
.word	0xffff	; ????

000000cf <__c.2515>:
      cf:	25 30 34 58 28 25 30 32 58 29 25 63 00              %04X(%02X)%c.

000000dc <fn_actions>:
      dc:	29 35 2b e0 e1 e0 00 1e 14 04 64 e3 3a 1f 1a 16     )5+.......d.:...
      ec:	1d e2 3b 20 08 07 1b 00 3c 21 15 09 06 00 3d 22     ..; ....<!....="
      fc:	17 0a 19 00 3e 23 1c 0b 05 2c 3f 24 18 0d 11 00     ....>#...,?$....
     10c:	40 25 0c 0e 10 00 41 26 12 0f 36 00 00 27 13 33     @%....A&..6..'.3
     11c:	37 e6 42 2d 2f 34 38 e7 43 2e 30 32 e5 50 44 31     7.B-/48.C.02.PD1
     12c:	00 00 00 00 45 2a 31 28 e5 e4 46 49 4c 00 00 50     ....E*1(..FIL..P
     13c:	47 4a 4d 00 52 51 48 4b 4e 00 00 4f                 GJM.RQHKN..O

00000148 <__c.4811>:
     148:	5b 73 5d 00                                         [s].

0000014c <__c.4809>:
     14c:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     15c:	00                                                  .

0000015d <__c.4807>:
     15d:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     16d:	00                                                  .

0000016e <__c.4713>:
     16e:	5b 57 5d 00                                         [W].

00000172 <__c.4709>:
     172:	5b 53 5d 00                                         [S].

00000176 <__c.4705>:
     176:	5b 52 5d 00                                         [R].

0000017a <__c.4700>:
     17a:	5b 44 5d 00                                         [D].

0000017e <__c.4695>:
     17e:	5b 43 5d 00                                         [C].

00000182 <ProductString>:
     182:	28 03 43 00 61 00 70 00 73 00 65 00 6e 00 73 00     (.C.a.p.s.e.n.s.
     192:	65 00 20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00     e. .C.o.n.t.r.o.
     1a2:	6c 00 6c 00 65 00 72 00 00 00                       l.l.e.r...

000001ac <ManufacturerString>:
     1ac:	08 03 54 00 4d 00 4b 00 00 00                       ..T.M.K...

000001b6 <LanguageString>:
     1b6:	04 03 09 04                                         ....

000001ba <ConfigurationDescriptor>:
     1ba:	09 02 42 00 02 01 00 a0 32 09 04 00 00 01 03 01     ..B.....2.......
     1ca:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     1da:	00 0a 09 04 01 00 02 03 00 00 00 09 21 11 01 00     ............!...
     1ea:	01 22 20 00 07 05 82 03 20 00 01 07 05 02 03 20     ." ..... ...... 
     1fa:	00 01                                               ..

000001fc <DeviceDescriptor>:
     1fc:	12 01 10 01 00 00 00 08 ed fe cc 10 00 01 01 02     ................
     20c:	00 01                                               ..

0000020e <ConsoleReport>:
     20e:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     21e:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000022e <KeyboardReport>:
     22e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     23e:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     24e:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     25e:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000026d <__c.2014>:
     26d:	0a 00                                               ..

0000026f <__c.2009>:
     26f:	25 30 32 58 20 00                                   %02X .

00000275 <__c.2006>:
     275:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     285:	20 00                                                .

00000287 <__c.2321>:
     287:	0a 00                                               ..

00000289 <__c.2319>:
     289:	25 30 32 58 00                                      %02X.

0000028e <__c.2317>:
     28e:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     29e:	3a 20 00                                            : .

000002a1 <__c.2575>:
     2a1:	3f 00                                               ?.

000002a3 <__c.2577>:
     2a3:	43 3e 20 00                                         C> .

000002a7 <__c.2595>:
     2a7:	4c 25 64 0a 00                                      L%d..

000002ac <__c.2564>:
     2ac:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     2bc:	43 2f 71 3a 09 71 75 69 74 0a 00                    C/q:.quit..

000002c7 <__c.2493>:
     2c7:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     2d7:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     2e7:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     2f7:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     307:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     317:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     327:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     337:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     347:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     357:	72 0a 00                                            r..

0000035a <__c.2559>:
     35a:	3f 00                                               ?.

0000035c <__c.2550>:
     35c:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     36c:	6c 58 0a 00                                         lX..

00000370 <__c.2548>:
     370:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     380:	58 0a 00                                            X..

00000383 <__c.2546>:
     383:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     393:	6c 3a 20 25 58 0a 00                                l: %X..

0000039a <__c.2544>:
     39a:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     3aa:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000003b4 <__c.2542>:
     3b4:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000003c2 <__c.2539>:
     3c2:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     3d2:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     3e2:	52 43 48 3a 20 61 76 72 35 31 0a 00                 RCH: avr51..

000003ee <__c.2537>:
     3ee:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 43 4f     OPTIONS: LUFA CO
     3fe:	4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20 34 30     NSOLE COMMAND 40
     40e:	39 36 0a 00                                         96..

00000412 <__c.2535>:
     412:	42 55 49 4c 44 3a 20 33 37 31 65 33 63 64 2d 64     BUILD: 371e3cd-d
     422:	69 72 74 79 20 28 30 30 3a 33 38 3a 34 38 20 4d     irty (00:38:48 M
     432:	61 79 20 31 36 20 32 30 31 38 29 0a 00              ay 16 2018)..

0000043f <__c.2533>:
     43f:	56 49 44 3a 20 30 78 46 45 45 44 28 54 4d 4b 29     VID: 0xFEED(TMK)
     44f:	20 50 49 44 3a 20 30 78 31 30 43 43 28 43 61 70      PID: 0x10CC(Cap
     45f:	73 65 6e 73 65 20 43 6f 6e 74 72 6f 6c 6c 65 72     sense Controller
     46f:	29 20 56 45 52 3a 20 30 78 30 31 30 30 0a 00        ) VER: 0x0100..

0000047e <__c.2531>:
     47e:	44 45 53 43 3a 20 54 4d 4b 20 43 6f 6e 74 72 6f     DESC: TMK Contro
     48e:	6c 6c 65 72 20 66 6f 72 20 54 6f 70 72 65 0a 00     ller for Topre..

0000049e <__c.2529>:
     49e:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000004ad <__c.2526>:
     4ad:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000004ba <__c.2524>:
     4ba:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000004c6 <__c.2521>:
     4c6:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000004d6 <__c.2519>:
     4d6:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000004e5 <__c.2516>:
     4e5:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000004f3 <__c.2514>:
     4f3:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000500 <__c.2511>:
     500:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

0000050c <__c.2509>:
     50c:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000519 <__c.2506>:
     519:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     529:	00                                                  .

0000052a <__c.2503>:
     52a:	43 3e 20 00                                         C> .

0000052e <__ctors_end>:
     52e:	11 24       	eor	r1, r1
     530:	1f be       	out	0x3f, r1	; 63
     532:	cf ef       	ldi	r28, 0xFF	; 255
     534:	d0 e2       	ldi	r29, 0x20	; 32
     536:	de bf       	out	0x3e, r29	; 62
     538:	cd bf       	out	0x3d, r28	; 61

0000053a <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     53a:	04 b6       	in	r0, 0x34	; 52
     53c:	03 fe       	sbrs	r0, 3
     53e:	27 c0       	rjmp	.+78     	; 0x58e <__do_copy_data>
     540:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <__bss_end>
     544:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <__bss_end+0x1>
     548:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <__bss_end+0x2>
     54c:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <__bss_end+0x3>
     550:	87 30       	cpi	r24, 0x07	; 7
     552:	90 4b       	sbci	r25, 0xB0	; 176
     554:	a7 40       	sbci	r26, 0x07	; 7
     556:	b0 4b       	sbci	r27, 0xB0	; 176
     558:	d1 f4       	brne	.+52     	; 0x58e <__do_copy_data>
        reset_key = 0;
     55a:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <__bss_end>
     55e:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <__bss_end+0x1>
     562:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <__bss_end+0x2>
     566:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     56a:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     56c:	84 b7       	in	r24, 0x34	; 52
     56e:	87 7f       	andi	r24, 0xF7	; 247
     570:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	a8 95       	wdr
     578:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     57c:	88 61       	ori	r24, 0x18	; 24
     57e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     582:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     586:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     588:	e0 e0       	ldi	r30, 0x00	; 0
     58a:	f8 ef       	ldi	r31, 0xF8	; 248
     58c:	09 95       	icall

0000058e <__do_copy_data>:
     58e:	11 e0       	ldi	r17, 0x01	; 1
     590:	a0 e0       	ldi	r26, 0x00	; 0
     592:	b1 e0       	ldi	r27, 0x01	; 1
     594:	e6 e5       	ldi	r30, 0x56	; 86
     596:	f6 e3       	ldi	r31, 0x36	; 54
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	0b bf       	out	0x3b, r16	; 59
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__do_copy_data+0x14>
     59e:	07 90       	elpm	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	ae 30       	cpi	r26, 0x0E	; 14
     5a4:	b1 07       	cpc	r27, r17
     5a6:	d9 f7       	brne	.-10     	; 0x59e <__do_copy_data+0x10>

000005a8 <__do_clear_bss>:
     5a8:	22 e0       	ldi	r18, 0x02	; 2
     5aa:	ae e0       	ldi	r26, 0x0E	; 14
     5ac:	b1 e0       	ldi	r27, 0x01	; 1
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <.do_clear_bss_start>

000005b0 <.do_clear_bss_loop>:
     5b0:	1d 92       	st	X+, r1

000005b2 <.do_clear_bss_start>:
     5b2:	a5 3d       	cpi	r26, 0xD5	; 213
     5b4:	b2 07       	cpc	r27, r18
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <.do_clear_bss_loop>
     5b8:	0e 94 f5 07 	call	0xfea	; 0xfea <main>
     5bc:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <_exit>

000005c0 <__bad_interrupt>:
     5c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005c4 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     5c4:	ff 93       	push	r31
	push	ZL
     5c6:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     5c8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
	lds	ZH, xfunc_out+1	;/
     5cc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     5d0:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <xputc+0x12>
	icall
     5d4:	09 95       	icall
2:	pop	ZL
     5d6:	ef 91       	pop	r30
	pop	ZH
     5d8:	ff 91       	pop	r31
	ret
     5da:	08 95       	ret

000005dc <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     5dc:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     5de:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     5e0:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <xputs+0xc>
	rcall	xputc
     5e4:	ef df       	rcall	.-34     	; 0x5c4 <xputc>
	rjmp	1b
     5e6:	fb cf       	rjmp	.-10     	; 0x5de <xputs+0x2>
2:	ret
     5e8:	08 95       	ret

000005ea <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     5ea:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     5ec:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     5ee:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     5f0:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     5f2:	0c c0       	rjmp	.+24     	; 0x60c <xitoa+0x22>
	neg	r20		;
     5f4:	41 95       	neg	r20
	sbrs	r25, 7		;
     5f6:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <xitoa+0x22>
	ldi	r30, '-'	;
     5fa:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     5fc:	60 95       	com	r22
	com	r23		;
     5fe:	70 95       	com	r23
	com	r24		;
     600:	80 95       	com	r24
	com	r25		;
     602:	90 95       	com	r25
	adc	r22, r1		;
     604:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     606:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     608:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     60a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     60c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     60e:	02 c0       	rjmp	.+4      	; 0x614 <xitoa+0x2a>
	neg	r18		;
     610:	21 95       	neg	r18
	ldi	r19, '0'	;/
     612:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     614:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     616:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     618:	66 0f       	add	r22, r22
	rol	r23		;
     61a:	77 1f       	adc	r23, r23
	rol	r24		;
     61c:	88 1f       	adc	r24, r24
	rol	r25		;
     61e:	99 1f       	adc	r25, r25
	rol	r26		;
     620:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     622:	a4 17       	cp	r26, r20
	brcs	3f		;
     624:	10 f0       	brcs	.+4      	; 0x62a <xitoa+0x40>
	sub	r26, r20	;
     626:	a4 1b       	sub	r26, r20
	inc	r22		;
     628:	63 95       	inc	r22
3:	dec	r21		;
     62a:	5a 95       	dec	r21
	brne	2b		;/
     62c:	a9 f7       	brne	.-22     	; 0x618 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     62e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     630:	08 f0       	brcs	.+2      	; 0x634 <xitoa+0x4a>
	subi	r26, -7		;
     632:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     634:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     636:	af 93       	push	r26
	inc	r31		;/
     638:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     63a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     63c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     63e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     640:	91 05       	cpc	r25, r1
	brne	1b		;/
     642:	41 f7       	brne	.-48     	; 0x614 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     644:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     646:	11 f4       	brne	.+4      	; 0x64c <xitoa+0x62>
	push	r30		;
     648:	ef 93       	push	r30
	inc	r31		;/
     64a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     64c:	f2 17       	cp	r31, r18
	brcc	6f		;
     64e:	18 f4       	brcc	.+6      	; 0x656 <xitoa+0x6c>
	push	r19		;
     650:	3f 93       	push	r19
	inc	r31		;
     652:	f3 95       	inc	r31
	rjmp	5b		;/
     654:	fb cf       	rjmp	.-10     	; 0x64c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     656:	8f 91       	pop	r24
	rcall	xputc		;
     658:	b5 df       	rcall	.-150    	; 0x5c4 <xputc>
	dec	r31		;
     65a:	fa 95       	dec	r31
	brne	6b		;/
     65c:	e1 f7       	brne	.-8      	; 0x656 <xitoa+0x6c>

	ret
     65e:	08 95       	ret

00000660 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     660:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     662:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     664:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     666:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     668:	21 f0       	breq	.+8      	; 0x672 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     66a:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     66c:	19 f0       	breq	.+6      	; 0x674 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     66e:	aa df       	rcall	.-172    	; 0x5c4 <xputc>
	rjmp	0b		;/
     670:	f9 cf       	rjmp	.-14     	; 0x664 <xvprintf+0x4>
90:	ret
     672:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     674:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     676:	e8 94       	clt
	_LPMI	r21		;Get flags
     678:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     67a:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     67c:	c1 f3       	breq	.-16     	; 0x66e <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     67e:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     680:	11 f4       	brne	.+4      	; 0x686 <xvprintf+0x26>
	set			;/
     682:	68 94       	set
22:	_LPMI	r21		;Get width
     684:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     686:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     688:	48 f4       	brcc	.+18     	; 0x69c <xvprintf+0x3c>
	subi	r21, '0'	;
     68a:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     68c:	90 f3       	brcs	.-28     	; 0x672 <xvprintf+0x12>
	lsl	r18		;
     68e:	22 0f       	add	r18, r18
	mov	r0, r18		;
     690:	02 2e       	mov	r0, r18
	lsl	r18		;
     692:	22 0f       	add	r18, r18
	lsl	r18		;
     694:	22 0f       	add	r18, r18
	add	r18, r0		;
     696:	20 0d       	add	r18, r0
	add	r18, r21	;
     698:	25 0f       	add	r18, r21
	rjmp	22b		;/
     69a:	f4 cf       	rjmp	.-24     	; 0x684 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     69c:	0e f4       	brtc	.+2      	; 0x6a0 <xvprintf+0x40>
	neg	r18		;
     69e:	21 95       	neg	r18
25:	ld	r24, Y+		;
     6a0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     6a2:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     6a4:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     6a6:	19 f3       	breq	.-58     	; 0x66e <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     6a8:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     6aa:	29 f1       	breq	.+74     	; 0x6f6 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     6ac:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     6ae:	59 f1       	breq	.+86     	; 0x706 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     6b0:	bc 01       	movw	r22, r24
	clr	r24		;
     6b2:	88 27       	eor	r24, r24
	clr	r25		;
     6b4:	99 27       	eor	r25, r25
	clt			;/
     6b6:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     6b8:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     6bc:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     6be:	99 91       	ld	r25, Y+
	set			;
     6c0:	68 94       	set
	_LPMI	r21		;/
     6c2:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     6c4:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     6c6:	39 f4       	brne	.+14     	; 0x6d6 <xvprintf+0x76>
	ldi	r20, -10	;
     6c8:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     6ca:	7e f0       	brts	.+30     	; 0x6ea <xvprintf+0x8a>
	sbrs	r23, 7		;
     6cc:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     6ce:	0d c0       	rjmp	.+26     	; 0x6ea <xvprintf+0x8a>
	ldi	r24, -1		;
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     6d2:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     6d4:	0a c0       	rjmp	.+20     	; 0x6ea <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     6d6:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     6d8:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     6da:	39 f0       	breq	.+14     	; 0x6ea <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     6dc:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     6de:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     6e0:	21 f0       	breq	.+8      	; 0x6ea <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     6e2:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     6e4:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     6e6:	09 f0       	breq	.+2      	; 0x6ea <xvprintf+0x8a>
	ret			;abort
     6e8:	08 95       	ret
40:	push	ZH		;Output the value
     6ea:	ff 93       	push	r31
	push	ZL		;
     6ec:	ef 93       	push	r30
	rcall	xitoa		;
     6ee:	7d df       	rcall	.-262    	; 0x5ea <xitoa>
42:	pop	ZL		;
     6f0:	ef 91       	pop	r30
	pop	ZH		;
     6f2:	ff 91       	pop	r31
	rjmp	0b		;/
     6f4:	b7 cf       	rjmp	.-146    	; 0x664 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     6f6:	ff 93       	push	r31
	push	ZL
     6f8:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     6fa:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     6fc:	81 91       	ld	r24, Z+
	cpi	r24, 0
     6fe:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     700:	b9 f3       	breq	.-18     	; 0x6f0 <xvprintf+0x90>
	rcall	xputc
     702:	60 df       	rcall	.-320    	; 0x5c4 <xputc>
	rjmp	51b
     704:	fb cf       	rjmp	.-10     	; 0x6fc <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     706:	ff 93       	push	r31
	push	ZL
     708:	ef 93       	push	r30
	rcall	xputs
     70a:	68 df       	rcall	.-304    	; 0x5dc <xputs>
	rjmp	42b
     70c:	f1 cf       	rjmp	.-30     	; 0x6f0 <xvprintf+0x90>

0000070e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     70e:	df 93       	push	r29
	push	YL
     710:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     712:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     714:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     716:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     718:	a3 df       	rcall	.-186    	; 0x660 <xvprintf>
	pop	YL
     71a:	cf 91       	pop	r28
	pop	YH
     71c:	df 91       	pop	r29
	ret
     71e:	08 95       	ret

00000720 <matrix_setup>:
    }
    return 0;
}
bool matrix_is_on(uint8_t row, uint8_t col) {
    return key[row] & (1<<col);
}
     720:	08 95       	ret

00000722 <matrix_init>:
     722:	bf 92       	push	r11
     724:	cf 92       	push	r12
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	80 ec       	ldi	r24, 0xC0	; 192
     736:	e8 e0       	ldi	r30, 0x08	; 8
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	df 01       	movw	r26, r30
     73c:	1d 92       	st	X+, r1
     73e:	8a 95       	dec	r24
     740:	e9 f7       	brne	.-6      	; 0x73c <matrix_init+0x1a>
     742:	80 e2       	ldi	r24, 0x20	; 32
     744:	e8 e8       	ldi	r30, 0x88	; 136
     746:	f1 e0       	ldi	r31, 0x01	; 1
     748:	df 01       	movw	r26, r30
     74a:	1d 92       	st	X+, r1
     74c:	8a 95       	dec	r24
     74e:	e9 f7       	brne	.-6      	; 0x74a <matrix_init+0x28>
     750:	80 e6       	ldi	r24, 0x60	; 96
     752:	e8 ea       	ldi	r30, 0xA8	; 168
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	df 01       	movw	r26, r30
     758:	1d 92       	st	X+, r1
     75a:	8a 95       	dec	r24
     75c:	e9 f7       	brne	.-6      	; 0x758 <matrix_init+0x36>
     75e:	30 e4       	ldi	r19, 0x40	; 64
     760:	b3 2e       	mov	r11, r19
     762:	88 ea       	ldi	r24, 0xA8	; 168
     764:	e8 2e       	mov	r14, r24
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	f8 2e       	mov	r15, r24
     76a:	c0 e0       	ldi	r28, 0x00	; 0
     76c:	65 e5       	ldi	r22, 0x55	; 85
     76e:	8c 2f       	mov	r24, r28
     770:	0e 94 0b 05 	call	0xa16	; 0xa16 <burst>
     774:	6a ea       	ldi	r22, 0xAA	; 170
     776:	8c 2f       	mov	r24, r28
     778:	0e 94 0b 05 	call	0xa16	; 0xa16 <burst>
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	10 e0       	ldi	r17, 0x00	; 0
     780:	67 01       	movw	r12, r14
     782:	c0 0e       	add	r12, r16
     784:	d1 1e       	adc	r13, r17
     786:	f6 01       	movw	r30, r12
     788:	d0 81       	ld	r29, Z
     78a:	80 2f       	mov	r24, r16
     78c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <sense>
     790:	96 95       	lsr	r25
     792:	87 95       	ror	r24
     794:	96 95       	lsr	r25
     796:	87 95       	ror	r24
     798:	8d 0f       	add	r24, r29
     79a:	d6 95       	lsr	r29
     79c:	d6 95       	lsr	r29
     79e:	8d 1b       	sub	r24, r29
     7a0:	d6 01       	movw	r26, r12
     7a2:	8c 93       	st	X, r24
     7a4:	b5 e3       	ldi	r27, 0x35	; 53
     7a6:	ba 95       	dec	r27
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <matrix_init+0x84>
     7aa:	00 00       	nop
     7ac:	0f 5f       	subi	r16, 0xFF	; 255
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	06 30       	cpi	r16, 0x06	; 6
     7b2:	11 05       	cpc	r17, r1
     7b4:	29 f7       	brne	.-54     	; 0x780 <matrix_init+0x5e>
     7b6:	0e 94 c8 05 	call	0xb90	; 0xb90 <discharge_all>
     7ba:	cf 5f       	subi	r28, 0xFF	; 255
     7bc:	e6 e0       	ldi	r30, 0x06	; 6
     7be:	ee 0e       	add	r14, r30
     7c0:	f1 1c       	adc	r15, r1
     7c2:	c0 31       	cpi	r28, 0x10	; 16
     7c4:	99 f6       	brne	.-90     	; 0x76c <matrix_init+0x4a>
     7c6:	ba 94       	dec	r11
     7c8:	b1 10       	cpse	r11, r1
     7ca:	cb cf       	rjmp	.-106    	; 0x762 <matrix_init+0x40>
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	08 95       	ret

000007e0 <matrix_scan>:
     7e0:	8f 92       	push	r8
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	c8 e8       	ldi	r28, 0x88	; 136
     7f8:	d1 e0       	ldi	r29, 0x01	; 1
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	e8 2e       	mov	r14, r24
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	f8 2e       	mov	r15, r24
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	cc 24       	eor	r12, r12
     806:	c3 94       	inc	r12
     808:	d1 2c       	mov	r13, r1
     80a:	65 e5       	ldi	r22, 0x55	; 85
     80c:	81 2f       	mov	r24, r17
     80e:	0e 94 0b 05 	call	0xa16	; 0xa16 <burst>
     812:	6a ea       	ldi	r22, 0xAA	; 170
     814:	81 2f       	mov	r24, r17
     816:	0e 94 0b 05 	call	0xa16	; 0xa16 <burst>
     81a:	81 2c       	mov	r8, r1
     81c:	91 2c       	mov	r9, r1
     81e:	a1 2c       	mov	r10, r1
     820:	b1 2c       	mov	r11, r1
     822:	8a 2d       	mov	r24, r10
     824:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <sense>
     828:	4a 2d       	mov	r20, r10
     82a:	f7 01       	movw	r30, r14
     82c:	e8 0d       	add	r30, r8
     82e:	f9 1d       	adc	r31, r9
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	81 35       	cpi	r24, 0x51	; 81
     836:	91 05       	cpc	r25, r1
     838:	60 f0       	brcs	.+24     	; 0x852 <matrix_scan+0x72>
     83a:	68 81       	ld	r22, Y
     83c:	79 81       	ldd	r23, Y+1	; 0x01
     83e:	96 01       	movw	r18, r12
     840:	0a 2c       	mov	r0, r10
     842:	02 c0       	rjmp	.+4      	; 0x848 <matrix_scan+0x68>
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	0a 94       	dec	r0
     84a:	e2 f7       	brpl	.-8      	; 0x844 <matrix_scan+0x64>
     84c:	26 2b       	or	r18, r22
     84e:	37 2b       	or	r19, r23
     850:	10 c0       	rjmp	.+32     	; 0x872 <matrix_scan+0x92>
     852:	80 33       	cpi	r24, 0x30	; 48
     854:	91 05       	cpc	r25, r1
     856:	78 f4       	brcc	.+30     	; 0x876 <matrix_scan+0x96>
     858:	96 01       	movw	r18, r12
     85a:	0a 2c       	mov	r0, r10
     85c:	02 c0       	rjmp	.+4      	; 0x862 <matrix_scan+0x82>
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <matrix_scan+0x7e>
     866:	20 95       	com	r18
     868:	30 95       	com	r19
     86a:	68 81       	ld	r22, Y
     86c:	79 81       	ldd	r23, Y+1	; 0x01
     86e:	26 23       	and	r18, r22
     870:	37 23       	and	r19, r23
     872:	39 83       	std	Y+1, r19	; 0x01
     874:	28 83       	st	Y, r18
     876:	96 01       	movw	r18, r12
     878:	02 c0       	rjmp	.+4      	; 0x87e <matrix_scan+0x9e>
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	4a 95       	dec	r20
     880:	e2 f7       	brpl	.-8      	; 0x87a <matrix_scan+0x9a>
     882:	a9 01       	movw	r20, r18
     884:	28 81       	ld	r18, Y
     886:	39 81       	ldd	r19, Y+1	; 0x01
     888:	24 23       	and	r18, r20
     88a:	35 23       	and	r19, r21
     88c:	23 2b       	or	r18, r19
     88e:	21 f0       	breq	.+8      	; 0x898 <matrix_scan+0xb8>
     890:	9c 01       	movw	r18, r24
     892:	30 61       	ori	r19, 0x10	; 16
     894:	31 83       	std	Z+1, r19	; 0x01
     896:	20 83       	st	Z, r18
     898:	3f ef       	ldi	r19, 0xFF	; 255
     89a:	a3 1a       	sub	r10, r19
     89c:	b3 0a       	sbc	r11, r19
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	88 0e       	add	r8, r24
     8a2:	91 1c       	adc	r9, r1
     8a4:	2c e0       	ldi	r18, 0x0C	; 12
     8a6:	82 16       	cp	r8, r18
     8a8:	91 04       	cpc	r9, r1
     8aa:	09 f0       	breq	.+2      	; 0x8ae <matrix_scan+0xce>
     8ac:	ba cf       	rjmp	.-140    	; 0x822 <matrix_scan+0x42>
     8ae:	0e 94 c8 05 	call	0xb90	; 0xb90 <discharge_all>
     8b2:	1f 5f       	subi	r17, 0xFF	; 255
     8b4:	22 96       	adiw	r28, 0x02	; 2
     8b6:	3c e0       	ldi	r19, 0x0C	; 12
     8b8:	e3 0e       	add	r14, r19
     8ba:	f1 1c       	adc	r15, r1
     8bc:	10 31       	cpi	r17, 0x10	; 16
     8be:	09 f0       	breq	.+2      	; 0x8c2 <matrix_scan+0xe2>
     8c0:	a4 cf       	rjmp	.-184    	; 0x80a <matrix_scan+0x2a>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	bf 90       	pop	r11
     8d4:	af 90       	pop	r10
     8d6:	9f 90       	pop	r9
     8d8:	8f 90       	pop	r8
     8da:	08 95       	ret

000008dc <matrix_get_row>:
matrix_row_t matrix_get_row(uint8_t row) {
    return key[row];
     8dc:	e8 2f       	mov	r30, r24
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e8 57       	subi	r30, 0x78	; 120
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
}
     8e8:	80 81       	ld	r24, Z
     8ea:	08 95       	ret

000008ec <matrix_print>:
void matrix_print(void) {
     8ec:	6f 92       	push	r6
     8ee:	7f 92       	push	r7
     8f0:	8f 92       	push	r8
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	98 ea       	ldi	r25, 0xA8	; 168
     90a:	69 2e       	mov	r6, r25
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	79 2e       	mov	r7, r25
     910:	28 e0       	ldi	r18, 0x08	; 8
     912:	82 2e       	mov	r8, r18
     914:	22 e0       	ldi	r18, 0x02	; 2
     916:	92 2e       	mov	r9, r18
     918:	08 e8       	ldi	r16, 0x88	; 136
     91a:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t x = 0; x < MATRIX_X; x++) {
        for (uint8_t y = 0; y < MATRIX_Y; y++) {
            xprintf("%04X(%02X)%c", counts[x][y], avg[x][y], (key[x] & (1<<y) ? '*' : ' '));
     91c:	aa 24       	eor	r10, r10
     91e:	a3 94       	inc	r10
     920:	b1 2c       	mov	r11, r1
     922:	4f ec       	ldi	r20, 0xCF	; 207
     924:	e4 2e       	mov	r14, r20
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	f4 2e       	mov	r15, r20
        }
        xprintf("\r\n");
     92a:	5c ec       	ldi	r21, 0xCC	; 204
     92c:	c5 2e       	mov	r12, r21
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	d5 2e       	mov	r13, r21
    return key[row] & (1<<col);
}
matrix_row_t matrix_get_row(uint8_t row) {
    return key[row];
}
void matrix_print(void) {
     932:	c0 e0       	ldi	r28, 0x00	; 0
     934:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x = 0; x < MATRIX_X; x++) {
        for (uint8_t y = 0; y < MATRIX_Y; y++) {
            xprintf("%04X(%02X)%c", counts[x][y], avg[x][y], (key[x] & (1<<y) ? '*' : ' '));
     936:	f8 01       	movw	r30, r16
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	95 01       	movw	r18, r10
     93e:	0c 2e       	mov	r0, r28
     940:	02 c0       	rjmp	.+4      	; 0x946 <matrix_print+0x5a>
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <matrix_print+0x56>
     94a:	82 23       	and	r24, r18
     94c:	93 23       	and	r25, r19
     94e:	89 2b       	or	r24, r25
     950:	11 f4       	brne	.+4      	; 0x956 <matrix_print+0x6a>
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	01 c0       	rjmp	.+2      	; 0x958 <matrix_print+0x6c>
     956:	8a e2       	ldi	r24, 0x2A	; 42
     958:	1f 92       	push	r1
     95a:	8f 93       	push	r24
     95c:	f3 01       	movw	r30, r6
     95e:	ec 0f       	add	r30, r28
     960:	fd 1f       	adc	r31, r29
     962:	80 81       	ld	r24, Z
     964:	1f 92       	push	r1
     966:	8f 93       	push	r24
     968:	fe 01       	movw	r30, r28
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	e8 0d       	add	r30, r8
     970:	f9 1d       	adc	r31, r9
     972:	81 81       	ldd	r24, Z+1	; 0x01
     974:	8f 93       	push	r24
     976:	80 81       	ld	r24, Z
     978:	8f 93       	push	r24
     97a:	ff 92       	push	r15
     97c:	ef 92       	push	r14
     97e:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
     982:	21 96       	adiw	r28, 0x01	; 1
matrix_row_t matrix_get_row(uint8_t row) {
    return key[row];
}
void matrix_print(void) {
    for (uint8_t x = 0; x < MATRIX_X; x++) {
        for (uint8_t y = 0; y < MATRIX_Y; y++) {
     984:	8d b7       	in	r24, 0x3d	; 61
     986:	9e b7       	in	r25, 0x3e	; 62
     988:	08 96       	adiw	r24, 0x08	; 8
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	9e bf       	out	0x3e, r25	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	8d bf       	out	0x3d, r24	; 61
     994:	c6 30       	cpi	r28, 0x06	; 6
     996:	d1 05       	cpc	r29, r1
     998:	71 f6       	brne	.-100    	; 0x936 <matrix_print+0x4a>
            xprintf("%04X(%02X)%c", counts[x][y], avg[x][y], (key[x] & (1<<y) ? '*' : ' '));
        }
        xprintf("\r\n");
     99a:	df 92       	push	r13
     99c:	cf 92       	push	r12
     99e:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
     9a2:	96 e0       	ldi	r25, 0x06	; 6
     9a4:	69 0e       	add	r6, r25
     9a6:	71 1c       	adc	r7, r1
     9a8:	ec e0       	ldi	r30, 0x0C	; 12
     9aa:	8e 0e       	add	r8, r30
     9ac:	91 1c       	adc	r9, r1
     9ae:	0e 5f       	subi	r16, 0xFE	; 254
     9b0:	1f 4f       	sbci	r17, 0xFF	; 255
}
matrix_row_t matrix_get_row(uint8_t row) {
    return key[row];
}
void matrix_print(void) {
    for (uint8_t x = 0; x < MATRIX_X; x++) {
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	f8 ec       	ldi	r31, 0xC8	; 200
     9b8:	8f 16       	cp	r8, r31
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	9f 06       	cpc	r9, r31
     9be:	09 f0       	breq	.+2      	; 0x9c2 <matrix_print+0xd6>
     9c0:	b8 cf       	rjmp	.-144    	; 0x932 <matrix_print+0x46>
        for (uint8_t y = 0; y < MATRIX_Y; y++) {
            xprintf("%04X(%02X)%c", counts[x][y], avg[x][y], (key[x] & (1<<y) ? '*' : ' '));
        }
        xprintf("\r\n");
    }
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	7f 90       	pop	r7
     9dc:	6f 90       	pop	r6
     9de:	08 95       	ret

000009e0 <matrix_power_up>:
void matrix_power_up(void) {}
     9e0:	08 95       	ret

000009e2 <matrix_power_down>:
void matrix_power_down(void) {}
     9e2:	08 95       	ret

000009e4 <led_set>:

void led_set(uint8_t usb_led) {}
     9e4:	08 95       	ret

000009e6 <keymap_key_to_keycode>:
/* translates key to keycode */
extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
extern const uint16_t fn_actions[];
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     9e6:	96 e0       	ldi	r25, 0x06	; 6
     9e8:	79 9f       	mul	r23, r25
     9ea:	f0 01       	movw	r30, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	9c e6       	ldi	r25, 0x6C	; 108
     9f0:	89 9f       	mul	r24, r25
     9f2:	e0 0d       	add	r30, r0
     9f4:	f1 1d       	adc	r31, r1
     9f6:	11 24       	eor	r1, r1
     9f8:	e6 0f       	add	r30, r22
     9fa:	f1 1d       	adc	r31, r1
     9fc:	e4 52       	subi	r30, 0x24	; 36
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	84 91       	lpm	r24, Z
}
     a02:	08 95       	ret

00000a04 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     a04:	e8 2f       	mov	r30, r24
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ee 0f       	add	r30, r30
     a0a:	ff 1f       	adc	r31, r31
     a0c:	e4 5a       	subi	r30, 0xA4	; 164
     a0e:	f0 40       	sbci	r31, 0x00	; 0
}
     a10:	85 91       	lpm	r24, Z+
     a12:	94 91       	lpm	r25, Z
     a14:	08 95       	ret

00000a16 <burst>:
    } else {
        DDRC |= (1<<(x&0x07)); PORTC &= ~(1<<(x&0x07));
    }
}
__attribute__ ((always_inline))
static inline void burst_lo_all(void)  { DDRD= 0xFF; PORTD = 0x00; DDRC= 0xFF; PORTC = 0x00; }
     a16:	9f ef       	ldi	r25, 0xFF	; 255
     a18:	9a b9       	out	0x0a, r25	; 10
     a1a:	1b b8       	out	0x0b, r1	; 11
     a1c:	97 b9       	out	0x07, r25	; 7
     a1e:	18 b8       	out	0x08, r1	; 8
/* Sense Y lines
 * Y0-7#Top:    PA0-7
 * Y0-7#Bottom: PF0-7
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
     a20:	91 b1       	in	r25, 0x01	; 1
     a22:	96 2b       	or	r25, r22
     a24:	91 b9       	out	0x01, r25	; 1
     a26:	22 b1       	in	r18, 0x02	; 2
     a28:	96 2f       	mov	r25, r22
     a2a:	90 95       	com	r25
     a2c:	29 23       	and	r18, r25
     a2e:	22 b9       	out	0x02, r18	; 2
//static inline void top_hi_mask(uint8_t m)      { DDRA |=  m; PORTA |=  m; }
__attribute__ ((always_inline))
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
     a30:	20 b3       	in	r18, 0x10	; 16
     a32:	26 2b       	or	r18, r22
     a34:	20 bb       	out	0x10, r18	; 16
     a36:	21 b3       	in	r18, 0x11	; 17
     a38:	29 23       	and	r18, r25
     a3a:	21 bb       	out	0x11, r18	; 17
__attribute__ ((always_inline))
static inline void slope_lo(void)      { DDRB |=  (1<<0); PORTB &= ~(1<<0); }
__attribute__ ((always_inline))
static inline void slope_hi(void)      { DDRB |=  (1<<0); PORTB |=  (1<<0); }
__attribute__ ((always_inline))
static inline void slope_hiz(void)     { DDRB &= ~(1<<0); PORTB &= ~(1<<0); }
     a3c:	20 98       	cbi	0x04, 0	; 4
     a3e:	28 98       	cbi	0x05, 0	; 5
__attribute__ ((always_inline))
static inline void burst_hi(uint8_t x) {
    if (x < 8) {
        DDRD |= (1<<x); PORTD |= (1<<x);
    } else {
        DDRC |= (1<<(x&0x07)); PORTC |= (1<<(x&0x07));
     a40:	48 2f       	mov	r20, r24
     a42:	47 70       	andi	r20, 0x07	; 7
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <burst+0x3a>
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	4a 95       	dec	r20
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <burst+0x36>
     a54:	af 01       	movw	r20, r30
     a56:	7e 2f       	mov	r23, r30
 * X8-15:   PC0-7
 */
__attribute__ ((always_inline))
static inline void burst_hi(uint8_t x) {
    if (x < 8) {
        DDRD |= (1<<x); PORTD |= (1<<x);
     a58:	08 2e       	mov	r0, r24
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <burst+0x48>
     a5c:	22 0f       	add	r18, r18
     a5e:	0a 94       	dec	r0
     a60:	ea f7       	brpl	.-6      	; 0xa5c <burst+0x46>
     a62:	52 2f       	mov	r21, r18
__attribute__ ((always_inline))
static inline void burst_lo(uint8_t x) {
    if (x < 8) {
        DDRD |= (1<<x); PORTD &= ~(1<<x);
    } else {
        DDRC |= (1<<(x&0x07)); PORTC &= ~(1<<(x&0x07));
     a64:	34 2f       	mov	r19, r20
     a66:	30 95       	com	r19
    }
}
__attribute__ ((always_inline))
static inline void burst_lo(uint8_t x) {
    if (x < 8) {
        DDRD |= (1<<x); PORTD &= ~(1<<x);
     a68:	20 95       	com	r18
     a6a:	40 e4       	ldi	r20, 0x40	; 64
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
//static inline void top_hi_mask(uint8_t m)      { DDRA |=  m; PORTA |=  m; }
__attribute__ ((always_inline))
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
     a6c:	e1 b1       	in	r30, 0x01	; 1
     a6e:	e9 23       	and	r30, r25
     a70:	e1 b9       	out	0x01, r30	; 1
     a72:	e2 b1       	in	r30, 0x02	; 2
     a74:	e9 23       	and	r30, r25
     a76:	e2 b9       	out	0x02, r30	; 2
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
     a78:	e0 b3       	in	r30, 0x10	; 16
     a7a:	e6 2b       	or	r30, r22
     a7c:	e0 bb       	out	0x10, r30	; 16
     a7e:	e1 b3       	in	r30, 0x11	; 17
     a80:	e9 23       	and	r30, r25
     a82:	e1 bb       	out	0x11, r30	; 17
 * X0-7:    PD0-7
 * X8-15:   PC0-7
 */
__attribute__ ((always_inline))
static inline void burst_hi(uint8_t x) {
    if (x < 8) {
     a84:	88 30       	cpi	r24, 0x08	; 8
     a86:	38 f4       	brcc	.+14     	; 0xa96 <burst+0x80>
        DDRD |= (1<<x); PORTD |= (1<<x);
     a88:	ea b1       	in	r30, 0x0a	; 10
     a8a:	e5 2b       	or	r30, r21
     a8c:	ea b9       	out	0x0a, r30	; 10
     a8e:	eb b1       	in	r30, 0x0b	; 11
     a90:	e5 2b       	or	r30, r21
     a92:	eb b9       	out	0x0b, r30	; 11
     a94:	06 c0       	rjmp	.+12     	; 0xaa2 <burst+0x8c>
    } else {
        DDRC |= (1<<(x&0x07)); PORTC |= (1<<(x&0x07));
     a96:	e7 b1       	in	r30, 0x07	; 7
     a98:	e7 2b       	or	r30, r23
     a9a:	e7 b9       	out	0x07, r30	; 7
     a9c:	e8 b1       	in	r30, 0x08	; 8
     a9e:	e7 2b       	or	r30, r23
     aa0:	e8 b9       	out	0x08, r30	; 8
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
//static inline void bottom_hi_mask(uint8_t m)   { DDRF |=  m; PORTF |=  m; }
__attribute__ ((always_inline))
static inline void bottom_hiz_mask(uint8_t m)  { DDRF &= ~m; PORTF &= ~m; }
     aa2:	e0 b3       	in	r30, 0x10	; 16
     aa4:	e9 23       	and	r30, r25
     aa6:	e0 bb       	out	0x10, r30	; 16
     aa8:	e1 b3       	in	r30, 0x11	; 17
     aaa:	e9 23       	and	r30, r25
     aac:	e1 bb       	out	0x11, r30	; 17
/* Sense Y lines
 * Y0-7#Top:    PA0-7
 * Y0-7#Bottom: PF0-7
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
     aae:	e1 b1       	in	r30, 0x01	; 1
     ab0:	e6 2b       	or	r30, r22
     ab2:	e1 b9       	out	0x01, r30	; 1
     ab4:	e2 b1       	in	r30, 0x02	; 2
     ab6:	e9 23       	and	r30, r25
     ab8:	e2 b9       	out	0x02, r30	; 2
        DDRC |= (1<<(x&0x07)); PORTC |= (1<<(x&0x07));
    }
}
__attribute__ ((always_inline))
static inline void burst_lo(uint8_t x) {
    if (x < 8) {
     aba:	88 30       	cpi	r24, 0x08	; 8
     abc:	38 f4       	brcc	.+14     	; 0xacc <burst+0xb6>
        DDRD |= (1<<x); PORTD &= ~(1<<x);
     abe:	ea b1       	in	r30, 0x0a	; 10
     ac0:	e5 2b       	or	r30, r21
     ac2:	ea b9       	out	0x0a, r30	; 10
     ac4:	eb b1       	in	r30, 0x0b	; 11
     ac6:	e2 23       	and	r30, r18
     ac8:	eb b9       	out	0x0b, r30	; 11
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <burst+0xc2>
    } else {
        DDRC |= (1<<(x&0x07)); PORTC &= ~(1<<(x&0x07));
     acc:	e7 b1       	in	r30, 0x07	; 7
     ace:	e7 2b       	or	r30, r23
     ad0:	e7 b9       	out	0x07, r30	; 7
     ad2:	e8 b1       	in	r30, 0x08	; 8
     ad4:	e3 23       	and	r30, r19
     ad6:	e8 b9       	out	0x08, r30	; 8
     ad8:	41 50       	subi	r20, 0x01	; 1
    top_lo_mask(ymask);
    bottom_lo_mask(ymask);
    slope_hiz();

    // Burst length: 16-64
    for (uint8_t i = 0; i < 64; i++) {
     ada:	41 f6       	brne	.-112    	; 0xa6c <burst+0x56>
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
//static inline void top_hi_mask(uint8_t m)      { DDRA |=  m; PORTA |=  m; }
__attribute__ ((always_inline))
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
     adc:	81 b1       	in	r24, 0x01	; 1
     ade:	89 23       	and	r24, r25
     ae0:	81 b9       	out	0x01, r24	; 1
     ae2:	82 b1       	in	r24, 0x02	; 2
     ae4:	89 23       	and	r24, r25
     ae6:	82 b9       	out	0x02, r24	; 2
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
     ae8:	80 b3       	in	r24, 0x10	; 16
     aea:	68 2b       	or	r22, r24
     aec:	60 bb       	out	0x10, r22	; 16
     aee:	81 b3       	in	r24, 0x11	; 17
     af0:	98 23       	and	r25, r24
     af2:	91 bb       	out	0x11, r25	; 17
     af4:	08 95       	ret

00000af6 <sense>:
uint16_t sense(uint8_t y)
{
    // Analog Comparator setup
    // input+: AIN0 = GND
    // input-: Multiplexer = bottom
    ADMUX   =  y;           // bottom - Multiplexer select
     af6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA &= ~(1<<ADEN);   // ADC disable
     afa:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     afe:	9f 77       	andi	r25, 0x7F	; 127
     b00:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    ADCSRB |=  (1<<ACME);   // Analog Comparator Multiplexer Enable
     b04:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     b08:	90 64       	ori	r25, 0x40	; 64
     b0a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    //ACSR |=  (1<<ACIC);   // Analog Comparator Input Capture Enable

    // sense
    bottom_hiz_mask(1<<y);
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <sense+0x20>
     b14:	22 0f       	add	r18, r18
     b16:	8a 95       	dec	r24
     b18:	ea f7       	brpl	.-6      	; 0xb14 <sense+0x1e>
//static inline void bottom_hi_mask(uint8_t m)   { DDRF |=  m; PORTF |=  m; }
__attribute__ ((always_inline))
static inline void bottom_hiz_mask(uint8_t m)  { DDRF &= ~m; PORTF &= ~m; }
     b1a:	80 b3       	in	r24, 0x10	; 16
     b1c:	92 2f       	mov	r25, r18
     b1e:	90 95       	com	r25
     b20:	89 23       	and	r24, r25
     b22:	80 bb       	out	0x10, r24	; 16
     b24:	81 b3       	in	r24, 0x11	; 17
     b26:	89 23       	and	r24, r25
     b28:	81 bb       	out	0x11, r24	; 17
/* Sense Y lines
 * Y0-7#Top:    PA0-7
 * Y0-7#Bottom: PF0-7
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
     b2a:	81 b1       	in	r24, 0x01	; 1
     b2c:	82 2b       	or	r24, r18
     b2e:	81 b9       	out	0x01, r24	; 1
     b30:	82 b1       	in	r24, 0x02	; 2
     b32:	89 23       	and	r24, r25
     b34:	82 b9       	out	0x02, r24	; 2
 * Slope:       PB0
 */
__attribute__ ((always_inline))
static inline void slope_lo(void)      { DDRB |=  (1<<0); PORTB &= ~(1<<0); }
__attribute__ ((always_inline))
static inline void slope_hi(void)      { DDRB |=  (1<<0); PORTB |=  (1<<0); }
     b36:	20 9a       	sbi	0x04, 0	; 4
     b38:	28 9a       	sbi	0x05, 0	; 5
    top_lo_mask(1<<y);
    slope_hi();

    // Analog Comparator Output
    uint16_t count = 0;
    cli();
     b3a:	f8 94       	cli
    bottom_hiz_mask(1<<y);
    top_lo_mask(1<<y);
    slope_hi();

    // Analog Comparator Output
    uint16_t count = 0;
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
    cli();
    while (ACSR & (1<<ACO)) {
     b40:	00 b6       	in	r0, 0x30	; 48
     b42:	05 fe       	sbrs	r0, 5
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <sense+0x56>
        count++;
     b46:	4f 5f       	subi	r20, 0xFF	; 255
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	fa cf       	rjmp	.-12     	; 0xb40 <sense+0x4a>
    }
    sei();
     b4c:	78 94       	sei
__attribute__ ((always_inline))
static inline void slope_hiz(void)     { DDRB &= ~(1<<0); PORTB &= ~(1<<0); }
     b4e:	20 98       	cbi	0x04, 0	; 4
     b50:	28 98       	cbi	0x05, 0	; 5
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
//static inline void top_hi_mask(uint8_t m)      { DDRA |=  m; PORTA |=  m; }
__attribute__ ((always_inline))
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
     b52:	81 b1       	in	r24, 0x01	; 1
     b54:	89 23       	and	r24, r25
     b56:	81 b9       	out	0x01, r24	; 1
     b58:	82 b1       	in	r24, 0x02	; 2
     b5a:	89 23       	and	r24, r25
     b5c:	82 b9       	out	0x02, r24	; 2
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
//static inline void bottom_hi_mask(uint8_t m)   { DDRF |=  m; PORTF |=  m; }
__attribute__ ((always_inline))
static inline void bottom_hiz_mask(uint8_t m)  { DDRF &= ~m; PORTF &= ~m; }
     b5e:	80 b3       	in	r24, 0x10	; 16
     b60:	89 23       	and	r24, r25
     b62:	80 bb       	out	0x10, r24	; 16
     b64:	81 b3       	in	r24, 0x11	; 17
     b66:	89 23       	and	r24, r25
     b68:	81 bb       	out	0x11, r24	; 17

    slope_hiz();
    top_hiz_mask(1<<y);
    bottom_hiz_mask(1<<y);

    ADCSRB &= ~(1<<ACME);   // Analog Comparator Multiplexer Disable
     b6a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     b6e:	8f 7b       	andi	r24, 0xBF	; 191
     b70:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/* Sense Y lines
 * Y0-7#Top:    PA0-7
 * Y0-7#Bottom: PF0-7
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
     b74:	81 b1       	in	r24, 0x01	; 1
     b76:	82 2b       	or	r24, r18
     b78:	81 b9       	out	0x01, r24	; 1
     b7a:	82 b1       	in	r24, 0x02	; 2
     b7c:	89 23       	and	r24, r25
     b7e:	82 b9       	out	0x02, r24	; 2
//static inline void top_hi_mask(uint8_t m)      { DDRA |=  m; PORTA |=  m; }
__attribute__ ((always_inline))
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
     b80:	80 b3       	in	r24, 0x10	; 16
     b82:	28 2b       	or	r18, r24
     b84:	20 bb       	out	0x10, r18	; 16
     b86:	81 b3       	in	r24, 0x11	; 17
     b88:	98 23       	and	r25, r24
     b8a:	91 bb       	out	0x11, r25	; 17
    // discharge
    top_lo_mask(1<<y);
    bottom_lo_mask(1<<y);

    return count;
}
     b8c:	ca 01       	movw	r24, r20
     b8e:	08 95       	ret

00000b90 <discharge_all>:
/* Sense Y lines
 * Y0-7#Top:    PA0-7
 * Y0-7#Bottom: PF0-7
 */
__attribute__ ((always_inline))
static inline void top_lo_mask(uint8_t m)      { DDRA |=  m; PORTA &= ~m; }
     b90:	81 b1       	in	r24, 0x01	; 1
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	81 b9       	out	0x01, r24	; 1
     b96:	92 b1       	in	r25, 0x02	; 2
     b98:	12 b8       	out	0x02, r1	; 2
//static inline void top_hi_mask(uint8_t m)      { DDRA |=  m; PORTA |=  m; }
__attribute__ ((always_inline))
static inline void top_hiz_mask(uint8_t m)     { DDRA &= ~m; PORTA &= ~m; }
__attribute__ ((always_inline))
static inline void bottom_lo_mask(uint8_t m)   { DDRF |=  m; PORTF &= ~m; }
     b9a:	90 b3       	in	r25, 0x10	; 16
     b9c:	80 bb       	out	0x10, r24	; 16
     b9e:	81 b3       	in	r24, 0x11	; 17
     ba0:	11 ba       	out	0x11, r1	; 17

/* Slope line
 * Slope:       PB0
 */
__attribute__ ((always_inline))
static inline void slope_lo(void)      { DDRB |=  (1<<0); PORTB &= ~(1<<0); }
     ba2:	20 9a       	sbi	0x04, 0	; 4
     ba4:	28 98       	cbi	0x05, 0	; 5
     ba6:	08 95       	ret

00000ba8 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     ba8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyboard_led_stats>
     bac:	08 95       	ret

00000bae <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     bae:	08 95       	ret

00000bb0 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     bb0:	9f b7       	in	r25, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <console_flush>
     bb8:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     bba:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <USB_DeviceState>
     bbe:	94 30       	cpi	r25, 0x04	; 4
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <sendchar+0x14>
     bc2:	57 c0       	rjmp	.+174    	; 0xc72 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bc4:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     bc8:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bca:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     bce:	23 2f       	mov	r18, r19
     bd0:	21 70       	andi	r18, 0x01	; 1
     bd2:	30 fd       	sbrc	r19, 0
     bd4:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bd6:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     bde:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     be2:	20 ff       	sbrs	r18, 0
     be4:	43 c0       	rjmp	.+134    	; 0xc6c <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     be6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     bea:	27 ff       	sbrs	r18, 7
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     bee:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <timeouted.4781>
     bf2:	22 23       	and	r18, r18
     bf4:	21 f0       	breq	.+8      	; 0xbfe <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bf6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bfa:	25 ff       	sbrs	r18, 5
     bfc:	37 c0       	rjmp	.+110    	; 0xc6c <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
     bfe:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timeouted.4781>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     c02:	26 e0       	ldi	r18, 0x06	; 6
     c04:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c08:	35 fd       	sbrc	r19, 5
     c0a:	15 c0       	rjmp	.+42     	; 0xc36 <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     c0c:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <USB_DeviceState>
     c10:	34 30       	cpi	r19, 0x04	; 4
     c12:	61 f5       	brne	.+88     	; 0xc6c <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c14:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     c18:	35 fd       	sbrc	r19, 5
     c1a:	28 c0       	rjmp	.+80     	; 0xc6c <sendchar+0xbc>
     c1c:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     c1e:	21 f4       	brne	.+8      	; 0xc28 <sendchar+0x78>
            timeouted = true;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timeouted.4781>
            goto ERROR_EXIT;
     c26:	22 c0       	rjmp	.+68     	; 0xc6c <sendchar+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c28:	ef e9       	ldi	r30, 0x9F	; 159
     c2a:	ff e0       	ldi	r31, 0x0F	; 15
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <sendchar+0x7c>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <sendchar+0x82>
     c32:	00 00       	nop
     c34:	e7 cf       	rjmp	.-50     	; 0xc04 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
     c3e:	85 fd       	sbrc	r24, 5
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
     c46:	80 ff       	sbrs	r24, 0
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c4e:	8e 77       	andi	r24, 0x7E	; 126
     c50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c54:	06 c0       	rjmp	.+12     	; 0xc62 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
     c56:	8f b7       	in	r24, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <console_flush>
     c60:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c62:	9f 70       	andi	r25, 0x0F	; 15
     c64:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret
     c6c:	9f 70       	andi	r25, 0x0F	; 15
     c6e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
     c72:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
     c74:	08 95       	ret

00000c76 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <send_consumer+0x6>
     c7c:	1f 92       	push	r1
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     c82:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <USB_DeviceState>
     c86:	24 30       	cpi	r18, 0x04	; 4
     c88:	21 f5       	brne	.+72     	; 0xcd2 <send_consumer+0x5c>
        return;

    report_extra_t r = {
     c8a:	23 e0       	ldi	r18, 0x03	; 3
     c8c:	29 83       	std	Y+1, r18	; 0x01
     c8e:	9b 83       	std	Y+3, r25	; 0x03
     c90:	8a 83       	std	Y+2, r24	; 0x02
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c9a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c9e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     ca0:	95 fd       	sbrc	r25, 5
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca4:	95 ed       	ldi	r25, 0xD5	; 213
     ca6:	9a 95       	dec	r25
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <send_consumer+0x30>
     caa:	00 00       	nop
     cac:	81 11       	cpse	r24, r1
     cae:	f5 cf       	rjmp	.-22     	; 0xc9a <send_consumer+0x24>
     cb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     cb4:	85 ff       	sbrs	r24, 5
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	63 e0       	ldi	r22, 0x03	; 3
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	0e 94 b8 08 	call	0x1170	; 0x1170 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ccc:	8e 77       	andi	r24, 0x7E	; 126
     cce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <send_system+0x6>
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     cea:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <USB_DeviceState>
     cee:	24 30       	cpi	r18, 0x04	; 4
     cf0:	21 f5       	brne	.+72     	; 0xd3a <send_system+0x5c>
        return;

    report_extra_t r = {
     cf2:	22 e0       	ldi	r18, 0x02	; 2
     cf4:	29 83       	std	Y+1, r18	; 0x01
     cf6:	9b 83       	std	Y+3, r25	; 0x03
     cf8:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d00:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d02:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d06:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     d08:	95 fd       	sbrc	r25, 5
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <send_system+0x3a>
     d0c:	95 ed       	ldi	r25, 0xD5	; 213
     d0e:	9a 95       	dec	r25
     d10:	f1 f7       	brne	.-4      	; 0xd0e <send_system+0x30>
     d12:	00 00       	nop
     d14:	81 11       	cpse	r24, r1
     d16:	f5 cf       	rjmp	.-22     	; 0xd02 <send_system+0x24>
     d18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     d1c:	85 ff       	sbrs	r24, 5
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	63 e0       	ldi	r22, 0x03	; 3
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 b8 08 	call	0x1170	; 0x1170 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d34:	8e 77       	andi	r24, 0x7E	; 126
     d36:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     d4a:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <USB_DeviceState>
     d4e:	24 30       	cpi	r18, 0x04	; 4
     d50:	39 f5       	brne	.+78     	; 0xda0 <send_keyboard+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d58:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d5a:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d5e:	21 50       	subi	r18, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     d60:	35 fd       	sbrc	r19, 5
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <send_keyboard+0x2a>
     d64:	35 ed       	ldi	r19, 0xD5	; 213
     d66:	3a 95       	dec	r19
     d68:	f1 f7       	brne	.-4      	; 0xd66 <send_keyboard+0x20>
     d6a:	00 00       	nop
     d6c:	21 11       	cpse	r18, r1
     d6e:	f5 cf       	rjmp	.-22     	; 0xd5a <send_keyboard+0x14>
     d70:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
     d74:	25 ff       	sbrs	r18, 5
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <send_keyboard+0x5a>
     d78:	ec 01       	movw	r28, r24

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	68 e0       	ldi	r22, 0x08	; 8
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	0e 94 b8 08 	call	0x1170	; 0x1170 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d8a:	8e 77       	andi	r24, 0x7E	; 126
     d8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
     d90:	88 e0       	ldi	r24, 0x08	; 8
     d92:	fe 01       	movw	r30, r28
     d94:	a3 e1       	ldi	r26, 0x13	; 19
     d96:	b1 e0       	ldi	r27, 0x01	; 1
     d98:	01 90       	ld	r0, Z+
     d9a:	0d 92       	st	X+, r0
     d9c:	8a 95       	dec	r24
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <send_keyboard+0x52>
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
     da6:	8e e7       	ldi	r24, 0x7E	; 126
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
     dae:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <USB_IsInitialized>
     db2:	81 11       	cpse	r24, r1
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
     db6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <USB_Disable>
        USB_Init();
     dba:	0e 94 ad 0a 	call	0x155a	; 0x155a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     dbe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dc2:	84 60       	ori	r24, 0x04	; 4
     dc4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dc8:	08 95       	ret

00000dca <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
     dca:	8a e7       	ldi	r24, 0x7A	; 122
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
     dd2:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <USB_IsInitialized>
     dd6:	08 95       	ret

00000dd8 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
     dd8:	86 e7       	ldi	r24, 0x76	; 118
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <xputs>

00000de0 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
     de0:	82 e7       	ldi	r24, 0x72	; 114
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <xputs>

00000de8 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
     de8:	8e e6       	ldi	r24, 0x6E	; 110
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    suspend_wakeup_init();
     df0:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <suspend_wakeup_init>

00000df4 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
     df4:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <count.4719>
     df8:	2f 5f       	subi	r18, 0xFF	; 255
     dfa:	82 2f       	mov	r24, r18
     dfc:	62 e3       	ldi	r22, 0x32	; 50
     dfe:	0e 94 14 1b 	call	0x3628	; 0x3628 <__udivmodqi4>
     e02:	99 23       	and	r25, r25
     e04:	19 f0       	breq	.+6      	; 0xe0c <EVENT_USB_Device_StartOfFrame+0x18>
     e06:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <count.4719>
     e0a:	08 95       	ret
    count = 0;
     e0c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count.4719>

    if (!console_flush) return;
     e10:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <console_flush>
     e14:	88 23       	and	r24, r24
     e16:	71 f1       	breq	.+92     	; 0xe74 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     e18:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
     e1c:	84 30       	cpi	r24, 0x04	; 4
     e1e:	41 f5       	brne	.+80     	; 0xe70 <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e20:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     e24:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e26:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e2a:	92 2f       	mov	r25, r18
     e2c:	91 70       	andi	r25, 0x01	; 1
     e2e:	20 fd       	sbrc	r18, 0
     e30:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e32:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e3a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e3e:	90 ff       	sbrs	r25, 0
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e42:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     e46:	97 ff       	sbrs	r25, 7
     e48:	10 c0       	rjmp	.+32     	; 0xe6a <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e4a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
     e4e:	95 ff       	sbrs	r25, 5
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e52:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e56:	f9 cf       	rjmp	.-14     	; 0xe4a <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e58:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
     e5c:	90 ff       	sbrs	r25, 0
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e60:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e64:	9e 77       	andi	r25, 0x7E	; 126
     e66:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
     e70:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <console_flush>
     e74:	08 95       	ret

00000e76 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e76:	42 e0       	ldi	r20, 0x02	; 2
     e78:	61 ec       	ldi	r22, 0xC1	; 193
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 c5 09 	call	0x138a	; 0x138a <Endpoint_ConfigureEndpoint_Prv>
     e80:	42 e2       	ldi	r20, 0x22	; 34
     e82:	61 ec       	ldi	r22, 0xC1	; 193
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0c 94 c5 09 	jmp	0x138a	; 0x138a <Endpoint_ConfigureEndpoint_Prv>

00000e8a <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
     e8a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <USB_ControlRequest+0x1>
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	09 f4       	brne	.+2      	; 0xe94 <EVENT_USB_Device_ControlRequest+0xa>
     e92:	53 c0       	rjmp	.+166    	; 0xf3a <EVENT_USB_Device_ControlRequest+0xb0>
     e94:	30 f4       	brcc	.+12     	; 0xea2 <EVENT_USB_Device_ControlRequest+0x18>
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	71 f0       	breq	.+28     	; 0xeb6 <EVENT_USB_Device_ControlRequest+0x2c>
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	09 f4       	brne	.+2      	; 0xea0 <EVENT_USB_Device_ControlRequest+0x16>
     e9e:	8c c0       	rjmp	.+280    	; 0xfb8 <EVENT_USB_Device_ControlRequest+0x12e>
     ea0:	08 95       	ret
     ea2:	8a 30       	cpi	r24, 0x0A	; 10
     ea4:	09 f4       	brne	.+2      	; 0xea8 <EVENT_USB_Device_ControlRequest+0x1e>
     ea6:	78 c0       	rjmp	.+240    	; 0xf98 <EVENT_USB_Device_ControlRequest+0x10e>
     ea8:	8b 30       	cpi	r24, 0x0B	; 11
     eaa:	09 f4       	brne	.+2      	; 0xeae <EVENT_USB_Device_ControlRequest+0x24>
     eac:	5e c0       	rjmp	.+188    	; 0xf6a <EVENT_USB_Device_ControlRequest+0xe0>
     eae:	89 30       	cpi	r24, 0x09	; 9
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <EVENT_USB_Device_ControlRequest+0x2a>
     eb2:	9a c0       	rjmp	.+308    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
     eb4:	20 c0       	rjmp	.+64     	; 0xef6 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     eb6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
     eba:	81 3a       	cpi	r24, 0xA1	; 161
     ebc:	09 f0       	breq	.+2      	; 0xec0 <EVENT_USB_Device_ControlRequest+0x36>
     ebe:	94 c0       	rjmp	.+296    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ec4:	87 7f       	andi	r24, 0xF7	; 247
     ec6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
     eca:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
     ece:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <USB_ControlRequest+0x5>
     ed2:	89 2b       	or	r24, r25
     ed4:	21 f4       	brne	.+8      	; 0xede <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
     ed6:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
     ed8:	83 e1       	ldi	r24, 0x13	; 19
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
     ede:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	0e 94 05 09 	call	0x120a	; 0x120a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eee:	8b 77       	andi	r24, 0x7B	; 123
     ef0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ef4:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ef6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
     efa:	81 32       	cpi	r24, 0x21	; 33
     efc:	09 f0       	breq	.+2      	; 0xf00 <EVENT_USB_Device_ControlRequest+0x76>
     efe:	74 c0       	rjmp	.+232    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
     f00:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
     f04:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <USB_ControlRequest+0x5>
     f08:	89 2b       	or	r24, r25
     f0a:	09 f0       	breq	.+2      	; 0xf0e <EVENT_USB_Device_ControlRequest+0x84>
     f0c:	6d c0       	rjmp	.+218    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f12:	87 7f       	andi	r24, 0xF7	; 247
     f14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
     f1c:	82 fd       	sbrc	r24, 2
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
     f20:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
     f24:	81 11       	cpse	r24, r1
     f26:	f8 cf       	rjmp	.-16     	; 0xf18 <EVENT_USB_Device_ControlRequest+0x8e>
     f28:	5f c0       	rjmp	.+190    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f2a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
     f2e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <keyboard_led_stats>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f36:	8b 77       	andi	r24, 0x7B	; 123
     f38:	53 c0       	rjmp	.+166    	; 0xfe0 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f3a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
     f3e:	81 3a       	cpi	r24, 0xA1	; 161
     f40:	09 f0       	breq	.+2      	; 0xf44 <EVENT_USB_Device_ControlRequest+0xba>
     f42:	52 c0       	rjmp	.+164    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     f44:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
     f48:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <USB_ControlRequest+0x5>
     f4c:	89 2b       	or	r24, r25
     f4e:	09 f0       	breq	.+2      	; 0xf52 <EVENT_USB_Device_ControlRequest+0xc8>
     f50:	4b c0       	rjmp	.+150    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f56:	87 7f       	andi	r24, 0xF7	; 247
     f58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
     f60:	80 ff       	sbrs	r24, 0
     f62:	fc cf       	rjmp	.-8      	; 0xf5c <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
     f64:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <keyboard_protocol>
     f68:	36 c0       	rjmp	.+108    	; 0xfd6 <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f6a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
     f6e:	81 32       	cpi	r24, 0x21	; 33
     f70:	d9 f5       	brne	.+118    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     f72:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
     f76:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <USB_ControlRequest+0x5>
     f7a:	89 2b       	or	r24, r25
     f7c:	a9 f5       	brne	.+106    	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f82:	87 7f       	andi	r24, 0xF7	; 247
     f84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
     f88:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
     f8c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <USB_ControlRequest+0x2>
     f90:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <keyboard_protocol>
                    clear_keyboard();
     f94:	0c 94 12 12 	jmp	0x2424	; 0x2424 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f98:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
     f9c:	81 32       	cpi	r24, 0x21	; 33
     f9e:	21 f5       	brne	.+72     	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
     fa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     faa:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
     fae:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <USB_ControlRequest+0x3>
     fb2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <keyboard_idle>
     fb6:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fb8:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
     fbc:	81 3a       	cpi	r24, 0xA1	; 161
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <EVENT_USB_Device_ControlRequest+0x15e>
     fc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fc4:	87 7f       	andi	r24, 0xF7	; 247
     fc6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
     fce:	80 ff       	sbrs	r24, 0
     fd0:	fc cf       	rjmp	.-8      	; 0xfca <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
     fd2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <keyboard_idle>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fd6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fde:	8e 77       	andi	r24, 0x7E	; 126
     fe0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
     fe4:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <Endpoint_ClearStatusStage>
     fe8:	08 95       	ret

00000fea <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     fea:	84 b7       	in	r24, 0x34	; 52
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	84 bf       	out	0x34, r24	; 52
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	a8 95       	wdr
     ff6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ffa:	88 61       	ori	r24, 0x18	; 24
     ffc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1000:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1004:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1012:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1016:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1018:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    101c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <USB_Disable>

    USB_Init();
    1020:	0e 94 ad 0a 	call	0x155a	; 0x155a <USB_Init>
    1024:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    102e:	88 ed       	ldi	r24, 0xD8	; 216
    1030:	95 e0       	ldi	r25, 0x05	; 5
    1032:	0e 94 b5 18 	call	0x316a	; 0x316a <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1036:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1038:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	19 f0       	breq	.+6      	; 0x1046 <main+0x5c>
#if defined(INTERRUPT_CONTROL_ENDPOINT)
        ;
#else
        USB_USBTask();
    1040:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <USB_USBTask>
    1044:	f9 cf       	rjmp	.-14     	; 0x1038 <main+0x4e>
#endif
    }
    print("USB configured.\n");
    1046:	8d e5       	ldi	r24, 0x5D	; 93
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>

    /* init modules */
    keyboard_init();
    104e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <keyboard_init>
    host_set_driver(&lufa_driver);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    105a:	8c e4       	ldi	r24, 0x4C	; 76
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1062:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	89 f4       	brne	.+34     	; 0x108c <main+0xa2>
            print("[s]");
    106a:	88 e4       	ldi	r24, 0x48	; 72
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            suspend_power_down();
    1072:	0e 94 ba 18 	call	0x3174	; 0x3174 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1076:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <USB_Device_RemoteWakeupEnabled>
    107a:	88 23       	and	r24, r24
    107c:	91 f3       	breq	.-28     	; 0x1062 <main+0x78>
    107e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <suspend_wakeup_condition>
    1082:	88 23       	and	r24, r24
    1084:	71 f3       	breq	.-36     	; 0x1062 <main+0x78>
                    USB_Device_SendRemoteWakeup();
    1086:	0e 94 a2 08 	call	0x1144	; 0x1144 <USB_Device_SendRemoteWakeup>
    108a:	eb cf       	rjmp	.-42     	; 0x1062 <main+0x78>
            }
        }

        keyboard_task();
    108c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
    1090:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <USB_USBTask>
#endif
    }
    1094:	e6 cf       	rjmp	.-52     	; 0x1062 <main+0x78>

00001096 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1096:	29 2f       	mov	r18, r25
    1098:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    109a:	23 30       	cpi	r18, 0x03	; 3
    109c:	31 05       	cpc	r19, r1
    109e:	c9 f0       	breq	.+50     	; 0x10d2 <CALLBACK_USB_GetDescriptor+0x3c>
    10a0:	64 f4       	brge	.+24     	; 0x10ba <CALLBACK_USB_GetDescriptor+0x24>
    10a2:	21 30       	cpi	r18, 0x01	; 1
    10a4:	31 05       	cpc	r19, r1
    10a6:	81 f0       	breq	.+32     	; 0x10c8 <CALLBACK_USB_GetDescriptor+0x32>
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <CALLBACK_USB_GetDescriptor+0x1a>
    10ae:	42 c0       	rjmp	.+132    	; 0x1134 <CALLBACK_USB_GetDescriptor+0x9e>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    10b0:	82 e4       	ldi	r24, 0x42	; 66
    10b2:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    10b4:	2a eb       	ldi	r18, 0xBA	; 186
    10b6:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    10b8:	41 c0       	rjmp	.+130    	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    10ba:	21 32       	cpi	r18, 0x21	; 33
    10bc:	31 05       	cpc	r19, r1
    10be:	f1 f0       	breq	.+60     	; 0x10fc <CALLBACK_USB_GetDescriptor+0x66>
    10c0:	22 32       	cpi	r18, 0x22	; 34
    10c2:	31 05       	cpc	r19, r1
    10c4:	49 f1       	breq	.+82     	; 0x1118 <CALLBACK_USB_GetDescriptor+0x82>
    10c6:	36 c0       	rjmp	.+108    	; 0x1134 <CALLBACK_USB_GetDescriptor+0x9e>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    10c8:	82 e1       	ldi	r24, 0x12	; 18
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    10cc:	2c ef       	ldi	r18, 0xFC	; 252
    10ce:	31 e0       	ldi	r19, 0x01	; 1
    10d0:	35 c0       	rjmp	.+106    	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
    10d2:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	41 f0       	breq	.+16     	; 0x10ea <CALLBACK_USB_GetDescriptor+0x54>
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	91 05       	cpc	r25, r1
    10de:	41 f0       	breq	.+16     	; 0x10f0 <CALLBACK_USB_GetDescriptor+0x5a>
    10e0:	89 2b       	or	r24, r25
    10e2:	41 f5       	brne	.+80     	; 0x1134 <CALLBACK_USB_GetDescriptor+0x9e>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    10e4:	e6 eb       	ldi	r30, 0xB6	; 182
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    10ea:	ec ea       	ldi	r30, 0xAC	; 172
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    10f0:	e2 e8       	ldi	r30, 0x82	; 130
    10f2:	f1 e0       	ldi	r31, 0x01	; 1
    10f4:	84 91       	lpm	r24, Z
    10f6:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    10f8:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    10fa:	20 c0       	rjmp	.+64     	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    10fc:	66 23       	and	r22, r22
    10fe:	39 f0       	breq	.+14     	; 0x110e <CALLBACK_USB_GetDescriptor+0x78>
    1100:	61 30       	cpi	r22, 0x01	; 1
    1102:	c1 f4       	brne	.+48     	; 0x1134 <CALLBACK_USB_GetDescriptor+0x9e>
                break;
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConfigurationDescriptor.Console_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
    1104:	89 e0       	ldi	r24, 0x09	; 9
    1106:	90 e0       	ldi	r25, 0x00	; 0
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConfigurationDescriptor.Console_HID;
    1108:	25 ee       	ldi	r18, 0xE5	; 229
    110a:	31 e0       	ldi	r19, 0x01	; 1
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    110c:	17 c0       	rjmp	.+46     	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
            case KEYBOARD_INTERFACE:
                Address = &ConfigurationDescriptor.Keyboard_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
    110e:	89 e0       	ldi	r24, 0x09	; 9
    1110:	90 e0       	ldi	r25, 0x00	; 0
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
            case KEYBOARD_INTERFACE:
                Address = &ConfigurationDescriptor.Keyboard_HID;
    1112:	2c ec       	ldi	r18, 0xCC	; 204
    1114:	31 e0       	ldi	r19, 0x01	; 1
    1116:	12 c0       	rjmp	.+36     	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    1118:	66 23       	and	r22, r22
    111a:	39 f0       	breq	.+14     	; 0x112a <CALLBACK_USB_GetDescriptor+0x94>
    111c:	61 30       	cpi	r22, 0x01	; 1
    111e:	51 f4       	brne	.+20     	; 0x1134 <CALLBACK_USB_GetDescriptor+0x9e>
                break;
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConsoleReport;
                Size    = sizeof(ConsoleReport);
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	90 e0       	ldi	r25, 0x00	; 0
                Size    = sizeof(ExtrakeyReport);
                break;
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConsoleReport;
    1124:	2e e0       	ldi	r18, 0x0E	; 14
    1126:	32 e0       	ldi	r19, 0x02	; 2
                Size    = sizeof(ConsoleReport);
                break;
    1128:	09 c0       	rjmp	.+18     	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
            case KEYBOARD_INTERFACE:
                Address = &KeyboardReport;
                Size    = sizeof(KeyboardReport);
    112a:	8f e3       	ldi	r24, 0x3F	; 63
    112c:	90 e0       	ldi	r25, 0x00	; 0
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
            case KEYBOARD_INTERFACE:
                Address = &KeyboardReport;
    112e:	2e e2       	ldi	r18, 0x2E	; 46
    1130:	32 e0       	ldi	r19, 0x02	; 2
    1132:	04 c0       	rjmp	.+8      	; 0x113c <CALLBACK_USB_GetDescriptor+0xa6>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    113c:	fa 01       	movw	r30, r20
    113e:	31 83       	std	Z+1, r19	; 0x01
    1140:	20 83       	st	Z, r18
    return Size;
}
    1142:	08 95       	ret

00001144 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1144:	84 e1       	ldi	r24, 0x14	; 20
    1146:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1148:	86 e1       	ldi	r24, 0x16	; 22
    114a:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    114c:	09 b4       	in	r0, 0x29	; 41
    114e:	00 fe       	sbrs	r0, 0
    1150:	fd cf       	rjmp	.-6      	; 0x114c <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1152:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1156:	8f 7d       	andi	r24, 0xDF	; 223
    1158:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    115c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1160:	82 60       	ori	r24, 0x02	; 2
    1162:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1166:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    116a:	81 fd       	sbrc	r24, 1
    116c:	fc cf       	rjmp	.-8      	; 0x1166 <USB_Device_SendRemoteWakeup+0x22>
}
    116e:	08 95       	ret

00001170 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	ec 01       	movw	r28, r24
    1182:	8b 01       	movw	r16, r22
    1184:	7a 01       	movw	r14, r20
    1186:	0e 94 19 0a 	call	0x1432	; 0x1432 <Endpoint_WaitUntilReady>
    118a:	81 11       	cpse	r24, r1
    118c:	35 c0       	rjmp	.+106    	; 0x11f8 <Endpoint_Write_Stream_LE+0x88>
    118e:	e1 14       	cp	r14, r1
    1190:	f1 04       	cpc	r15, r1
    1192:	39 f0       	breq	.+14     	; 0x11a2 <Endpoint_Write_Stream_LE+0x32>
    1194:	f7 01       	movw	r30, r14
    1196:	80 81       	ld	r24, Z
    1198:	91 81       	ldd	r25, Z+1	; 0x01
    119a:	08 1b       	sub	r16, r24
    119c:	19 0b       	sbc	r17, r25
    119e:	c8 0f       	add	r28, r24
    11a0:	d9 1f       	adc	r29, r25
    11a2:	c1 2c       	mov	r12, r1
    11a4:	d1 2c       	mov	r13, r1
    11a6:	01 15       	cp	r16, r1
    11a8:	11 05       	cpc	r17, r1
    11aa:	29 f1       	breq	.+74     	; 0x11f6 <Endpoint_Write_Stream_LE+0x86>
    11ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11b0:	85 fd       	sbrc	r24, 5
    11b2:	18 c0       	rjmp	.+48     	; 0x11e4 <Endpoint_Write_Stream_LE+0x74>
    11b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11b8:	8e 77       	andi	r24, 0x7E	; 126
    11ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11be:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <USB_USBTask>
    11c2:	e1 14       	cp	r14, r1
    11c4:	f1 04       	cpc	r15, r1
    11c6:	49 f0       	breq	.+18     	; 0x11da <Endpoint_Write_Stream_LE+0x6a>
    11c8:	f7 01       	movw	r30, r14
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	c8 0e       	add	r12, r24
    11d0:	d9 1e       	adc	r13, r25
    11d2:	d1 82       	std	Z+1, r13	; 0x01
    11d4:	c0 82       	st	Z, r12
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <Endpoint_Write_Stream_LE+0x88>
    11da:	0e 94 19 0a 	call	0x1432	; 0x1432 <Endpoint_WaitUntilReady>
    11de:	88 23       	and	r24, r24
    11e0:	11 f3       	breq	.-60     	; 0x11a6 <Endpoint_Write_Stream_LE+0x36>
    11e2:	0a c0       	rjmp	.+20     	; 0x11f8 <Endpoint_Write_Stream_LE+0x88>
    11e4:	89 91       	ld	r24, Y+
    11e6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11ea:	01 50       	subi	r16, 0x01	; 1
    11ec:	11 09       	sbc	r17, r1
    11ee:	ff ef       	ldi	r31, 0xFF	; 255
    11f0:	cf 1a       	sub	r12, r31
    11f2:	df 0a       	sbc	r13, r31
    11f4:	d8 cf       	rjmp	.-80     	; 0x11a6 <Endpoint_Write_Stream_LE+0x36>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	08 95       	ret

0000120a <Endpoint_Write_Control_Stream_LE>:
    120a:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <USB_ControlRequest+0x6>
    120e:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <USB_ControlRequest+0x7>
    1212:	26 17       	cp	r18, r22
    1214:	37 07       	cpc	r19, r23
    1216:	48 f0       	brcs	.+18     	; 0x122a <Endpoint_Write_Control_Stream_LE+0x20>
    1218:	61 15       	cp	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	39 f4       	brne	.+14     	; 0x122c <Endpoint_Write_Control_Stream_LE+0x22>
    121e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1222:	2e 77       	andi	r18, 0x7E	; 126
    1224:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1228:	01 c0       	rjmp	.+2      	; 0x122c <Endpoint_Write_Control_Stream_LE+0x22>
    122a:	b9 01       	movw	r22, r18
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	61 15       	cp	r22, r1
    1230:	71 05       	cpc	r23, r1
    1232:	99 f1       	breq	.+102    	; 0x129a <Endpoint_Write_Control_Stream_LE+0x90>
    1234:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <USB_DeviceState>
    1238:	22 23       	and	r18, r18
    123a:	09 f4       	brne	.+2      	; 0x123e <Endpoint_Write_Control_Stream_LE+0x34>
    123c:	41 c0       	rjmp	.+130    	; 0x12c0 <Endpoint_Write_Control_Stream_LE+0xb6>
    123e:	25 30       	cpi	r18, 0x05	; 5
    1240:	09 f4       	brne	.+2      	; 0x1244 <Endpoint_Write_Control_Stream_LE+0x3a>
    1242:	40 c0       	rjmp	.+128    	; 0x12c4 <Endpoint_Write_Control_Stream_LE+0xba>
    1244:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1248:	23 fd       	sbrc	r18, 3
    124a:	3e c0       	rjmp	.+124    	; 0x12c8 <Endpoint_Write_Control_Stream_LE+0xbe>
    124c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1250:	22 fd       	sbrc	r18, 2
    1252:	30 c0       	rjmp	.+96     	; 0x12b4 <Endpoint_Write_Control_Stream_LE+0xaa>
    1254:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1258:	20 ff       	sbrs	r18, 0
    125a:	e9 cf       	rjmp	.-46     	; 0x122e <Endpoint_Write_Control_Stream_LE+0x24>
    125c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1260:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1264:	fc 01       	movw	r30, r24
    1266:	cf 01       	movw	r24, r30
    1268:	61 15       	cp	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	59 f0       	breq	.+22     	; 0x1284 <Endpoint_Write_Control_Stream_LE+0x7a>
    126e:	28 30       	cpi	r18, 0x08	; 8
    1270:	31 05       	cpc	r19, r1
    1272:	40 f4       	brcc	.+16     	; 0x1284 <Endpoint_Write_Control_Stream_LE+0x7a>
    1274:	81 91       	ld	r24, Z+
    1276:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    127a:	61 50       	subi	r22, 0x01	; 1
    127c:	71 09       	sbc	r23, r1
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	f1 cf       	rjmp	.-30     	; 0x1266 <Endpoint_Write_Control_Stream_LE+0x5c>
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	28 30       	cpi	r18, 0x08	; 8
    1288:	31 05       	cpc	r19, r1
    128a:	09 f0       	breq	.+2      	; 0x128e <Endpoint_Write_Control_Stream_LE+0x84>
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1292:	2e 77       	andi	r18, 0x7E	; 126
    1294:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1298:	ca cf       	rjmp	.-108    	; 0x122e <Endpoint_Write_Control_Stream_LE+0x24>
    129a:	41 11       	cpse	r20, r1
    129c:	cb cf       	rjmp	.-106    	; 0x1234 <Endpoint_Write_Control_Stream_LE+0x2a>
    129e:	0a c0       	rjmp	.+20     	; 0x12b4 <Endpoint_Write_Control_Stream_LE+0xaa>
    12a0:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    12a4:	88 23       	and	r24, r24
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <Endpoint_Write_Control_Stream_LE+0xb6>
    12a8:	85 30       	cpi	r24, 0x05	; 5
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <Endpoint_Write_Control_Stream_LE+0xba>
    12ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12b0:	83 fd       	sbrc	r24, 3
    12b2:	0a c0       	rjmp	.+20     	; 0x12c8 <Endpoint_Write_Control_Stream_LE+0xbe>
    12b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12b8:	82 ff       	sbrs	r24, 2
    12ba:	f2 cf       	rjmp	.-28     	; 0x12a0 <Endpoint_Write_Control_Stream_LE+0x96>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	08 95       	ret
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	08 95       	ret
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	08 95       	ret

000012cc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    12cc:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <USB_ControlRequest+0x6>
    12d0:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <USB_ControlRequest+0x7>
    12d4:	26 17       	cp	r18, r22
    12d6:	37 07       	cpc	r19, r23
    12d8:	48 f0       	brcs	.+18     	; 0x12ec <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    12da:	61 15       	cp	r22, r1
    12dc:	71 05       	cpc	r23, r1
    12de:	39 f4       	brne	.+14     	; 0x12ee <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e4:	2e 77       	andi	r18, 0x7E	; 126
    12e6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <Endpoint_Write_Control_PStream_LE+0x22>
    12ec:	b9 01       	movw	r22, r18
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    12f2:	61 15       	cp	r22, r1
    12f4:	71 05       	cpc	r23, r1
    12f6:	81 f1       	breq	.+96     	; 0x1358 <Endpoint_Write_Control_PStream_LE+0x8c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12f8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12fc:	88 23       	and	r24, r24
    12fe:	09 f4       	brne	.+2      	; 0x1302 <Endpoint_Write_Control_PStream_LE+0x36>
    1300:	3e c0       	rjmp	.+124    	; 0x137e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1302:	85 30       	cpi	r24, 0x05	; 5
    1304:	09 f4       	brne	.+2      	; 0x1308 <Endpoint_Write_Control_PStream_LE+0x3c>
    1306:	3d c0       	rjmp	.+122    	; 0x1382 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1308:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    130c:	83 fd       	sbrc	r24, 3
    130e:	3b c0       	rjmp	.+118    	; 0x1386 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1310:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1314:	82 fd       	sbrc	r24, 2
    1316:	2d c0       	rjmp	.+90     	; 0x1372 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    131c:	80 ff       	sbrs	r24, 0
    131e:	e9 cf       	rjmp	.-46     	; 0x12f2 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1320:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1324:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	59 f0       	breq	.+22     	; 0x1344 <Endpoint_Write_Control_PStream_LE+0x78>
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	91 05       	cpc	r25, r1
    1332:	40 f4       	brcc	.+16     	; 0x1344 <Endpoint_Write_Control_PStream_LE+0x78>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1334:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1336:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    133a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    133c:	61 50       	subi	r22, 0x01	; 1
    133e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	f2 cf       	rjmp	.-28     	; 0x1328 <Endpoint_Write_Control_PStream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1344:	21 e0       	ldi	r18, 0x01	; 1
    1346:	08 97       	sbiw	r24, 0x08	; 8
    1348:	09 f0       	breq	.+2      	; 0x134c <Endpoint_Write_Control_PStream_LE+0x80>
    134a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    134c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1350:	8e 77       	andi	r24, 0x7E	; 126
    1352:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1356:	cd cf       	rjmp	.-102    	; 0x12f2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1358:	21 11       	cpse	r18, r1
    135a:	ce cf       	rjmp	.-100    	; 0x12f8 <Endpoint_Write_Control_PStream_LE+0x2c>
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    135e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1362:	88 23       	and	r24, r24
    1364:	61 f0       	breq	.+24     	; 0x137e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1366:	85 30       	cpi	r24, 0x05	; 5
    1368:	61 f0       	breq	.+24     	; 0x1382 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    136a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    136e:	83 fd       	sbrc	r24, 3
    1370:	0a c0       	rjmp	.+20     	; 0x1386 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1372:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1376:	82 ff       	sbrs	r24, 2
    1378:	f2 cf       	rjmp	.-28     	; 0x135e <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1386:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1388:	08 95       	ret

0000138a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    138a:	98 2f       	mov	r25, r24
    138c:	97 30       	cpi	r25, 0x07	; 7
    138e:	58 f5       	brcc	.+86     	; 0x13e6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
    1390:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1394:	98 17       	cp	r25, r24
    1396:	39 f0       	breq	.+14     	; 0x13a6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1398:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    139c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13a0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <Endpoint_ConfigureEndpoint_Prv+0x22>
    13a6:	24 2f       	mov	r18, r20
    13a8:	76 2f       	mov	r23, r22
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	21 ff       	sbrs	r18, 1
    13ae:	19 c0       	rjmp	.+50     	; 0x13e2 <Endpoint_ConfigureEndpoint_Prv+0x58>
    13b0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13b4:	3e 7f       	andi	r19, 0xFE	; 254
    13b6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13ba:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13be:	3d 7f       	andi	r19, 0xFD	; 253
    13c0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13c4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13c8:	31 60       	ori	r19, 0x01	; 1
    13ca:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13ce:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    13d2:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13d6:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    13da:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    13de:	27 ff       	sbrs	r18, 7
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <Endpoint_ConfigureEndpoint_Prv+0x66>
    13e2:	9f 5f       	subi	r25, 0xFF	; 255
    13e4:	d3 cf       	rjmp	.-90     	; 0x138c <Endpoint_ConfigureEndpoint_Prv+0x2>
    13e6:	8f 70       	andi	r24, 0x0F	; 15
    13e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	08 95       	ret
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	08 95       	ret

000013f4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    13f4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>
    13f8:	87 ff       	sbrs	r24, 7
    13fa:	11 c0       	rjmp	.+34     	; 0x141e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1400:	82 fd       	sbrc	r24, 2
    1402:	05 c0       	rjmp	.+10     	; 0x140e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1404:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    1408:	81 11       	cpse	r24, r1
    140a:	f8 cf       	rjmp	.-16     	; 0x13fc <Endpoint_ClearStatusStage+0x8>
    140c:	11 c0       	rjmp	.+34     	; 0x1430 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    140e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1412:	8b 77       	andi	r24, 0x7B	; 123
    1414:	0b c0       	rjmp	.+22     	; 0x142c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1416:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    141a:	88 23       	and	r24, r24
    141c:	49 f0       	breq	.+18     	; 0x1430 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    141e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1422:	80 ff       	sbrs	r24, 0
    1424:	f8 cf       	rjmp	.-16     	; 0x1416 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    142a:	8e 77       	andi	r24, 0x7E	; 126
    142c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1430:	08 95       	ret

00001432 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1432:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1436:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    143a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    143c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1440:	84 2f       	mov	r24, r20
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	40 ff       	sbrs	r20, 0
    1446:	22 c0       	rjmp	.+68     	; 0x148c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1448:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    144c:	80 fd       	sbrc	r24, 0
    144e:	1c c0       	rjmp	.+56     	; 0x1488 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1450:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1454:	88 23       	and	r24, r24
    1456:	91 f0       	breq	.+36     	; 0x147c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1458:	85 30       	cpi	r24, 0x05	; 5
    145a:	91 f0       	breq	.+36     	; 0x1480 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    145c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1460:	85 fd       	sbrc	r24, 5
    1462:	10 c0       	rjmp	.+32     	; 0x1484 <Endpoint_WaitUntilReady+0x52>
    1464:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1468:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    146c:	42 17       	cp	r20, r18
    146e:	53 07       	cpc	r21, r19
    1470:	29 f3       	breq	.-54     	; 0x143c <Endpoint_WaitUntilReady+0xa>
    1472:	9a 01       	movw	r18, r20
    1474:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1476:	11 f7       	brne	.-60     	; 0x143c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    148c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1490:	42 ff       	sbrs	r20, 2
    1492:	de cf       	rjmp	.-68     	; 0x1450 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1494:	08 95       	ret

00001496 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1496:	0e 94 bc 0a 	call	0x1578	; 0x1578 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    149a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    149e:	e0 ee       	ldi	r30, 0xE0	; 224
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	81 60       	ori	r24, 0x01	; 1
    14a6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    14a8:	e8 ed       	ldi	r30, 0xD8	; 216
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 77       	andi	r24, 0x7F	; 127
    14b0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14b2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    14b4:	a7 ed       	ldi	r26, 0xD7	; 215
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	8c 91       	ld	r24, X
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14be:	80 81       	ld	r24, Z
    14c0:	8f 7e       	andi	r24, 0xEF	; 239
    14c2:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    14c4:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <USB_IsInitialized>
    14c8:	08 95       	ret

000014ca <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    14d2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14d6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    14da:	c8 ed       	ldi	r28, 0xD8	; 216
    14dc:	d0 e0       	ldi	r29, 0x00	; 0
    14de:	88 81       	ld	r24, Y
    14e0:	8f 77       	andi	r24, 0x7F	; 127
    14e2:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    14e4:	88 81       	ld	r24, Y
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14ea:	88 81       	ld	r24, Y
    14ec:	8f 7d       	andi	r24, 0xDF	; 223
    14ee:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    14f0:	e7 ed       	ldi	r30, 0xD7	; 215
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 68       	ori	r24, 0x80	; 128
    14f8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14fa:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    14fc:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1500:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1504:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1508:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    150c:	00 ee       	ldi	r16, 0xE0	; 224
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	f8 01       	movw	r30, r16
    1512:	80 81       	ld	r24, Z
    1514:	8b 7f       	andi	r24, 0xFB	; 251
    1516:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1518:	88 81       	ld	r24, Y
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    151e:	42 e0       	ldi	r20, 0x02	; 2
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 c5 09 	call	0x138a	; 0x138a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1528:	e1 ee       	ldi	r30, 0xE1	; 225
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8e 7f       	andi	r24, 0xFE	; 254
    1530:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1532:	e2 ee       	ldi	r30, 0xE2	; 226
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	81 60       	ori	r24, 0x01	; 1
    153a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    153c:	80 81       	ld	r24, Z
    153e:	88 60       	ori	r24, 0x08	; 8
    1540:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1542:	f8 01       	movw	r30, r16
    1544:	80 81       	ld	r24, Z
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    154a:	88 81       	ld	r24, Y
    154c:	80 61       	ori	r24, 0x10	; 16
    154e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    155a:	e8 ed       	ldi	r30, 0xD8	; 216
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 7e       	andi	r24, 0xEF	; 239
    1562:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1564:	e7 ed       	ldi	r30, 0xD7	; 215
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	81 60       	ori	r24, 0x01	; 1
    156c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <USB_IsInitialized>

	USB_ResetInterface();
    1574:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <USB_ResetInterface>

00001578 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1578:	e8 ed       	ldi	r30, 0xD8	; 216
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8c 7f       	andi	r24, 0xFC	; 252
    1580:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1582:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1586:	08 95       	ret

00001588 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1588:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    158c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1590:	08 95       	ret

00001592 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	0b b6       	in	r0, 0x3b	; 59
    159e:	0f 92       	push	r0
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    15b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    15bc:	82 ff       	sbrs	r24, 2
    15be:	0b c0       	rjmp	.+22     	; 0x15d6 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    15c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15c4:	82 ff       	sbrs	r24, 2
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    15c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15cc:	8b 7f       	andi	r24, 0xFB	; 251
    15ce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    15d2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    15d6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    15da:	80 ff       	sbrs	r24, 0
    15dc:	1f c0       	rjmp	.+62     	; 0x161c <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    15de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    15e2:	80 ff       	sbrs	r24, 0
    15e4:	1b c0       	rjmp	.+54     	; 0x161c <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    15e6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    15f0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    15f4:	80 ff       	sbrs	r24, 0
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    15f8:	84 e1       	ldi	r24, 0x14	; 20
    15fa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    15fc:	86 e1       	ldi	r24, 0x16	; 22
    15fe:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1600:	09 b4       	in	r0, 0x29	; 41
    1602:	00 fe       	sbrs	r0, 0
    1604:	fd cf       	rjmp	.-6      	; 0x1600 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <USB_DeviceState>
			EVENT_USB_Device_Connect();
    160c:	0e 94 d3 06 	call	0xda6	; 0xda6 <EVENT_USB_Device_Connect>
    1610:	05 c0       	rjmp	.+10     	; 0x161c <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1612:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1614:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1618:	0e 94 e5 06 	call	0xdca	; 0xdca <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    161c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1620:	80 ff       	sbrs	r24, 0
    1622:	19 c0       	rjmp	.+50     	; 0x1656 <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1624:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1628:	80 ff       	sbrs	r24, 0
    162a:	15 c0       	rjmp	.+42     	; 0x1656 <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    162c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1630:	8e 7f       	andi	r24, 0xFE	; 254
    1632:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1636:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    163a:	80 61       	ori	r24, 0x10	; 16
    163c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1640:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1644:	80 62       	ori	r24, 0x20	; 32
    1646:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    164a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    164c:	85 e0       	ldi	r24, 0x05	; 5
    164e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1652:	0e 94 f0 06 	call	0xde0	; 0xde0 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1656:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    165a:	84 ff       	sbrs	r24, 4
    165c:	30 c0       	rjmp	.+96     	; 0x16be <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    165e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1662:	84 ff       	sbrs	r24, 4
    1664:	2c c0       	rjmp	.+88     	; 0x16be <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1666:	84 e1       	ldi	r24, 0x14	; 20
    1668:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    166a:	86 e1       	ldi	r24, 0x16	; 22
    166c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    166e:	09 b4       	in	r0, 0x29	; 41
    1670:	00 fe       	sbrs	r0, 0
    1672:	fd cf       	rjmp	.-6      	; 0x166e <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1674:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1678:	8f 7d       	andi	r24, 0xDF	; 223
    167a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    167e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1682:	8f 7e       	andi	r24, 0xEF	; 239
    1684:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1688:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    168c:	8f 7e       	andi	r24, 0xEF	; 239
    168e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1692:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1696:	81 60       	ori	r24, 0x01	; 1
    1698:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    169c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <USB_Device_ConfigurationNumber>
    16a0:	88 23       	and	r24, r24
    16a2:	11 f0       	breq	.+4      	; 0x16a8 <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    16a4:	84 e0       	ldi	r24, 0x04	; 4
    16a6:	07 c0       	rjmp	.+14     	; 0x16b6 <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16a8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    16ac:	87 fd       	sbrc	r24, 7
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <__vector_10+0x122>
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <__vector_10+0x124>
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    16ba:	0e 94 f4 06 	call	0xde8	; 0xde8 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    16be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    16c2:	83 ff       	sbrs	r24, 3
    16c4:	24 c0       	rjmp	.+72     	; 0x170e <__vector_10+0x17c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    16c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    16ca:	83 ff       	sbrs	r24, 3
    16cc:	20 c0       	rjmp	.+64     	; 0x170e <__vector_10+0x17c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    16ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    16de:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    16e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    16e6:	8e 7f       	andi	r24, 0xFE	; 254
    16e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    16ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    16f0:	8e 7f       	andi	r24, 0xFE	; 254
    16f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    16f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    16fa:	80 61       	ori	r24, 0x10	; 16
    16fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1700:	42 e0       	ldi	r20, 0x02	; 2
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	0e 94 c5 09 	call	0x138a	; 0x138a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    170a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    170e:	ff 91       	pop	r31
    1710:	ef 91       	pop	r30
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	0f 90       	pop	r0
    1728:	0b be       	out	0x3b, r0	; 59
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	0f 90       	pop	r0
    1730:	1f 90       	pop	r1
    1732:	18 95       	reti

00001734 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	aa 97       	sbiw	r28, 0x2a	; 42
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	ed ec       	ldi	r30, 0xCD	; 205
    174c:	f2 e0       	ldi	r31, 0x02	; 2
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1752:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1756:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1758:	8e 13       	cpse	r24, r30
    175a:	fb cf       	rjmp	.-10     	; 0x1752 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    175c:	0e 94 45 07 	call	0xe8a	; 0xe8a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1760:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1764:	83 ff       	sbrs	r24, 3
    1766:	1f c1       	rjmp	.+574    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1768:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    176c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <USB_ControlRequest+0x1>
    1770:	49 2f       	mov	r20, r25
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	4a 30       	cpi	r20, 0x0A	; 10
    1776:	51 05       	cpc	r21, r1
    1778:	08 f0       	brcs	.+2      	; 0x177c <USB_Device_ProcessControlRequest+0x48>
    177a:	15 c1       	rjmp	.+554    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
    177c:	fa 01       	movw	r30, r20
    177e:	e4 5b       	subi	r30, 0xB4	; 180
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1786:	80 38       	cpi	r24, 0x80	; 128
    1788:	81 f0       	breq	.+32     	; 0x17aa <USB_Device_ProcessControlRequest+0x76>
    178a:	82 38       	cpi	r24, 0x82	; 130
    178c:	09 f0       	breq	.+2      	; 0x1790 <USB_Device_ProcessControlRequest+0x5c>
    178e:	0b c1       	rjmp	.+534    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1790:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    179a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    179e:	85 fb       	bst	r24, 5
    17a0:	88 27       	eor	r24, r24
    17a2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17a4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    17aa:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    17ae:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <USB_Device_RemoteWakeupEnabled>
    17b2:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    17b4:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17b6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ba:	97 7f       	andi	r25, 0xF7	; 247
    17bc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    17c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    17c4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17c8:	c8 c0       	rjmp	.+400    	; 0x195a <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    17ca:	28 2f       	mov	r18, r24
    17cc:	2d 7f       	andi	r18, 0xFD	; 253
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <USB_Device_ProcessControlRequest+0x9e>
    17d0:	ea c0       	rjmp	.+468    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    17d2:	88 23       	and	r24, r24
    17d4:	19 f0       	breq	.+6      	; 0x17dc <USB_Device_ProcessControlRequest+0xa8>
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <USB_Device_ProcessControlRequest+0xbe>
    17da:	e5 c0       	rjmp	.+458    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    17dc:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <USB_ControlRequest+0x2>
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <USB_Device_ProcessControlRequest+0xb2>
    17e4:	e0 c0       	rjmp	.+448    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    17e6:	93 30       	cpi	r25, 0x03	; 3
    17e8:	09 f0       	breq	.+2      	; 0x17ec <USB_Device_ProcessControlRequest+0xb8>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <USB_Device_RemoteWakeupEnabled>
    17f0:	2b c0       	rjmp	.+86     	; 0x1848 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    17f2:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <USB_ControlRequest+0x2>
    17f6:	81 11       	cpse	r24, r1
    17f8:	27 c0       	rjmp	.+78     	; 0x1848 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    17fa:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
    17fe:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1800:	09 f4       	brne	.+2      	; 0x1804 <USB_Device_ProcessControlRequest+0xd0>
    1802:	d1 c0       	rjmp	.+418    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1804:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1808:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    180c:	20 ff       	sbrs	r18, 0
    180e:	1c c0       	rjmp	.+56     	; 0x1848 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1810:	93 30       	cpi	r25, 0x03	; 3
    1812:	21 f4       	brne	.+8      	; 0x181c <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1814:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1818:	80 62       	ori	r24, 0x20	; 32
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    181c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1820:	90 61       	ori	r25, 0x10	; 16
    1822:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	a9 01       	movw	r20, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <USB_Device_ProcessControlRequest+0xfe>
    182e:	44 0f       	add	r20, r20
    1830:	55 1f       	adc	r21, r21
    1832:	8a 95       	dec	r24
    1834:	e2 f7       	brpl	.-8      	; 0x182e <USB_Device_ProcessControlRequest+0xfa>
    1836:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    183a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    183e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1842:	88 60       	ori	r24, 0x08	; 8
    1844:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1848:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    184c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1850:	87 7f       	andi	r24, 0xF7	; 247
    1852:	86 c0       	rjmp	.+268    	; 0x1960 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1854:	81 11       	cpse	r24, r1
    1856:	a7 c0       	rjmp	.+334    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1858:	10 91 cf 02 	lds	r17, 0x02CF	; 0x8002cf <USB_ControlRequest+0x2>
    185c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    185e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1862:	80 78       	andi	r24, 0x80	; 128
    1864:	81 2b       	or	r24, r17
    1866:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    186a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    186e:	87 7f       	andi	r24, 0xF7	; 247
    1870:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1874:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    187c:	80 ff       	sbrs	r24, 0
    187e:	fc cf       	rjmp	.-8      	; 0x1878 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1880:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1884:	80 68       	ori	r24, 0x80	; 128
    1886:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    188a:	11 11       	cpse	r17, r1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <USB_Device_ProcessControlRequest+0x15e>
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <USB_Device_ProcessControlRequest+0x160>
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <USB_DeviceState>
    1898:	86 c0       	rjmp	.+268    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    189a:	80 58       	subi	r24, 0x80	; 128
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	08 f0       	brcs	.+2      	; 0x18a2 <USB_Device_ProcessControlRequest+0x16e>
    18a0:	82 c0       	rjmp	.+260    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    18a2:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <USB_ControlRequest+0x2>
    18a6:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <USB_ControlRequest+0x3>
    18aa:	8c 3d       	cpi	r24, 0xDC	; 220
    18ac:	53 e0       	ldi	r21, 0x03	; 3
    18ae:	95 07       	cpc	r25, r21
    18b0:	79 f5       	brne	.+94     	; 0x1910 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    18b6:	8a e2       	ldi	r24, 0x2A	; 42
    18b8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    18ba:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    18bc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    18be:	de 01       	movw	r26, r28
    18c0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    18c2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    18c4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    18c6:	51 e2       	ldi	r21, 0x21	; 33
    18c8:	e3 2f       	mov	r30, r19
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    18d0:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    18d2:	20 ff       	sbrs	r18, 0
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    18d6:	e2 95       	swap	r30
    18d8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    18da:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    18dc:	ef 70       	andi	r30, 0x0F	; 15
    18de:	8e 2f       	mov	r24, r30
    18e0:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    18e2:	ea 30       	cpi	r30, 0x0A	; 10
    18e4:	10 f0       	brcs	.+4      	; 0x18ea <USB_Device_ProcessControlRequest+0x1b6>
    18e6:	c7 96       	adiw	r24, 0x37	; 55
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <USB_Device_ProcessControlRequest+0x1b8>
    18ea:	c0 96       	adiw	r24, 0x30	; 48
    18ec:	8d 93       	st	X+, r24
    18ee:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    18f0:	2f 5f       	subi	r18, 0xFF	; 255
    18f2:	24 31       	cpi	r18, 0x14	; 20
    18f4:	49 f7       	brne	.-46     	; 0x18c8 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    18f6:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18fc:	87 7f       	andi	r24, 0xF7	; 247
    18fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1902:	6a e2       	ldi	r22, 0x2A	; 42
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	0e 94 05 09 	call	0x120a	; 0x120a <Endpoint_Write_Control_Stream_LE>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1910:	ae 01       	movw	r20, r28
    1912:	4f 5f       	subi	r20, 0xFF	; 255
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
    1916:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <USB_ControlRequest+0x4>
    191a:	0e 94 4b 08 	call	0x1096	; 0x1096 <CALLBACK_USB_GetDescriptor>
    191e:	bc 01       	movw	r22, r24
    1920:	89 2b       	or	r24, r25
    1922:	09 f4       	brne	.+2      	; 0x1926 <USB_Device_ProcessControlRequest+0x1f2>
    1924:	40 c0       	rjmp	.+128    	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
    1926:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    192a:	97 7f       	andi	r25, 0xF7	; 247
    192c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	0e 94 66 09 	call	0x12cc	; 0x12cc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1938:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    193c:	8b 77       	andi	r24, 0x7B	; 123
    193e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1942:	31 c0       	rjmp	.+98     	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1944:	80 38       	cpi	r24, 0x80	; 128
    1946:	79 f5       	brne	.+94     	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1948:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    194c:	87 7f       	andi	r24, 0xF7	; 247
    194e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1952:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1956:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    195a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    195e:	8e 77       	andi	r24, 0x7E	; 126
    1960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1964:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Endpoint_ClearStatusStage>
    1968:	1e c0       	rjmp	.+60     	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    196a:	81 11       	cpse	r24, r1
    196c:	1c c0       	rjmp	.+56     	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    196e:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <USB_ControlRequest+0x2>
    1972:	92 30       	cpi	r25, 0x02	; 2
    1974:	c0 f4       	brcc	.+48     	; 0x19a6 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1976:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    197a:	87 7f       	andi	r24, 0xF7	; 247
    197c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1980:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1984:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1988:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <USB_Device_ConfigurationNumber>
    198c:	81 11       	cpse	r24, r1
    198e:	06 c0       	rjmp	.+12     	; 0x199c <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1990:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1994:	87 fd       	sbrc	r24, 7
    1996:	02 c0       	rjmp	.+4      	; 0x199c <USB_Device_ProcessControlRequest+0x268>
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	01 c0       	rjmp	.+2      	; 0x199e <USB_Device_ProcessControlRequest+0x26a>
    199c:	84 e0       	ldi	r24, 0x04	; 4
    199e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    19a2:	0e 94 3b 07 	call	0xe76	; 0xe76 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    19aa:	83 ff       	sbrs	r24, 3
    19ac:	0a c0       	rjmp	.+20     	; 0x19c2 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19b2:	87 7f       	andi	r24, 0xF7	; 247
    19b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    19b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    19bc:	80 62       	ori	r24, 0x20	; 32
    19be:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    19c2:	aa 96       	adiw	r28, 0x2a	; 42
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	08 95       	ret

000019d6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    19d6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    19d8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    19dc:	88 23       	and	r24, r24
    19de:	a1 f0       	breq	.+40     	; 0x1a08 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    19e0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    19e4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    19e6:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    19ea:	89 2f       	mov	r24, r25
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 fd       	sbrc	r25, 0
    19f0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    19f2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19f4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    19fc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    19fe:	0e 94 9a 0b 	call	0x1734	; 0x1734 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a02:	cf 70       	andi	r28, 0x0F	; 15
    1a04:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <host_set_driver>:
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    (*driver->send_mouse)(report);
    1a0c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <driver+0x1>
    1a10:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <driver>
    1a14:	08 95       	ret

00001a16 <host_keyboard_leds>:
    1a16:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <driver>
    1a1a:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <driver+0x1>
    1a1e:	30 97       	sbiw	r30, 0x00	; 0
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <host_keyboard_leds+0x14>
    1a22:	01 90       	ld	r0, Z+
    1a24:	f0 81       	ld	r31, Z
    1a26:	e0 2d       	mov	r30, r0
    1a28:	09 94       	ijmp
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	08 95       	ret

00001a2e <host_keyboard_send>:
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <driver>
    1a3e:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <driver+0x1>
    1a42:	30 97       	sbiw	r30, 0x00	; 0
    1a44:	b1 f1       	breq	.+108    	; 0x1ab2 <host_keyboard_send+0x84>
    1a46:	8c 01       	movw	r16, r24
    1a48:	02 80       	ldd	r0, Z+2	; 0x02
    1a4a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a4c:	e0 2d       	mov	r30, r0
    1a4e:	09 95       	icall
    1a50:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    1a54:	82 ff       	sbrs	r24, 2
    1a56:	2d c0       	rjmp	.+90     	; 0x1ab2 <host_keyboard_send+0x84>
    1a58:	80 ff       	sbrs	r24, 0
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <host_keyboard_send+0x36>
    1a5c:	85 e7       	ldi	r24, 0x75	; 117
    1a5e:	92 e0       	ldi	r25, 0x02	; 2
    1a60:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    1a64:	e8 01       	movw	r28, r16
    1a66:	18 e0       	ldi	r17, 0x08	; 8
    1a68:	8f e6       	ldi	r24, 0x6F	; 111
    1a6a:	e8 2e       	mov	r14, r24
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	f8 2e       	mov	r15, r24
    1a70:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    1a74:	80 ff       	sbrs	r24, 0
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <host_keyboard_send+0x60>
    1a78:	88 81       	ld	r24, Y
    1a7a:	1f 92       	push	r1
    1a7c:	8f 93       	push	r24
    1a7e:	ff 92       	push	r15
    1a80:	ef 92       	push	r14
    1a82:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	11 50       	subi	r17, 0x01	; 1
    1a90:	21 96       	adiw	r28, 0x01	; 1
    1a92:	11 11       	cpse	r17, r1
    1a94:	ed cf       	rjmp	.-38     	; 0x1a70 <host_keyboard_send+0x42>
    1a96:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    1a9a:	80 ff       	sbrs	r24, 0
    1a9c:	0a c0       	rjmp	.+20     	; 0x1ab2 <host_keyboard_send+0x84>
    1a9e:	8d e6       	ldi	r24, 0x6D	; 109
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <xputs>
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	08 95       	ret

00001ac0 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1ac0:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <last_system_report>
    1ac4:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <last_system_report+0x1>
    1ac8:	82 17       	cp	r24, r18
    1aca:	93 07       	cpc	r25, r19
    1acc:	71 f0       	breq	.+28     	; 0x1aea <host_system_send+0x2a>
    last_system_report = report;
    1ace:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <last_system_report+0x1>
    1ad2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <last_system_report>

    if (!driver) return;
    1ad6:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <driver>
    1ada:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <driver+0x1>
    1ade:	30 97       	sbiw	r30, 0x00	; 0
    1ae0:	21 f0       	breq	.+8      	; 0x1aea <host_system_send+0x2a>
    (*driver->send_system)(report);
    1ae2:	06 80       	ldd	r0, Z+6	; 0x06
    1ae4:	f7 81       	ldd	r31, Z+7	; 0x07
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	09 94       	ijmp
    1aea:	08 95       	ret

00001aec <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1aec:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <last_consumer_report>
    1af0:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <last_consumer_report+0x1>
    1af4:	82 17       	cp	r24, r18
    1af6:	93 07       	cpc	r25, r19
    1af8:	71 f0       	breq	.+28     	; 0x1b16 <host_consumer_send+0x2a>
    last_consumer_report = report;
    1afa:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <last_consumer_report+0x1>
    1afe:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <last_consumer_report>

    if (!driver) return;
    1b02:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <driver>
    1b06:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <driver+0x1>
    1b0a:	30 97       	sbiw	r30, 0x00	; 0
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1b0e:	00 84       	ldd	r0, Z+8	; 0x08
    1b10:	f1 85       	ldd	r31, Z+9	; 0x09
    1b12:	e0 2d       	mov	r30, r0
    1b14:	09 94       	ijmp
    1b16:	08 95       	ret

00001b18 <keyboard_setup>:


__attribute__ ((weak)) void matrix_setup(void) {}
void keyboard_setup(void)
{
    matrix_setup();
    1b18:	0c 94 90 03 	jmp	0x720	; 0x720 <matrix_setup>

00001b1c <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1b1c:	0e 94 22 19 	call	0x3244	; 0x3244 <timer_init>
    matrix_init();
    1b20:	0c 94 91 03 	jmp	0x722	; 0x722 <matrix_init>

00001b24 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    1b24:	cf 93       	push	r28
    1b26:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    1b28:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    1b2c:	82 ff       	sbrs	r24, 2
    1b2e:	1e c0       	rjmp	.+60     	; 0x1b6c <keyboard_set_leds+0x48>
    1b30:	80 ff       	sbrs	r24, 0
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <keyboard_set_leds+0x18>
    1b34:	8e e8       	ldi	r24, 0x8E	; 142
    1b36:	92 e0       	ldi	r25, 0x02	; 2
    1b38:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    1b3c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    1b40:	80 ff       	sbrs	r24, 0
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <keyboard_set_leds+0x38>
    1b44:	1f 92       	push	r1
    1b46:	cf 93       	push	r28
    1b48:	89 e8       	ldi	r24, 0x89	; 137
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	9f 93       	push	r25
    1b4e:	8f 93       	push	r24
    1b50:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    1b60:	80 ff       	sbrs	r24, 0
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <keyboard_set_leds+0x48>
    1b64:	87 e8       	ldi	r24, 0x87	; 135
    1b66:	92 e0       	ldi	r25, 0x02	; 2
    1b68:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    led_set(leds);
    1b6c:	8c 2f       	mov	r24, r28
}
    1b6e:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    1b70:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <led_set>

00001b74 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	2b 97       	sbiw	r28, 0x0b	; 11
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1b94:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <matrix_scan>
    1b98:	84 e2       	ldi	r24, 0x24	; 36
    1b9a:	c8 2e       	mov	r12, r24
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	d8 2e       	mov	r13, r24
    1ba0:	00 e0       	ldi	r16, 0x00	; 0
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
    1ba4:	e0 2e       	mov	r14, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1ba6:	80 2f       	mov	r24, r16
    1ba8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    1bac:	f6 01       	movw	r30, r12
    1bae:	41 91       	ld	r20, Z+
    1bb0:	6f 01       	movw	r12, r30
    1bb2:	f4 2e       	mov	r15, r20
    1bb4:	f8 26       	eor	r15, r24
        if (matrix_change) {
    1bb6:	b1 f4       	brne	.+44     	; 0x1be4 <keyboard_task+0x70>
    1bb8:	0f 5f       	subi	r16, 0xFF	; 255
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1bbc:	02 31       	cpi	r16, 0x12	; 18
    1bbe:	11 05       	cpc	r17, r1
    1bc0:	89 f7       	brne	.-30     	; 0x1ba4 <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	1b 82       	std	Y+3, r1	; 0x03
    1bca:	0e 94 2b 19 	call	0x3256	; 0x3256 <timer_read>
    1bce:	81 60       	ori	r24, 0x01	; 1
    1bd0:	78 2f       	mov	r23, r24
    1bd2:	9d 83       	std	Y+5, r25	; 0x05
    1bd4:	8c 83       	std	Y+4, r24	; 0x04
    1bd6:	49 81       	ldd	r20, Y+1	; 0x01
    1bd8:	5a 81       	ldd	r21, Y+2	; 0x02
    1bda:	6b 81       	ldd	r22, Y+3	; 0x03
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <action_exec>
    1be2:	40 c0       	rjmp	.+128    	; 0x1c64 <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1be4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <debug_config>
    1be8:	91 ff       	sbrs	r25, 1
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <keyboard_task+0x80>
    1bec:	8b 87       	std	Y+11, r24	; 0x0b
    1bee:	0e 94 76 04 	call	0x8ec	; 0x8ec <matrix_print>
    1bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1bf8:	4f 2d       	mov	r20, r15
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	92 2f       	mov	r25, r18
    1bfe:	ba 01       	movw	r22, r20
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <keyboard_task+0x94>
    1c04:	75 95       	asr	r23
    1c06:	67 95       	ror	r22
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <keyboard_task+0x90>
    1c0c:	60 ff       	sbrs	r22, 0
    1c0e:	24 c0       	rjmp	.+72     	; 0x1c58 <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    1c10:	2e 83       	std	Y+6, r18	; 0x06
    1c12:	ef 82       	std	Y+7, r14	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1c14:	21 e0       	ldi	r18, 0x01	; 1
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	69 01       	movw	r12, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <keyboard_task+0xac>
    1c1c:	cc 0c       	add	r12, r12
    1c1e:	dd 1c       	adc	r13, r13
    1c20:	9a 95       	dec	r25
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <keyboard_task+0xa8>
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	8c 21       	and	r24, r12
    1c28:	9d 21       	and	r25, r13
    1c2a:	89 2b       	or	r24, r25
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <keyboard_task+0xbc>
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1c30:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1c32:	0e 94 2b 19 	call	0x3256	; 0x3256 <timer_read>
    1c36:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1c38:	78 2f       	mov	r23, r24
    1c3a:	9a 87       	std	Y+10, r25	; 0x0a
    1c3c:	89 87       	std	Y+9, r24	; 0x09
    1c3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c40:	5f 81       	ldd	r21, Y+7	; 0x07
    1c42:	68 85       	ldd	r22, Y+8	; 0x08
    1c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c46:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	ec 5d       	subi	r30, 0xDC	; 220
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	80 81       	ld	r24, Z
    1c52:	c8 26       	eor	r12, r24
    1c54:	c0 82       	st	Z, r12
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1c56:	06 c0       	rjmp	.+12     	; 0x1c64 <keyboard_task+0xf0>
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1c5c:	26 30       	cpi	r18, 0x06	; 6
    1c5e:	31 05       	cpc	r19, r1
    1c60:	69 f6       	brne	.-102    	; 0x1bfc <keyboard_task+0x88>
    1c62:	aa cf       	rjmp	.-172    	; 0x1bb8 <keyboard_task+0x44>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1c64:	10 91 23 01 	lds	r17, 0x0123	; 0x800123 <led_status.2298>
    1c68:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <host_keyboard_leds>
    1c6c:	18 17       	cp	r17, r24
    1c6e:	a1 f0       	breq	.+40     	; 0x1c98 <keyboard_task+0x124>
        led_status = host_keyboard_leds();
    1c70:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <host_keyboard_leds>
    1c74:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_status.2298>
        keyboard_set_leds(led_status);
    }
}
    1c78:	2b 96       	adiw	r28, 0x0b	; 11
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    1c94:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <keyboard_set_leds>
    }
}
    1c98:	2b 96       	adiw	r28, 0x0b	; 11
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	08 95       	ret

00001cb6 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	2b 97       	sbiw	r28, 0x0b	; 11
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	4f 83       	std	Y+7, r20	; 0x07
    1ccc:	58 87       	std	Y+8, r21	; 0x08
    1cce:	69 87       	std	Y+9, r22	; 0x09
    1cd0:	7a 87       	std	Y+10, r23	; 0x0a
    1cd2:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    1cd4:	de 01       	movw	r26, r28
    1cd6:	11 96       	adiw	r26, 0x01	; 1
    1cd8:	86 e0       	ldi	r24, 0x06	; 6
    1cda:	fd 01       	movw	r30, r26
    1cdc:	11 92       	st	Z+, r1
    1cde:	8a 95       	dec	r24
    1ce0:	e9 f7       	brne	.-6      	; 0x1cdc <action_exec+0x26>
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	37 96       	adiw	r30, 0x07	; 7
    1ce8:	01 90       	ld	r0, Z+
    1cea:	0d 92       	st	X+, r0
    1cec:	8a 95       	dec	r24
    1cee:	e1 f7       	brne	.-8      	; 0x1ce8 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    1cf0:	49 81       	ldd	r20, Y+1	; 0x01
    1cf2:	5a 81       	ldd	r21, Y+2	; 0x02
    1cf4:	6b 81       	ldd	r22, Y+3	; 0x03
    1cf6:	7c 81       	ldd	r23, Y+4	; 0x04
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	0e 94 ac 14 	call	0x2958	; 0x2958 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    1d00:	2b 96       	adiw	r28, 0x0b	; 11
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    1d12:	cf 93       	push	r28
    if (code == KC_NO) {
    1d14:	88 23       	and	r24, r24
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <register_code+0x8>
    1d18:	99 c0       	rjmp	.+306    	; 0x1e4c <register_code+0x13a>
    1d1a:	c8 2f       	mov	r28, r24
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1d1c:	8c ef       	ldi	r24, 0xFC	; 252
    1d1e:	8c 0f       	add	r24, r28
    1d20:	81 3a       	cpi	r24, 0xA1	; 161
    1d22:	48 f4       	brcc	.+18     	; 0x1d36 <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    1d24:	8c 2f       	mov	r24, r28
    1d26:	0e 94 c5 1a 	call	0x358a	; 0x358a <command_proc>
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	8f c0       	rjmp	.+286    	; 0x1e4c <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    1d2e:	8c 2f       	mov	r24, r28
    1d30:	0e 94 48 17 	call	0x2e90	; 0x2e90 <add_key>
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	8c 0f       	add	r24, r28
    1d3a:	88 30       	cpi	r24, 0x08	; 8
    1d3c:	58 f4       	brcc	.+22     	; 0x1d54 <register_code+0x42>
        add_mods(MOD_BIT(code));
    1d3e:	c7 70       	andi	r28, 0x07	; 7
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <register_code+0x34>
    1d44:	88 0f       	add	r24, r24
    1d46:	ca 95       	dec	r28
    1d48:	ea f7       	brpl	.-6      	; 0x1d44 <register_code+0x32>
    1d4a:	0e 94 84 17 	call	0x2f08	; 0x2f08 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    1d4e:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    1d50:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1d54:	8b e5       	ldi	r24, 0x5B	; 91
    1d56:	8c 0f       	add	r24, r28
    1d58:	83 30       	cpi	r24, 0x03	; 3
    1d5a:	78 f4       	brcc	.+30     	; 0x1d7a <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    1d5c:	c5 3a       	cpi	r28, 0xA5	; 165
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <register_code+0x58>
    1d60:	c6 3a       	cpi	r28, 0xA6	; 166
    1d62:	31 f0       	breq	.+12     	; 0x1d70 <register_code+0x5e>
    1d64:	83 e8       	ldi	r24, 0x83	; 131
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <register_code+0x62>
    1d6a:	81 e8       	ldi	r24, 0x81	; 129
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <register_code+0x62>
    1d70:	82 e8       	ldi	r24, 0x82	; 130
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    1d74:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    1d76:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1d7a:	88 e5       	ldi	r24, 0x58	; 88
    1d7c:	8c 0f       	add	r24, r28
    1d7e:	83 31       	cpi	r24, 0x13	; 19
    1d80:	08 f0       	brcs	.+2      	; 0x1d84 <register_code+0x72>
    1d82:	64 c0       	rjmp	.+200    	; 0x1e4c <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    1d84:	c8 3a       	cpi	r28, 0xA8	; 168
    1d86:	39 f1       	breq	.+78     	; 0x1dd6 <register_code+0xc4>
    1d88:	c9 3a       	cpi	r28, 0xA9	; 169
    1d8a:	41 f1       	breq	.+80     	; 0x1ddc <register_code+0xca>
    1d8c:	ca 3a       	cpi	r28, 0xAA	; 170
    1d8e:	49 f1       	breq	.+82     	; 0x1de2 <register_code+0xd0>
    1d90:	cb 3a       	cpi	r28, 0xAB	; 171
    1d92:	51 f1       	breq	.+84     	; 0x1de8 <register_code+0xd6>
    1d94:	cc 3a       	cpi	r28, 0xAC	; 172
    1d96:	59 f1       	breq	.+86     	; 0x1dee <register_code+0xdc>
    1d98:	cd 3a       	cpi	r28, 0xAD	; 173
    1d9a:	61 f1       	breq	.+88     	; 0x1df4 <register_code+0xe2>
    1d9c:	c0 3b       	cpi	r28, 0xB0	; 176
    1d9e:	69 f1       	breq	.+90     	; 0x1dfa <register_code+0xe8>
    1da0:	ce 3a       	cpi	r28, 0xAE	; 174
    1da2:	71 f1       	breq	.+92     	; 0x1e00 <register_code+0xee>
    1da4:	cf 3a       	cpi	r28, 0xAF	; 175
    1da6:	79 f1       	breq	.+94     	; 0x1e06 <register_code+0xf4>
    1da8:	c1 3b       	cpi	r28, 0xB1	; 177
    1daa:	81 f1       	breq	.+96     	; 0x1e0c <register_code+0xfa>
    1dac:	c2 3b       	cpi	r28, 0xB2	; 178
    1dae:	89 f1       	breq	.+98     	; 0x1e12 <register_code+0x100>
    1db0:	c3 3b       	cpi	r28, 0xB3	; 179
    1db2:	91 f1       	breq	.+100    	; 0x1e18 <register_code+0x106>
    1db4:	c4 3b       	cpi	r28, 0xB4	; 180
    1db6:	99 f1       	breq	.+102    	; 0x1e1e <register_code+0x10c>
    1db8:	c5 3b       	cpi	r28, 0xB5	; 181
    1dba:	a1 f1       	breq	.+104    	; 0x1e24 <register_code+0x112>
    1dbc:	c6 3b       	cpi	r28, 0xB6	; 182
    1dbe:	a9 f1       	breq	.+106    	; 0x1e2a <register_code+0x118>
    1dc0:	c7 3b       	cpi	r28, 0xB7	; 183
    1dc2:	b1 f1       	breq	.+108    	; 0x1e30 <register_code+0x11e>
    1dc4:	c8 3b       	cpi	r28, 0xB8	; 184
    1dc6:	b9 f1       	breq	.+110    	; 0x1e36 <register_code+0x124>
    1dc8:	c9 3b       	cpi	r28, 0xB9	; 185
    1dca:	c1 f1       	breq	.+112    	; 0x1e3c <register_code+0x12a>
    1dcc:	ca 3b       	cpi	r28, 0xBA	; 186
    1dce:	c9 f1       	breq	.+114    	; 0x1e42 <register_code+0x130>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	38 c0       	rjmp	.+112    	; 0x1e46 <register_code+0x134>
    1dd6:	82 ee       	ldi	r24, 0xE2	; 226
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	35 c0       	rjmp	.+106    	; 0x1e46 <register_code+0x134>
    1ddc:	89 ee       	ldi	r24, 0xE9	; 233
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	32 c0       	rjmp	.+100    	; 0x1e46 <register_code+0x134>
    1de2:	8a ee       	ldi	r24, 0xEA	; 234
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	2f c0       	rjmp	.+94     	; 0x1e46 <register_code+0x134>
    1de8:	85 eb       	ldi	r24, 0xB5	; 181
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	2c c0       	rjmp	.+88     	; 0x1e46 <register_code+0x134>
    1dee:	86 eb       	ldi	r24, 0xB6	; 182
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	29 c0       	rjmp	.+82     	; 0x1e46 <register_code+0x134>
    1df4:	87 eb       	ldi	r24, 0xB7	; 183
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	26 c0       	rjmp	.+76     	; 0x1e46 <register_code+0x134>
    1dfa:	8c ec       	ldi	r24, 0xCC	; 204
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	23 c0       	rjmp	.+70     	; 0x1e46 <register_code+0x134>
    1e00:	8d ec       	ldi	r24, 0xCD	; 205
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	20 c0       	rjmp	.+64     	; 0x1e46 <register_code+0x134>
    1e06:	83 e8       	ldi	r24, 0x83	; 131
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	1d c0       	rjmp	.+58     	; 0x1e46 <register_code+0x134>
    1e0c:	8a e8       	ldi	r24, 0x8A	; 138
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	1a c0       	rjmp	.+52     	; 0x1e46 <register_code+0x134>
    1e12:	82 e9       	ldi	r24, 0x92	; 146
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	17 c0       	rjmp	.+46     	; 0x1e46 <register_code+0x134>
    1e18:	84 e9       	ldi	r24, 0x94	; 148
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <register_code+0x134>
    1e1e:	81 e2       	ldi	r24, 0x21	; 33
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	11 c0       	rjmp	.+34     	; 0x1e46 <register_code+0x134>
    1e24:	83 e2       	ldi	r24, 0x23	; 35
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	0e c0       	rjmp	.+28     	; 0x1e46 <register_code+0x134>
    1e2a:	84 e2       	ldi	r24, 0x24	; 36
    1e2c:	92 e0       	ldi	r25, 0x02	; 2
    1e2e:	0b c0       	rjmp	.+22     	; 0x1e46 <register_code+0x134>
    1e30:	85 e2       	ldi	r24, 0x25	; 37
    1e32:	92 e0       	ldi	r25, 0x02	; 2
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <register_code+0x134>
    1e36:	86 e2       	ldi	r24, 0x26	; 38
    1e38:	92 e0       	ldi	r25, 0x02	; 2
    1e3a:	05 c0       	rjmp	.+10     	; 0x1e46 <register_code+0x134>
    1e3c:	87 e2       	ldi	r24, 0x27	; 39
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <register_code+0x134>
    1e42:	8a e2       	ldi	r24, 0x2A	; 42
    1e44:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    1e46:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    1e48:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <host_consumer_send>
    }
}
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    1e50:	88 23       	and	r24, r24
    1e52:	29 f1       	breq	.+74     	; 0x1e9e <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1e54:	9c ef       	ldi	r25, 0xFC	; 252
    1e56:	98 0f       	add	r25, r24
    1e58:	91 3a       	cpi	r25, 0xA1	; 161
    1e5a:	18 f4       	brcc	.+6      	; 0x1e62 <unregister_code+0x12>
        del_key(code);
    1e5c:	0e 94 65 17 	call	0x2eca	; 0x2eca <del_key>
    1e60:	0d c0       	rjmp	.+26     	; 0x1e7c <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    1e62:	90 e2       	ldi	r25, 0x20	; 32
    1e64:	98 0f       	add	r25, r24
    1e66:	98 30       	cpi	r25, 0x08	; 8
    1e68:	58 f4       	brcc	.+22     	; 0x1e80 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    1e6a:	87 70       	andi	r24, 0x07	; 7
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <unregister_code+0x22>
    1e70:	99 0f       	add	r25, r25
    1e72:	8a 95       	dec	r24
    1e74:	ea f7       	brpl	.-6      	; 0x1e70 <unregister_code+0x20>
    1e76:	89 2f       	mov	r24, r25
    1e78:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <del_mods>
        send_keyboard_report();
    1e7c:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1e80:	9b e5       	ldi	r25, 0x5B	; 91
    1e82:	98 0f       	add	r25, r24
    1e84:	93 30       	cpi	r25, 0x03	; 3
    1e86:	20 f4       	brcc	.+8      	; 0x1e90 <unregister_code+0x40>
        host_system_send(0);
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1e90:	88 5a       	subi	r24, 0xA8	; 168
    1e92:	83 31       	cpi	r24, 0x13	; 19
    1e94:	20 f4       	brcc	.+8      	; 0x1e9e <unregister_code+0x4e>
        host_consumer_send(0);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <host_consumer_send>
    1e9e:	08 95       	ret

00001ea0 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    1ea0:	88 23       	and	r24, r24
    1ea2:	21 f0       	breq	.+8      	; 0x1eac <register_mods+0xc>
        add_mods(mods);
    1ea4:	0e 94 84 17 	call	0x2f08	; 0x2f08 <add_mods>
        send_keyboard_report();
    1ea8:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <send_keyboard_report>
    1eac:	08 95       	ret

00001eae <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1eae:	88 23       	and	r24, r24
    1eb0:	21 f0       	breq	.+8      	; 0x1eba <unregister_mods+0xc>
        del_mods(mods);
    1eb2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <del_mods>
        send_keyboard_report();
    1eb6:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <send_keyboard_report>
    1eba:	08 95       	ret

00001ebc <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <process_action+0x12>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <process_action+0x14>
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <process_action+0x16>
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    1ed6:	25 e0       	ldi	r18, 0x05	; 5
    1ed8:	fc 01       	movw	r30, r24
    1eda:	de 01       	movw	r26, r28
    1edc:	11 96       	adiw	r26, 0x01	; 1
    1ede:	01 90       	ld	r0, Z+
    1ee0:	0d 92       	st	X+, r0
    1ee2:	2a 95       	dec	r18
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <process_action+0x22>
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	30 81       	ld	r19, Z
    1eea:	21 81       	ldd	r18, Z+1	; 0x01
    1eec:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    1eee:	05 81       	ldd	r16, Z+5	; 0x05
    1ef0:	02 95       	swap	r16
    1ef2:	0f 70       	andi	r16, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1ef4:	43 81       	ldd	r20, Z+3	; 0x03
    1ef6:	54 81       	ldd	r21, Z+4	; 0x04
    1ef8:	45 2b       	or	r20, r21
    1efa:	09 f4       	brne	.+2      	; 0x1efe <process_action+0x42>
    1efc:	7e c2       	rjmp	.+1276   	; 0x23fa <__stack+0x2fb>
    1efe:	2f 3f       	cpi	r18, 0xFF	; 255
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <process_action+0x4c>
#endif

    if (IS_NOEVENT(event)) { return; }
    1f02:	3f 3f       	cpi	r19, 0xFF	; 255
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <process_action+0x4c>
    1f06:	79 c2       	rjmp	.+1266   	; 0x23fa <__stack+0x2fb>
    1f08:	6c 01       	movw	r12, r24

    action_t action = layer_switch_get_action(event.key);
    1f0a:	39 83       	std	Y+1, r19	; 0x01
    1f0c:	2a 83       	std	Y+2, r18	; 0x02
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <layer_switch_get_action>
    1f16:	18 2f       	mov	r17, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    1f1e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    1f22:	2e 81       	ldd	r18, Y+6	; 0x06
    1f24:	e2 2f       	mov	r30, r18
    1f26:	e2 95       	swap	r30
    1f28:	ef 70       	andi	r30, 0x0F	; 15
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	ea 5a       	subi	r30, 0xAA	; 170
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    1f34:	82 2f       	mov	r24, r18
    1f36:	80 7f       	andi	r24, 0xF0	; 240
    1f38:	92 2f       	mov	r25, r18
    1f3a:	9f 70       	andi	r25, 0x0F	; 15
    1f3c:	09 2f       	mov	r16, r25
    1f3e:	88 23       	and	r24, r24
    1f40:	11 f0       	breq	.+4      	; 0x1f46 <process_action+0x8a>
    1f42:	02 95       	swap	r16
    1f44:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    1f46:	ff 20       	and	r15, r15
    1f48:	49 f0       	breq	.+18     	; 0x1f5c <process_action+0xa0>
                    if (mods) {
    1f4a:	00 23       	and	r16, r16
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <process_action+0x94>
    1f4e:	06 c2       	rjmp	.+1036   	; 0x235c <__stack+0x25d>
                        add_weak_mods(mods);
    1f50:	80 2f       	mov	r24, r16
    1f52:	0e 94 94 17 	call	0x2f28	; 0x2f28 <add_weak_mods>
                        send_keyboard_report();
    1f56:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <send_keyboard_report>
    1f5a:	00 c2       	rjmp	.+1024   	; 0x235c <__stack+0x25d>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    1f5c:	81 2f       	mov	r24, r17
    1f5e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <unregister_code>
                    if (mods) {
    1f62:	00 23       	and	r16, r16
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <process_action+0xac>
    1f66:	49 c2       	rjmp	.+1170   	; 0x23fa <__stack+0x2fb>
                        del_weak_mods(mods);
    1f68:	80 2f       	mov	r24, r16
    1f6a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    1f6e:	26 96       	adiw	r28, 0x06	; 6
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    1f8a:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    1f8e:	82 2f       	mov	r24, r18
    1f90:	80 7f       	andi	r24, 0xF0	; 240
    1f92:	92 2f       	mov	r25, r18
    1f94:	9f 70       	andi	r25, 0x0F	; 15
    1f96:	80 32       	cpi	r24, 0x20	; 32
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <process_action+0xe2>
    1f9a:	89 2f       	mov	r24, r25
    1f9c:	03 c0       	rjmp	.+6      	; 0x1fa4 <process_action+0xe8>
    1f9e:	89 2f       	mov	r24, r25
    1fa0:	82 95       	swap	r24
    1fa2:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    1fa4:	11 23       	and	r17, r17
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <process_action+0xf2>
    1fa8:	11 30       	cpi	r17, 0x01	; 1
    1faa:	09 f1       	breq	.+66     	; 0x1fee <process_action+0x132>
    1fac:	2a c0       	rjmp	.+84     	; 0x2002 <process_action+0x146>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1fae:	ff 20       	and	r15, r15
    1fb0:	a1 f0       	breq	.+40     	; 0x1fda <process_action+0x11e>
                            if (tap_count == 0) {
    1fb2:	00 23       	and	r16, r16
    1fb4:	81 f1       	breq	.+96     	; 0x2016 <process_action+0x15a>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1fb6:	01 30       	cpi	r16, 0x01	; 1
    1fb8:	71 f5       	brne	.+92     	; 0x2016 <process_action+0x15a>
            break;
#endif
        default:
            break;
    }
}
    1fba:	26 96       	adiw	r28, 0x06	; 6
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1fd6:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1fda:	00 23       	and	r16, r16
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <process_action+0x128>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1fde:	01 30       	cpi	r16, 0x01	; 1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <process_action+0x128>
    1fe2:	0b c2       	rjmp	.+1046   	; 0x23fa <__stack+0x2fb>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    1fe4:	8e 83       	std	Y+6, r24	; 0x06
    1fe6:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <clear_oneshot_mods>
                                unregister_mods(mods);
    1fea:	8e 81       	ldd	r24, Y+6	; 0x06
    1fec:	3b c1       	rjmp	.+630    	; 0x2264 <__stack+0x165>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1fee:	ff 20       	and	r15, r15
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <process_action+0x13e>
                            if (tap_count <= TAPPING_TOGGLE) {
    1ff2:	06 30       	cpi	r16, 0x06	; 6
    1ff4:	08 f0       	brcs	.+2      	; 0x1ff8 <process_action+0x13c>
    1ff6:	01 c2       	rjmp	.+1026   	; 0x23fa <__stack+0x2fb>
    1ff8:	0e c0       	rjmp	.+28     	; 0x2016 <process_action+0x15a>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1ffa:	05 30       	cpi	r16, 0x05	; 5
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <process_action+0x144>
    1ffe:	fd c1       	rjmp	.+1018   	; 0x23fa <__stack+0x2fb>
    2000:	31 c1       	rjmp	.+610    	; 0x2264 <__stack+0x165>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2002:	ff 20       	and	r15, r15
    2004:	c1 f0       	breq	.+48     	; 0x2036 <process_action+0x17a>
                            if (tap_count > 0) {
    2006:	00 23       	and	r16, r16
    2008:	31 f0       	breq	.+12     	; 0x2016 <process_action+0x15a>
                                if (record->tap.interrupted) {
    200a:	f6 01       	movw	r30, r12
    200c:	95 81       	ldd	r25, Z+5	; 0x05
    200e:	90 ff       	sbrs	r25, 0
    2010:	a5 c1       	rjmp	.+842    	; 0x235c <__stack+0x25d>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2012:	9f 70       	andi	r25, 0x0F	; 15
    2014:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2016:	26 96       	adiw	r28, 0x06	; 6
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2032:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2036:	00 23       	and	r16, r16
    2038:	09 f4       	brne	.+2      	; 0x203c <process_action+0x180>
    203a:	14 c1       	rjmp	.+552    	; 0x2264 <__stack+0x165>
    203c:	a3 c1       	rjmp	.+838    	; 0x2384 <__stack+0x285>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    203e:	82 2f       	mov	r24, r18
    2040:	83 70       	andi	r24, 0x03	; 3
    2042:	09 f0       	breq	.+2      	; 0x2046 <process_action+0x18a>
    2044:	77 c0       	rjmp	.+238    	; 0x2134 <__stack+0x35>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2046:	f1 10       	cpse	r15, r1
    2048:	d8 c1       	rjmp	.+944    	; 0x23fa <__stack+0x2fb>
                    uint8_t shift = action.layer_bitop.part*4;
    204a:	81 2f       	mov	r24, r17
    204c:	82 95       	swap	r24
    204e:	86 95       	lsr	r24
    2050:	87 70       	andi	r24, 0x07	; 7
    2052:	88 0f       	add	r24, r24
    2054:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2056:	91 2f       	mov	r25, r17
    2058:	9f 70       	andi	r25, 0x0F	; 15
    205a:	c9 2e       	mov	r12, r25
    205c:	d1 2c       	mov	r13, r1
    205e:	e1 2c       	mov	r14, r1
    2060:	f1 2c       	mov	r15, r1
    2062:	08 2e       	mov	r0, r24
    2064:	04 c0       	rjmp	.+8      	; 0x206e <process_action+0x1b2>
    2066:	cc 0c       	add	r12, r12
    2068:	dd 1c       	adc	r13, r13
    206a:	ee 1c       	adc	r14, r14
    206c:	ff 1c       	adc	r15, r15
    206e:	0a 94       	dec	r0
    2070:	d2 f7       	brpl	.-12     	; 0x2066 <process_action+0x1aa>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2072:	14 ff       	sbrs	r17, 4
    2074:	12 c0       	rjmp	.+36     	; 0x209a <process_action+0x1de>
    2076:	4f e0       	ldi	r20, 0x0F	; 15
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <process_action+0x1cc>
    2080:	44 0f       	add	r20, r20
    2082:	55 1f       	adc	r21, r21
    2084:	66 1f       	adc	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	8a 95       	dec	r24
    208a:	d2 f7       	brpl	.-12     	; 0x2080 <process_action+0x1c4>
    208c:	cb 01       	movw	r24, r22
    208e:	ba 01       	movw	r22, r20
    2090:	60 95       	com	r22
    2092:	70 95       	com	r23
    2094:	80 95       	com	r24
    2096:	90 95       	com	r25
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <process_action+0x1e4>
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    20a0:	26 95       	lsr	r18
    20a2:	26 95       	lsr	r18
    20a4:	23 70       	andi	r18, 0x03	; 3
    20a6:	42 2f       	mov	r20, r18
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	42 30       	cpi	r20, 0x02	; 2
    20ac:	51 05       	cpc	r21, r1
    20ae:	d1 f0       	breq	.+52     	; 0x20e4 <process_action+0x228>
    20b0:	43 30       	cpi	r20, 0x03	; 3
    20b2:	51 05       	cpc	r21, r1
    20b4:	59 f1       	breq	.+86     	; 0x210c <__stack+0xd>
    20b6:	6c 29       	or	r22, r12
    20b8:	7d 29       	or	r23, r13
    20ba:	8e 29       	or	r24, r14
    20bc:	9f 29       	or	r25, r15
    20be:	41 30       	cpi	r20, 0x01	; 1
    20c0:	51 05       	cpc	r21, r1
    20c2:	41 f1       	breq	.+80     	; 0x2114 <__stack+0x15>
            break;
#endif
        default:
            break;
    }
}
    20c4:	26 96       	adiw	r28, 0x06	; 6
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    20e0:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    20e4:	6c 29       	or	r22, r12
    20e6:	7d 29       	or	r23, r13
    20e8:	8e 29       	or	r24, r14
    20ea:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    20ec:	26 96       	adiw	r28, 0x06	; 6
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2108:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    210c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <default_layer_and>
    2110:	c7 01       	movw	r24, r14
    2112:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2114:	26 96       	adiw	r28, 0x06	; 6
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2130:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2134:	ff 20       	and	r15, r15
    2136:	19 f0       	breq	.+6      	; 0x213e <__stack+0x3f>
    2138:	82 2f       	mov	r24, r18
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <__stack+0x41>
    213e:	86 95       	lsr	r24
    2140:	88 23       	and	r24, r24
    2142:	09 f4       	brne	.+2      	; 0x2146 <__stack+0x47>
    2144:	5a c1       	rjmp	.+692    	; 0x23fa <__stack+0x2fb>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2146:	81 2f       	mov	r24, r17
    2148:	82 95       	swap	r24
    214a:	86 95       	lsr	r24
    214c:	87 70       	andi	r24, 0x07	; 7
    214e:	88 0f       	add	r24, r24
    2150:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2152:	91 2f       	mov	r25, r17
    2154:	9f 70       	andi	r25, 0x0F	; 15
    2156:	c9 2e       	mov	r12, r25
    2158:	d1 2c       	mov	r13, r1
    215a:	e1 2c       	mov	r14, r1
    215c:	f1 2c       	mov	r15, r1
    215e:	08 2e       	mov	r0, r24
    2160:	04 c0       	rjmp	.+8      	; 0x216a <__stack+0x6b>
    2162:	cc 0c       	add	r12, r12
    2164:	dd 1c       	adc	r13, r13
    2166:	ee 1c       	adc	r14, r14
    2168:	ff 1c       	adc	r15, r15
    216a:	0a 94       	dec	r0
    216c:	d2 f7       	brpl	.-12     	; 0x2162 <__stack+0x63>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    216e:	14 ff       	sbrs	r17, 4
    2170:	12 c0       	rjmp	.+36     	; 0x2196 <__stack+0x97>
    2172:	4f e0       	ldi	r20, 0x0F	; 15
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <__stack+0x85>
    217c:	44 0f       	add	r20, r20
    217e:	55 1f       	adc	r21, r21
    2180:	66 1f       	adc	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	8a 95       	dec	r24
    2186:	d2 f7       	brpl	.-12     	; 0x217c <__stack+0x7d>
    2188:	cb 01       	movw	r24, r22
    218a:	ba 01       	movw	r22, r20
    218c:	60 95       	com	r22
    218e:	70 95       	com	r23
    2190:	80 95       	com	r24
    2192:	90 95       	com	r25
    2194:	03 c0       	rjmp	.+6      	; 0x219c <__stack+0x9d>
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    219c:	26 95       	lsr	r18
    219e:	26 95       	lsr	r18
    21a0:	23 70       	andi	r18, 0x03	; 3
    21a2:	42 2f       	mov	r20, r18
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	42 30       	cpi	r20, 0x02	; 2
    21a8:	51 05       	cpc	r21, r1
    21aa:	d1 f0       	breq	.+52     	; 0x21e0 <__stack+0xe1>
    21ac:	43 30       	cpi	r20, 0x03	; 3
    21ae:	51 05       	cpc	r21, r1
    21b0:	59 f1       	breq	.+86     	; 0x2208 <__stack+0x109>
    21b2:	6c 29       	or	r22, r12
    21b4:	7d 29       	or	r23, r13
    21b6:	8e 29       	or	r24, r14
    21b8:	9f 29       	or	r25, r15
    21ba:	41 30       	cpi	r20, 0x01	; 1
    21bc:	51 05       	cpc	r21, r1
    21be:	41 f1       	breq	.+80     	; 0x2210 <__stack+0x111>
            break;
#endif
        default:
            break;
    }
}
    21c0:	26 96       	adiw	r28, 0x06	; 6
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	ff 90       	pop	r15
    21d6:	ef 90       	pop	r14
    21d8:	df 90       	pop	r13
    21da:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    21dc:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    21e0:	6c 29       	or	r22, r12
    21e2:	7d 29       	or	r23, r13
    21e4:	8e 29       	or	r24, r14
    21e6:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    21e8:	26 96       	adiw	r28, 0x06	; 6
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	df 90       	pop	r13
    2202:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2204:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2208:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <layer_and>
    220c:	c7 01       	movw	r24, r14
    220e:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2210:	26 96       	adiw	r28, 0x06	; 6
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	df 90       	pop	r13
    222a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    222c:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2230:	10 3f       	cpi	r17, 0xF0	; 240
    2232:	41 f1       	breq	.+80     	; 0x2284 <__stack+0x185>
    2234:	18 f4       	brcc	.+6      	; 0x223c <__stack+0x13d>
    2236:	10 3e       	cpi	r17, 0xE0	; 224
    2238:	48 f4       	brcc	.+18     	; 0x224c <__stack+0x14d>
    223a:	8b c0       	rjmp	.+278    	; 0x2352 <__stack+0x253>
    223c:	12 3f       	cpi	r17, 0xF2	; 242
    223e:	09 f4       	brne	.+2      	; 0x2242 <__stack+0x143>
    2240:	50 c0       	rjmp	.+160    	; 0x22e2 <__stack+0x1e3>
    2242:	d8 f1       	brcs	.+118    	; 0x22ba <__stack+0x1bb>
    2244:	13 3f       	cpi	r17, 0xF3	; 243
    2246:	09 f4       	brne	.+2      	; 0x224a <__stack+0x14b>
    2248:	60 c0       	rjmp	.+192    	; 0x230a <__stack+0x20b>
    224a:	83 c0       	rjmp	.+262    	; 0x2352 <__stack+0x253>
    224c:	1f 70       	andi	r17, 0x0F	; 15
    224e:	82 2f       	mov	r24, r18
    2250:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2252:	ff 20       	and	r15, r15
    2254:	21 f0       	breq	.+8      	; 0x225e <__stack+0x15f>
                        layer_on(action.layer_tap.val);
    2256:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    225a:	81 2f       	mov	r24, r17
    225c:	dc ce       	rjmp	.-584    	; 0x2016 <process_action+0x15a>
                    } else {
                        layer_off(action.layer_tap.val);
    225e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2262:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2264:	26 96       	adiw	r28, 0x06	; 6
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	1f 91       	pop	r17
    2276:	0f 91       	pop	r16
    2278:	ff 90       	pop	r15
    227a:	ef 90       	pop	r14
    227c:	df 90       	pop	r13
    227e:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2280:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2284:	ff 20       	and	r15, r15
    2286:	a9 f0       	breq	.+42     	; 0x22b2 <__stack+0x1b3>
                        if (tap_count < TAPPING_TOGGLE) {
    2288:	05 30       	cpi	r16, 0x05	; 5
    228a:	08 f0       	brcs	.+2      	; 0x228e <__stack+0x18f>
    228c:	b6 c0       	rjmp	.+364    	; 0x23fa <__stack+0x2fb>
                            layer_invert(action.layer_tap.val);
    228e:	82 2f       	mov	r24, r18
    2290:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2292:	26 96       	adiw	r28, 0x06	; 6
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    22ae:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    22b2:	06 30       	cpi	r16, 0x06	; 6
    22b4:	08 f0       	brcs	.+2      	; 0x22b8 <__stack+0x1b9>
    22b6:	a1 c0       	rjmp	.+322    	; 0x23fa <__stack+0x2fb>
    22b8:	ea cf       	rjmp	.-44     	; 0x228e <__stack+0x18f>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    22ba:	ff 20       	and	r15, r15
    22bc:	a1 f0       	breq	.+40     	; 0x22e6 <__stack+0x1e7>
    22be:	82 2f       	mov	r24, r18
    22c0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    22c2:	26 96       	adiw	r28, 0x06	; 6
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    22de:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    22e2:	ff 20       	and	r15, r15
    22e4:	61 f3       	breq	.-40     	; 0x22be <__stack+0x1bf>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    22e6:	82 2f       	mov	r24, r18
    22e8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    22ea:	26 96       	adiw	r28, 0x06	; 6
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	ff 90       	pop	r15
    2300:	ef 90       	pop	r14
    2302:	df 90       	pop	r13
    2304:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2306:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    230a:	ff 20       	and	r15, r15
    230c:	91 f0       	breq	.+36     	; 0x2332 <__stack+0x233>
    230e:	82 2f       	mov	r24, r18
    2310:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2312:	26 96       	adiw	r28, 0x06	; 6
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    232e:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2332:	26 96       	adiw	r28, 0x06	; 6
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    234e:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2352:	ff 20       	and	r15, r15
    2354:	a1 f0       	breq	.+40     	; 0x237e <__stack+0x27f>
                        if (tap_count > 0) {
    2356:	00 23       	and	r16, r16
    2358:	09 f4       	brne	.+2      	; 0x235c <__stack+0x25d>
    235a:	b1 cf       	rjmp	.-158    	; 0x22be <__stack+0x1bf>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    235c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    235e:	26 96       	adiw	r28, 0x06	; 6
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	ff 90       	pop	r15
    2374:	ef 90       	pop	r14
    2376:	df 90       	pop	r13
    2378:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    237a:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    237e:	00 23       	and	r16, r16
    2380:	09 f4       	brne	.+2      	; 0x2384 <__stack+0x285>
    2382:	b1 cf       	rjmp	.-158    	; 0x22e6 <__stack+0x1e7>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2384:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2386:	26 96       	adiw	r28, 0x06	; 6
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    23a2:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    23a6:	42 2f       	mov	r20, r18
    23a8:	4f 70       	andi	r20, 0x0F	; 15
    23aa:	61 2f       	mov	r22, r17
    23ac:	c6 01       	movw	r24, r12
    23ae:	0e 94 b1 18 	call	0x3162	; 0x3162 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    23b2:	26 96       	adiw	r28, 0x06	; 6
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    23ce:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    23d2:	42 2f       	mov	r20, r18
    23d4:	4f 70       	andi	r20, 0x0F	; 15
    23d6:	61 2f       	mov	r22, r17
    23d8:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    23da:	26 96       	adiw	r28, 0x06	; 6
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    23f6:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <action_function>
            break;
#endif
        default:
            break;
    }
}
    23fa:	26 96       	adiw	r28, 0x06	; 6
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
    2416:	08 95       	ret

00002418 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2418:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <clear_weak_mods>
    clear_keys();
    241c:	0e 94 76 17 	call	0x2eec	; 0x2eec <clear_keys>
    send_keyboard_report();
    2420:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <send_keyboard_report>

00002424 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2424:	0e 94 91 17 	call	0x2f22	; 0x2f22 <clear_mods>
    clear_keyboard_but_mods();
    2428:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

0000242c <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    242c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <layer_switch_get_action>

    switch (action.kind.id) {
    2430:	29 2f       	mov	r18, r25
    2432:	22 95       	swap	r18
    2434:	2f 70       	andi	r18, 0x0F	; 15
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	2c 30       	cpi	r18, 0x0C	; 12
    243a:	31 05       	cpc	r19, r1
    243c:	4c f4       	brge	.+18     	; 0x2450 <is_tap_key+0x24>
    243e:	2a 30       	cpi	r18, 0x0A	; 10
    2440:	31 05       	cpc	r19, r1
    2442:	6c f4       	brge	.+26     	; 0x245e <is_tap_key+0x32>
    2444:	22 50       	subi	r18, 0x02	; 2
    2446:	31 09       	sbc	r19, r1
    2448:	22 30       	cpi	r18, 0x02	; 2
    244a:	31 05       	cpc	r19, r1
    244c:	88 f4       	brcc	.+34     	; 0x2470 <is_tap_key+0x44>
    244e:	07 c0       	rjmp	.+14     	; 0x245e <is_tap_key+0x32>
    2450:	2c 30       	cpi	r18, 0x0C	; 12
    2452:	31 05       	cpc	r19, r1
    2454:	49 f0       	breq	.+18     	; 0x2468 <is_tap_key+0x3c>
    2456:	2f 30       	cpi	r18, 0x0F	; 15
    2458:	31 05       	cpc	r19, r1
    245a:	31 f0       	breq	.+12     	; 0x2468 <is_tap_key+0x3c>
    245c:	09 c0       	rjmp	.+18     	; 0x2470 <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    245e:	80 3e       	cpi	r24, 0xE0	; 224
    2460:	48 f0       	brcs	.+18     	; 0x2474 <is_tap_key+0x48>
    2462:	80 3f       	cpi	r24, 0xF0	; 240
    2464:	29 f4       	brne	.+10     	; 0x2470 <is_tap_key+0x44>
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2468:	93 fb       	bst	r25, 3
    246a:	88 27       	eor	r24, r24
    246c:	80 f9       	bld	r24, 0
    246e:	08 95       	ret
            return false;
    }
    return false;
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2474:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2476:	08 95       	ret

00002478 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	00 d0       	rcall	.+0      	; 0x247e <debug_event+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <debug_event+0x8>
    2480:	1f 92       	push	r1
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <debug_record>:

void debug_record(keyrecord_t record)
{
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	00 d0       	rcall	.+0      	; 0x249c <debug_record+0x6>
    249c:	00 d0       	rcall	.+0      	; 0x249e <debug_record+0x8>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <debug_record+0xa>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    24a4:	26 96       	adiw	r28, 0x06	; 6
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24bc:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    24c0:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24c2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <waiting_buffer_head>
    24c6:	c8 17       	cp	r28, r24
    24c8:	99 f0       	breq	.+38     	; 0x24f0 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    24ca:	d0 e0       	ldi	r29, 0x00	; 0
    24cc:	1c 9f       	mul	r17, r28
    24ce:	f0 01       	movw	r30, r0
    24d0:	1d 9f       	mul	r17, r29
    24d2:	f0 0d       	add	r31, r0
    24d4:	11 24       	eor	r1, r1
    24d6:	e8 5c       	subi	r30, 0xC8	; 200
    24d8:	fe 4f       	sbci	r31, 0xFE	; 254
    24da:	40 81       	ld	r20, Z
    24dc:	51 81       	ldd	r21, Z+1	; 0x01
    24de:	62 81       	ldd	r22, Z+2	; 0x02
    24e0:	73 81       	ldd	r23, Z+3	; 0x03
    24e2:	84 81       	ldd	r24, Z+4	; 0x04
    24e4:	95 81       	ldd	r25, Z+5	; 0x05
    24e6:	0e 94 4b 12 	call	0x2496	; 0x2496 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24ea:	21 96       	adiw	r28, 0x01	; 1
    24ec:	c7 70       	andi	r28, 0x07	; 7
    24ee:	e9 cf       	rjmp	.-46     	; 0x24c2 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	08 95       	ret

000024f8 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    24f8:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <tapping_key>
    24fc:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <tapping_key+0x1>
    2500:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <tapping_key+0x2>
    2504:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <tapping_key+0x3>
    2508:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <tapping_key+0x4>
    250c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <tapping_key+0x5>
    2510:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <debug_record>

00002514 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2514:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tapping_key+0x5>
    2518:	82 95       	swap	r24
    251a:	8f 70       	andi	r24, 0x0F	; 15
    251c:	09 f0       	breq	.+2      	; 0x2520 <waiting_buffer_scan_tap+0xc>
    251e:	54 c0       	rjmp	.+168    	; 0x25c8 <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2520:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <tapping_key+0x2>
    2524:	88 23       	and	r24, r24
    2526:	09 f4       	brne	.+2      	; 0x252a <waiting_buffer_scan_tap+0x16>
    2528:	4f c0       	rjmp	.+158    	; 0x25c8 <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    252a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <waiting_buffer_tail>
    252e:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <waiting_buffer_head>
    2532:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <tapping_key>
    2536:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <tapping_key+0x1>
    253a:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <tapping_key+0x3>
    253e:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <tapping_key+0x4>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2542:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2544:	8a 17       	cp	r24, r26
    2546:	09 f4       	brne	.+2      	; 0x254a <waiting_buffer_scan_tap+0x36>
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <waiting_buffer_scan_tap+0xb4>
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	41 15       	cp	r20, r1
    254e:	51 05       	cpc	r21, r1
    2550:	c1 f1       	breq	.+112    	; 0x25c2 <waiting_buffer_scan_tap+0xae>
    2552:	7f 3f       	cpi	r23, 0xFF	; 255
    2554:	11 f4       	brne	.+4      	; 0x255a <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2556:	6f 3f       	cpi	r22, 0xFF	; 255
    2558:	a1 f1       	breq	.+104    	; 0x25c2 <waiting_buffer_scan_tap+0xae>
    255a:	b8 9f       	mul	r27, r24
    255c:	f0 01       	movw	r30, r0
    255e:	b9 9f       	mul	r27, r25
    2560:	f0 0d       	add	r31, r0
    2562:	11 24       	eor	r1, r1
    2564:	e8 5c       	subi	r30, 0xC8	; 200
    2566:	fe 4f       	sbci	r31, 0xFE	; 254
    2568:	21 81       	ldd	r18, Z+1	; 0x01
    256a:	72 13       	cpse	r23, r18
    256c:	2a c0       	rjmp	.+84     	; 0x25c2 <waiting_buffer_scan_tap+0xae>
    256e:	20 81       	ld	r18, Z
    2570:	62 13       	cpse	r22, r18
    2572:	27 c0       	rjmp	.+78     	; 0x25c2 <waiting_buffer_scan_tap+0xae>
    2574:	22 81       	ldd	r18, Z+2	; 0x02
    2576:	21 11       	cpse	r18, r1
    2578:	24 c0       	rjmp	.+72     	; 0x25c2 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    257a:	23 81       	ldd	r18, Z+3	; 0x03
    257c:	34 81       	ldd	r19, Z+4	; 0x04
    257e:	24 17       	cp	r18, r20
    2580:	35 07       	cpc	r19, r21
    2582:	10 f4       	brcc	.+4      	; 0x2588 <waiting_buffer_scan_tap+0x74>
    2584:	21 50       	subi	r18, 0x01	; 1
    2586:	31 09       	sbc	r19, r1
    2588:	24 1b       	sub	r18, r20
    258a:	35 0b       	sbc	r19, r21
    258c:	28 3c       	cpi	r18, 0xC8	; 200
    258e:	31 05       	cpc	r19, r1
    2590:	c0 f4       	brcc	.+48     	; 0x25c2 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2592:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <tapping_key+0x5>
    2596:	2f 70       	andi	r18, 0x0F	; 15
    2598:	20 61       	ori	r18, 0x10	; 16
    259a:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    259e:	26 e0       	ldi	r18, 0x06	; 6
    25a0:	28 9f       	mul	r18, r24
    25a2:	f0 01       	movw	r30, r0
    25a4:	29 9f       	mul	r18, r25
    25a6:	f0 0d       	add	r31, r0
    25a8:	11 24       	eor	r1, r1
    25aa:	e3 5c       	subi	r30, 0xC3	; 195
    25ac:	fe 4f       	sbci	r31, 0xFE	; 254
    25ae:	80 81       	ld	r24, Z
    25b0:	8f 70       	andi	r24, 0x0F	; 15
    25b2:	80 61       	ori	r24, 0x10	; 16
    25b4:	80 83       	st	Z, r24
            process_action(&tapping_key);
    25b6:	88 e6       	ldi	r24, 0x68	; 104
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    25be:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    25c2:	01 96       	adiw	r24, 0x01	; 1
    25c4:	87 70       	andi	r24, 0x07	; 7
    25c6:	be cf       	rjmp	.-132    	; 0x2544 <waiting_buffer_scan_tap+0x30>
    25c8:	08 95       	ret

000025ca <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	62 97       	sbiw	r28, 0x12	; 18
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    25ec:	85 e0       	ldi	r24, 0x05	; 5
    25ee:	f8 01       	movw	r30, r16
    25f0:	de 01       	movw	r26, r28
    25f2:	1d 96       	adiw	r26, 0x0d	; 13
    25f4:	01 90       	ld	r0, Z+
    25f6:	0d 92       	st	X+, r0
    25f8:	8a 95       	dec	r24
    25fa:	e1 f7       	brne	.-8      	; 0x25f4 <process_tapping+0x2a>
    25fc:	d8 01       	movw	r26, r16
    25fe:	4c 91       	ld	r20, X
    2600:	11 96       	adiw	r26, 0x01	; 1
    2602:	5c 91       	ld	r21, X
    2604:	11 97       	sbiw	r26, 0x01	; 1
    2606:	12 96       	adiw	r26, 0x02	; 2
    2608:	6c 91       	ld	r22, X
    260a:	12 97       	sbiw	r26, 0x02	; 2
    260c:	13 96       	adiw	r26, 0x03	; 3
    260e:	cd 90       	ld	r12, X+
    2610:	dc 90       	ld	r13, X
    2612:	14 97       	sbiw	r26, 0x04	; 4
    2614:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <tapping_key>
    2618:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <tapping_key+0x1>
    261c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <tapping_key+0x3>
    2620:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <tapping_key+0x4>
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	09 f4       	brne	.+2      	; 0x262a <process_tapping+0x60>
    2628:	6b c1       	rjmp	.+726    	; 0x2900 <process_tapping+0x336>
    262a:	7f 3f       	cpi	r23, 0xFF	; 255
    262c:	19 f4       	brne	.+6      	; 0x2634 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    262e:	3f 3f       	cpi	r19, 0xFF	; 255
    2630:	09 f4       	brne	.+2      	; 0x2634 <process_tapping+0x6a>
    2632:	66 c1       	rjmp	.+716    	; 0x2900 <process_tapping+0x336>
    2634:	e0 90 6a 01 	lds	r14, 0x016A	; 0x80016a <tapping_key+0x2>
    2638:	ee 20       	and	r14, r14
    263a:	09 f4       	brne	.+2      	; 0x263e <process_tapping+0x74>
    263c:	c0 c0       	rjmp	.+384    	; 0x27be <process_tapping+0x1f4>
    263e:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    2642:	c8 16       	cp	r12, r24
    2644:	d9 06       	cpc	r13, r25
    2646:	28 f0       	brcs	.+10     	; 0x2652 <process_tapping+0x88>
    2648:	f6 01       	movw	r30, r12
    264a:	e8 1b       	sub	r30, r24
    264c:	f9 0b       	sbc	r31, r25
    264e:	cf 01       	movw	r24, r30
    2650:	04 c0       	rjmp	.+8      	; 0x265a <process_tapping+0x90>
    2652:	80 95       	com	r24
    2654:	90 95       	com	r25
    2656:	8c 0d       	add	r24, r12
    2658:	9d 1d       	adc	r25, r13
    265a:	ff 24       	eor	r15, r15
    265c:	f3 94       	inc	r15
    265e:	88 3c       	cpi	r24, 0xC8	; 200
    2660:	91 05       	cpc	r25, r1
    2662:	78 f0       	brcs	.+30     	; 0x2682 <process_tapping+0xb8>
    2664:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2666:	20 7f       	andi	r18, 0xF0	; 240
    2668:	09 f0       	breq	.+2      	; 0x266c <process_tapping+0xa2>
    266a:	c6 c0       	rjmp	.+396    	; 0x27f8 <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    266c:	7c 2d       	mov	r23, r12
    266e:	d9 8a       	std	Y+17, r13	; 0x11
    2670:	c8 8a       	std	Y+16, r12	; 0x10
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	0e 94 3c 12 	call	0x2478	; 0x2478 <debug_event>
                process_action(&tapping_key);
    2678:	88 e6       	ldi	r24, 0x68	; 104
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>
    2680:	b1 c0       	rjmp	.+354    	; 0x27e4 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2682:	82 2f       	mov	r24, r18
    2684:	80 7f       	andi	r24, 0xF0	; 240
    2686:	09 f0       	breq	.+2      	; 0x268a <process_tapping+0xc0>
    2688:	46 c0       	rjmp	.+140    	; 0x2716 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    268a:	75 13       	cpse	r23, r21
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <process_tapping+0xec>
    268e:	34 13       	cpse	r19, r20
    2690:	12 c0       	rjmp	.+36     	; 0x26b6 <process_tapping+0xec>
    2692:	61 11       	cpse	r22, r1
    2694:	10 c0       	rjmp	.+32     	; 0x26b6 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2696:	2f 70       	andi	r18, 0x0F	; 15
    2698:	20 61       	ori	r18, 0x10	; 16
    269a:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <tapping_key+0x5>
                    debug_tapping_key();
    269e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <debug_tapping_key>
                    process_action(&tapping_key);
    26a2:	88 e6       	ldi	r24, 0x68	; 104
    26a4:	91 e0       	ldi	r25, 0x01	; 1
    26a6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    26aa:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tapping_key+0x5>
    26ae:	d8 01       	movw	r26, r16
    26b0:	15 96       	adiw	r26, 0x05	; 5
    26b2:	8c 93       	st	X, r24
    26b4:	2e c0       	rjmp	.+92     	; 0x2712 <process_tapping+0x148>
    26b6:	cd 28       	or	r12, r13
    26b8:	19 f1       	breq	.+70     	; 0x2700 <process_tapping+0x136>
    26ba:	5f 3f       	cpi	r21, 0xFF	; 255
    26bc:	11 f4       	brne	.+4      	; 0x26c2 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    26be:	4f 3f       	cpi	r20, 0xFF	; 255
    26c0:	f9 f0       	breq	.+62     	; 0x2700 <process_tapping+0x136>
    26c2:	f6 2e       	mov	r15, r22
    26c4:	61 11       	cpse	r22, r1
    26c6:	1c c0       	rjmp	.+56     	; 0x2700 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    26c8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <waiting_buffer_tail>
    26cc:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    26d0:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    26d2:	82 17       	cp	r24, r18
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <process_tapping+0x10e>
    26d6:	5a c0       	rjmp	.+180    	; 0x278c <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	38 9f       	mul	r19, r24
    26dc:	f0 01       	movw	r30, r0
    26de:	39 9f       	mul	r19, r25
    26e0:	f0 0d       	add	r31, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	e8 5c       	subi	r30, 0xC8	; 200
    26e6:	fe 4f       	sbci	r31, 0xFE	; 254
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	57 13       	cpse	r21, r23
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <process_tapping+0x130>
    26ee:	70 81       	ld	r23, Z
    26f0:	47 13       	cpse	r20, r23
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <process_tapping+0x130>
    26f4:	72 81       	ldd	r23, Z+2	; 0x02
    26f6:	71 11       	cpse	r23, r1
    26f8:	03 c0       	rjmp	.+6      	; 0x2700 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	87 70       	andi	r24, 0x07	; 7
    26fe:	e9 cf       	rjmp	.-46     	; 0x26d2 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2700:	f6 2e       	mov	r15, r22
    2702:	66 23       	and	r22, r22
    2704:	09 f4       	brne	.+2      	; 0x2708 <process_tapping+0x13e>
    2706:	18 c1       	rjmp	.+560    	; 0x2938 <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    2708:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tapping_key+0x5>
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    2712:	f1 2c       	mov	r15, r1
    2714:	11 c1       	rjmp	.+546    	; 0x2938 <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2716:	75 13       	cpse	r23, r21
    2718:	08 c0       	rjmp	.+16     	; 0x272a <process_tapping+0x160>
    271a:	34 13       	cpse	r19, r20
    271c:	06 c0       	rjmp	.+12     	; 0x272a <process_tapping+0x160>
    271e:	61 11       	cpse	r22, r1
    2720:	04 c0       	rjmp	.+8      	; 0x272a <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2722:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tapping_key+0x5>
    2726:	d8 01       	movw	r26, r16
    2728:	c3 c0       	rjmp	.+390    	; 0x28b0 <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    272a:	4d 87       	std	Y+13, r20	; 0x0d
    272c:	5e 87       	std	Y+14, r21	; 0x0e
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	6a 8b       	std	Y+18, r22	; 0x12
    2734:	0e 94 16 12 	call	0x242c	; 0x242c <is_tap_key>
    2738:	6a 89       	ldd	r22, Y+18	; 0x12
    273a:	88 23       	and	r24, r24
    273c:	e1 f1       	breq	.+120    	; 0x27b6 <process_tapping+0x1ec>
    273e:	66 23       	and	r22, r22
    2740:	d1 f1       	breq	.+116    	; 0x27b6 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2742:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <tapping_key+0x5>
    2746:	82 2f       	mov	r24, r18
    2748:	82 95       	swap	r24
    274a:	8f 70       	andi	r24, 0x0F	; 15
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 97       	sbiw	r24, 0x02	; 2
    2750:	74 f0       	brlt	.+28     	; 0x276e <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2752:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tapping_key>
    2756:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tapping_key+0x1>
    275a:	98 87       	std	Y+8, r25	; 0x08
    275c:	8f 83       	std	Y+7, r24	; 0x07
    275e:	19 86       	std	Y+9, r1	; 0x09
    2760:	db 86       	std	Y+11, r13	; 0x0b
    2762:	ca 86       	std	Y+10, r12	; 0x0a
    2764:	2c 87       	std	Y+12, r18	; 0x0c
    2766:	ce 01       	movw	r24, r28
    2768:	07 96       	adiw	r24, 0x07	; 7
    276a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    276e:	86 e0       	ldi	r24, 0x06	; 6
    2770:	f8 01       	movw	r30, r16
    2772:	a8 e6       	ldi	r26, 0x68	; 104
    2774:	b1 e0       	ldi	r27, 0x01	; 1
    2776:	01 90       	ld	r0, Z+
    2778:	0d 92       	st	X+, r0
    277a:	8a 95       	dec	r24
    277c:	e1 f7       	brne	.-8      	; 0x2776 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    277e:	0e 94 8a 12 	call	0x2514	; 0x2514 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2782:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <debug_tapping_key>
                    return true;
    2786:	ff 24       	eor	r15, r15
    2788:	f3 94       	inc	r15
    278a:	d6 c0       	rjmp	.+428    	; 0x2938 <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    278c:	4d 87       	std	Y+13, r20	; 0x0d
    278e:	5e 87       	std	Y+14, r21	; 0x0e
    2790:	8d 85       	ldd	r24, Y+13	; 0x0d
    2792:	9e 85       	ldd	r25, Y+14	; 0x0e
    2794:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <layer_switch_get_action>
                    switch (action.kind.id) {
    2798:	29 2f       	mov	r18, r25
    279a:	22 95       	swap	r18
    279c:	2f 70       	andi	r18, 0x0F	; 15
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <process_tapping+0x1de>
    27a6:	bc c0       	rjmp	.+376    	; 0x2920 <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    27a8:	9f 70       	andi	r25, 0x0F	; 15
    27aa:	09 f0       	breq	.+2      	; 0x27ae <process_tapping+0x1e4>
    27ac:	b6 c0       	rjmp	.+364    	; 0x291a <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    27ae:	80 5e       	subi	r24, 0xE0	; 224
    27b0:	88 30       	cpi	r24, 0x08	; 8
    27b2:	08 f4       	brcc	.+2      	; 0x27b6 <process_tapping+0x1ec>
    27b4:	c1 c0       	rjmp	.+386    	; 0x2938 <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    27b6:	c8 01       	movw	r24, r16
    27b8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>
    27bc:	e4 cf       	rjmp	.-56     	; 0x2786 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    27be:	c8 16       	cp	r12, r24
    27c0:	d9 06       	cpc	r13, r25
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <process_tapping+0x1fc>
    27c4:	53 c0       	rjmp	.+166    	; 0x286c <process_tapping+0x2a2>
    27c6:	f6 01       	movw	r30, r12
    27c8:	e8 1b       	sub	r30, r24
    27ca:	f9 0b       	sbc	r31, r25
    27cc:	cf 01       	movw	r24, r30
    27ce:	88 3c       	cpi	r24, 0xC8	; 200
    27d0:	91 05       	cpc	r25, r1
    27d2:	08 f4       	brcc	.+2      	; 0x27d6 <process_tapping+0x20c>
    27d4:	50 c0       	rjmp	.+160    	; 0x2876 <process_tapping+0x2ac>
    27d6:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    27d8:	7c 2d       	mov	r23, r12
    27da:	d9 8a       	std	Y+17, r13	; 0x11
    27dc:	c8 8a       	std	Y+16, r12	; 0x10
    27de:	89 89       	ldd	r24, Y+17	; 0x11
    27e0:	0e 94 3c 12 	call	0x2478	; 0x2478 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    27e4:	e8 e6       	ldi	r30, 0x68	; 104
    27e6:	f1 e0       	ldi	r31, 0x01	; 1
    27e8:	86 e0       	ldi	r24, 0x06	; 6
    27ea:	df 01       	movw	r26, r30
    27ec:	1d 92       	st	X+, r1
    27ee:	8a 95       	dec	r24
    27f0:	e9 f7       	brne	.-6      	; 0x27ec <process_tapping+0x222>
                debug_tapping_key();
    27f2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <debug_tapping_key>
                return false;
    27f6:	a0 c0       	rjmp	.+320    	; 0x2938 <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    27f8:	75 13       	cpse	r23, r21
    27fa:	14 c0       	rjmp	.+40     	; 0x2824 <process_tapping+0x25a>
    27fc:	34 13       	cpse	r19, r20
    27fe:	12 c0       	rjmp	.+36     	; 0x2824 <process_tapping+0x25a>
    2800:	61 11       	cpse	r22, r1
    2802:	10 c0       	rjmp	.+32     	; 0x2824 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2804:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tapping_key+0x5>
    2808:	f8 01       	movw	r30, r16
    280a:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    280c:	c8 01       	movw	r24, r16
    280e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>
                    tapping_key = (keyrecord_t){};
    2812:	86 e0       	ldi	r24, 0x06	; 6
    2814:	e8 e6       	ldi	r30, 0x68	; 104
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	df 01       	movw	r26, r30
    281a:	1d 92       	st	X+, r1
    281c:	8a 95       	dec	r24
    281e:	e9 f7       	brne	.-6      	; 0x281a <process_tapping+0x250>
                    return true;
    2820:	fe 2c       	mov	r15, r14
    2822:	8a c0       	rjmp	.+276    	; 0x2938 <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2824:	4d 87       	std	Y+13, r20	; 0x0d
    2826:	5e 87       	std	Y+14, r21	; 0x0e
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	6a 8b       	std	Y+18, r22	; 0x12
    282e:	0e 94 16 12 	call	0x242c	; 0x242c <is_tap_key>
    2832:	6a 89       	ldd	r22, Y+18	; 0x12
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <process_tapping+0x270>
    2838:	be cf       	rjmp	.-132    	; 0x27b6 <process_tapping+0x1ec>
    283a:	66 23       	and	r22, r22
    283c:	09 f4       	brne	.+2      	; 0x2840 <process_tapping+0x276>
    283e:	bb cf       	rjmp	.-138    	; 0x27b6 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2840:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <tapping_key+0x5>
    2844:	82 2f       	mov	r24, r18
    2846:	82 95       	swap	r24
    2848:	8f 70       	andi	r24, 0x0F	; 15
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	02 97       	sbiw	r24, 0x02	; 2
    284e:	0c f4       	brge	.+2      	; 0x2852 <process_tapping+0x288>
    2850:	8e cf       	rjmp	.-228    	; 0x276e <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2852:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tapping_key>
    2856:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tapping_key+0x1>
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	1b 82       	std	Y+3, r1	; 0x03
    2860:	dd 82       	std	Y+5, r13	; 0x05
    2862:	cc 82       	std	Y+4, r12	; 0x04
    2864:	2e 83       	std	Y+6, r18	; 0x06
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	7f cf       	rjmp	.-258    	; 0x276a <process_tapping+0x1a0>
    286c:	80 95       	com	r24
    286e:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2870:	8c 0d       	add	r24, r12
    2872:	9d 1d       	adc	r25, r13
    2874:	ac cf       	rjmp	.-168    	; 0x27ce <process_tapping+0x204>
            if (event.pressed) {
    2876:	f6 2e       	mov	r15, r22
    2878:	66 23       	and	r22, r22
    287a:	09 f4       	brne	.+2      	; 0x287e <process_tapping+0x2b4>
    287c:	9c cf       	rjmp	.-200    	; 0x27b6 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    287e:	75 13       	cpse	r23, r21
    2880:	2e c0       	rjmp	.+92     	; 0x28de <process_tapping+0x314>
    2882:	34 13       	cpse	r19, r20
    2884:	2c c0       	rjmp	.+88     	; 0x28de <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2886:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <tapping_key+0x5>
    288a:	20 fd       	sbrc	r18, 0
    288c:	1f c0       	rjmp	.+62     	; 0x28cc <process_tapping+0x302>
    288e:	82 2f       	mov	r24, r18
    2890:	82 95       	swap	r24
    2892:	8f 70       	andi	r24, 0x0F	; 15
    2894:	d9 f0       	breq	.+54     	; 0x28cc <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2896:	d8 01       	movw	r26, r16
    2898:	15 96       	adiw	r26, 0x05	; 5
    289a:	2c 93       	st	X, r18
    289c:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    289e:	8f 30       	cpi	r24, 0x0F	; 15
    28a0:	49 f0       	breq	.+18     	; 0x28b4 <process_tapping+0x2ea>
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	98 2f       	mov	r25, r24
    28a6:	92 95       	swap	r25
    28a8:	90 7f       	andi	r25, 0xF0	; 240
    28aa:	82 2f       	mov	r24, r18
    28ac:	8f 70       	andi	r24, 0x0F	; 15
    28ae:	89 2b       	or	r24, r25
    28b0:	15 96       	adiw	r26, 0x05	; 5
    28b2:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    28b4:	c8 01       	movw	r24, r16
    28b6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>
                        tapping_key = *keyp;
    28ba:	86 e0       	ldi	r24, 0x06	; 6
    28bc:	f8 01       	movw	r30, r16
    28be:	a8 e6       	ldi	r26, 0x68	; 104
    28c0:	b1 e0       	ldi	r27, 0x01	; 1
    28c2:	01 90       	ld	r0, Z+
    28c4:	0d 92       	st	X+, r0
    28c6:	8a 95       	dec	r24
    28c8:	e1 f7       	brne	.-8      	; 0x28c2 <process_tapping+0x2f8>
    28ca:	93 cf       	rjmp	.-218    	; 0x27f2 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    28cc:	86 e0       	ldi	r24, 0x06	; 6
    28ce:	f8 01       	movw	r30, r16
    28d0:	a8 e6       	ldi	r26, 0x68	; 104
    28d2:	b1 e0       	ldi	r27, 0x01	; 1
    28d4:	01 90       	ld	r0, Z+
    28d6:	0d 92       	st	X+, r0
    28d8:	8a 95       	dec	r24
    28da:	e1 f7       	brne	.-8      	; 0x28d4 <process_tapping+0x30a>
                        return true;
    28dc:	2d c0       	rjmp	.+90     	; 0x2938 <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    28de:	4d 87       	std	Y+13, r20	; 0x0d
    28e0:	5e 87       	std	Y+14, r21	; 0x0e
    28e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e6:	0e 94 16 12 	call	0x242c	; 0x242c <is_tap_key>
    28ea:	81 11       	cpse	r24, r1
    28ec:	40 cf       	rjmp	.-384    	; 0x276e <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    28ee:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tapping_key+0x5>
    28f2:	81 60       	ori	r24, 0x01	; 1
    28f4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <tapping_key+0x5>
                    process_action(keyp);
    28f8:	c8 01       	movw	r24, r16
    28fa:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <process_action>
                    return true;
    28fe:	1c c0       	rjmp	.+56     	; 0x2938 <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2900:	66 23       	and	r22, r22
    2902:	09 f4       	brne	.+2      	; 0x2906 <process_tapping+0x33c>
    2904:	58 cf       	rjmp	.-336    	; 0x27b6 <process_tapping+0x1ec>
    2906:	4d 87       	std	Y+13, r20	; 0x0d
    2908:	5e 87       	std	Y+14, r21	; 0x0e
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	0e 94 16 12 	call	0x242c	; 0x242c <is_tap_key>
    2912:	88 23       	and	r24, r24
    2914:	09 f4       	brne	.+2      	; 0x2918 <process_tapping+0x34e>
    2916:	4f cf       	rjmp	.-354    	; 0x27b6 <process_tapping+0x1ec>
    2918:	2a cf       	rjmp	.-428    	; 0x276e <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    291a:	81 11       	cpse	r24, r1
    291c:	48 cf       	rjmp	.-368    	; 0x27ae <process_tapping+0x1e4>
    291e:	0c c0       	rjmp	.+24     	; 0x2938 <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    2920:	24 30       	cpi	r18, 0x04	; 4
    2922:	31 05       	cpc	r19, r1
    2924:	0c f0       	brlt	.+2      	; 0x2928 <process_tapping+0x35e>
    2926:	47 cf       	rjmp	.-370    	; 0x27b6 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2928:	9f 70       	andi	r25, 0x0F	; 15
    292a:	09 f4       	brne	.+2      	; 0x292e <process_tapping+0x364>
    292c:	40 cf       	rjmp	.-384    	; 0x27ae <process_tapping+0x1e4>
    292e:	f8 01       	movw	r30, r16
    2930:	95 81       	ldd	r25, Z+5	; 0x05
    2932:	90 7f       	andi	r25, 0xF0	; 240
    2934:	09 f0       	breq	.+2      	; 0x2938 <process_tapping+0x36e>
    2936:	3b cf       	rjmp	.-394    	; 0x27ae <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2938:	8f 2d       	mov	r24, r15
    293a:	62 96       	adiw	r28, 0x12	; 18
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	ff 90       	pop	r15
    2950:	ef 90       	pop	r14
    2952:	df 90       	pop	r13
    2954:	cf 90       	pop	r12
    2956:	08 95       	ret

00002958 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	2c 97       	sbiw	r28, 0x0c	; 12
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	4f 83       	std	Y+7, r20	; 0x07
    2970:	58 87       	std	Y+8, r21	; 0x08
    2972:	69 87       	std	Y+9, r22	; 0x09
    2974:	7a 87       	std	Y+10, r23	; 0x0a
    2976:	8b 87       	std	Y+11, r24	; 0x0b
    2978:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    297a:	ce 01       	movw	r24, r28
    297c:	07 96       	adiw	r24, 0x07	; 7
    297e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <process_tapping>
    2982:	88 23       	and	r24, r24
    2984:	69 f0       	breq	.+26     	; 0x29a0 <action_tapping_process+0x48>
    2986:	8f 81       	ldd	r24, Y+7	; 0x07
    2988:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    298a:	2a 85       	ldd	r18, Y+10	; 0x0a
    298c:	3b 85       	ldd	r19, Y+11	; 0x0b
    298e:	23 2b       	or	r18, r19
    2990:	f1 f1       	breq	.+124    	; 0x2a0e <action_tapping_process+0xb6>
    2992:	9f 3f       	cpi	r25, 0xFF	; 255
    2994:	09 f0       	breq	.+2      	; 0x2998 <action_tapping_process+0x40>
    2996:	63 c0       	rjmp	.+198    	; 0x2a5e <action_tapping_process+0x106>
    2998:	8f 3f       	cpi	r24, 0xFF	; 255
    299a:	09 f0       	breq	.+2      	; 0x299e <action_tapping_process+0x46>
    299c:	60 c0       	rjmp	.+192    	; 0x2a5e <action_tapping_process+0x106>
    299e:	37 c0       	rjmp	.+110    	; 0x2a0e <action_tapping_process+0xb6>
    29a0:	86 e0       	ldi	r24, 0x06	; 6
    29a2:	fe 01       	movw	r30, r28
    29a4:	37 96       	adiw	r30, 0x07	; 7
    29a6:	de 01       	movw	r26, r28
    29a8:	11 96       	adiw	r26, 0x01	; 1
    29aa:	01 90       	ld	r0, Z+
    29ac:	0d 92       	st	X+, r0
    29ae:	8a 95       	dec	r24
    29b0:	e1 f7       	brne	.-8      	; 0x29aa <action_tapping_process+0x52>
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    29b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    29ba:	30 97       	sbiw	r30, 0x00	; 0
    29bc:	41 f1       	breq	.+80     	; 0x2a0e <action_tapping_process+0xb6>
    29be:	7f 3f       	cpi	r23, 0xFF	; 255
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <action_tapping_process+0x6e>
    29c2:	6f 3f       	cpi	r22, 0xFF	; 255
    29c4:	21 f1       	breq	.+72     	; 0x2a0e <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    29c6:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <waiting_buffer_head>
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	c9 01       	movw	r24, r18
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	87 70       	andi	r24, 0x07	; 7
    29d2:	99 27       	eor	r25, r25
    29d4:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <waiting_buffer_tail>
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	84 17       	cp	r24, r20
    29dc:	95 07       	cpc	r25, r21
    29de:	09 f4       	brne	.+2      	; 0x29e2 <action_tapping_process+0x8a>
    29e0:	47 c0       	rjmp	.+142    	; 0x2a70 <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    29e2:	69 83       	std	Y+1, r22	; 0x01
    29e4:	7a 83       	std	Y+2, r23	; 0x02
    29e6:	fd 83       	std	Y+5, r31	; 0x05
    29e8:	ec 83       	std	Y+4, r30	; 0x04
    29ea:	96 e0       	ldi	r25, 0x06	; 6
    29ec:	92 9f       	mul	r25, r18
    29ee:	d0 01       	movw	r26, r0
    29f0:	93 9f       	mul	r25, r19
    29f2:	b0 0d       	add	r27, r0
    29f4:	11 24       	eor	r1, r1
    29f6:	a8 5c       	subi	r26, 0xC8	; 200
    29f8:	be 4f       	sbci	r27, 0xFE	; 254
    29fa:	fe 01       	movw	r30, r28
    29fc:	31 96       	adiw	r30, 0x01	; 1
    29fe:	01 90       	ld	r0, Z+
    2a00:	0d 92       	st	X+, r0
    2a02:	9a 95       	dec	r25
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2a06:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2a0a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2a0e:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2a10:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <waiting_buffer_tail>
    2a14:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <waiting_buffer_head>
    2a18:	89 17       	cp	r24, r25
    2a1a:	c1 f1       	breq	.+112    	; 0x2a8c <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2a1c:	18 9f       	mul	r17, r24
    2a1e:	c0 01       	movw	r24, r0
    2a20:	11 24       	eor	r1, r1
    2a22:	88 5c       	subi	r24, 0xC8	; 200
    2a24:	9e 4f       	sbci	r25, 0xFE	; 254
    2a26:	0e 94 e5 12 	call	0x25ca	; 0x25ca <process_tapping>
    2a2a:	88 23       	and	r24, r24
    2a2c:	79 f1       	breq	.+94     	; 0x2a8c <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2a2e:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <waiting_buffer_tail>
    2a32:	1e 9f       	mul	r17, r30
    2a34:	f0 01       	movw	r30, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	e8 5c       	subi	r30, 0xC8	; 200
    2a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3c:	40 81       	ld	r20, Z
    2a3e:	51 81       	ldd	r21, Z+1	; 0x01
    2a40:	62 81       	ldd	r22, Z+2	; 0x02
    2a42:	73 81       	ldd	r23, Z+3	; 0x03
    2a44:	84 81       	ldd	r24, Z+4	; 0x04
    2a46:	95 81       	ldd	r25, Z+5	; 0x05
    2a48:	0e 94 4b 12 	call	0x2496	; 0x2496 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2a4c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <waiting_buffer_tail>
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	87 70       	andi	r24, 0x07	; 7
    2a56:	99 27       	eor	r25, r25
    2a58:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <waiting_buffer_tail>
    2a5c:	d9 cf       	rjmp	.-78     	; 0x2a10 <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    2a5e:	4f 81       	ldd	r20, Y+7	; 0x07
    2a60:	58 85       	ldd	r21, Y+8	; 0x08
    2a62:	69 85       	ldd	r22, Y+9	; 0x09
    2a64:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a6a:	0e 94 4b 12 	call	0x2496	; 0x2496 <debug_record>
    2a6e:	cf cf       	rjmp	.-98     	; 0x2a0e <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2a70:	0e 94 12 12 	call	0x2424	; 0x2424 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2a74:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    2a78:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2a7c:	e8 e6       	ldi	r30, 0x68	; 104
    2a7e:	f1 e0       	ldi	r31, 0x01	; 1
    2a80:	86 e0       	ldi	r24, 0x06	; 6
    2a82:	df 01       	movw	r26, r30
    2a84:	1d 92       	st	X+, r1
    2a86:	8a 95       	dec	r24
    2a88:	e9 f7       	brne	.-6      	; 0x2a84 <action_tapping_process+0x12c>
    2a8a:	c1 cf       	rjmp	.-126    	; 0x2a0e <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2a8c:	2c 96       	adiw	r28, 0x0c	; 12
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	08 95       	ret

00002aa0 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2aa0:	ef 92       	push	r14
    2aa2:	ff 92       	push	r15
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2aae:	89 2b       	or	r24, r25
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <action_macro_play+0x14>
    2ab2:	6c c0       	rjmp	.+216    	; 0x2b8c <action_macro_play+0xec>
    2ab4:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2ab6:	ee 24       	eor	r14, r14
    2ab8:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2aba:	e8 01       	movw	r28, r16
    2abc:	21 96       	adiw	r28, 0x01	; 1
    2abe:	f8 01       	movw	r30, r16
    2ac0:	84 91       	lpm	r24, Z
    2ac2:	84 37       	cpi	r24, 0x74	; 116
    2ac4:	40 f4       	brcc	.+16     	; 0x2ad6 <action_macro_play+0x36>
    2ac6:	84 30       	cpi	r24, 0x04	; 4
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <action_macro_play+0x2c>
    2aca:	51 c0       	rjmp	.+162    	; 0x2b6e <action_macro_play+0xce>
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	81 f0       	breq	.+32     	; 0x2af0 <action_macro_play+0x50>
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	19 f1       	breq	.+70     	; 0x2b1a <action_macro_play+0x7a>
    2ad4:	5b c0       	rjmp	.+182    	; 0x2b8c <action_macro_play+0xec>
    2ad6:	85 37       	cpi	r24, 0x75	; 117
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <action_macro_play+0x3c>
    2ada:	44 c0       	rjmp	.+136    	; 0x2b64 <action_macro_play+0xc4>
    2adc:	a8 f1       	brcs	.+106    	; 0x2b48 <action_macro_play+0xa8>
    2ade:	9c e7       	ldi	r25, 0x7C	; 124
    2ae0:	98 0f       	add	r25, r24
    2ae2:	90 37       	cpi	r25, 0x70	; 112
    2ae4:	08 f0       	brcs	.+2      	; 0x2ae8 <action_macro_play+0x48>
    2ae6:	52 c0       	rjmp	.+164    	; 0x2b8c <action_macro_play+0xec>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2ae8:	8f 77       	andi	r24, 0x7F	; 127
    2aea:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <unregister_code>
    2aee:	41 c0       	rjmp	.+130    	; 0x2b72 <action_macro_play+0xd2>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    2af0:	0e 5f       	subi	r16, 0xFE	; 254
    2af2:	1f 4f       	sbci	r17, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	8c 0f       	add	r24, r28
    2afc:	88 30       	cpi	r24, 0x08	; 8
    2afe:	48 f4       	brcc	.+18     	; 0x2b12 <action_macro_play+0x72>
                    add_weak_mods(MOD_BIT(macro));
    2b00:	c7 70       	andi	r28, 0x07	; 7
    2b02:	8e 2d       	mov	r24, r14
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <action_macro_play+0x68>
    2b06:	88 0f       	add	r24, r24
    2b08:	ca 95       	dec	r28
    2b0a:	ea f7       	brpl	.-6      	; 0x2b06 <action_macro_play+0x66>
    2b0c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <add_weak_mods>
    2b10:	14 c0       	rjmp	.+40     	; 0x2b3a <action_macro_play+0x9a>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    2b12:	8c 2f       	mov	r24, r28
    2b14:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <register_code>
    2b18:	2d c0       	rjmp	.+90     	; 0x2b74 <action_macro_play+0xd4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2b1a:	0e 5f       	subi	r16, 0xFE	; 254
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	fe 01       	movw	r30, r28
    2b20:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2b22:	80 e2       	ldi	r24, 0x20	; 32
    2b24:	8c 0f       	add	r24, r28
    2b26:	88 30       	cpi	r24, 0x08	; 8
    2b28:	58 f4       	brcc	.+22     	; 0x2b40 <action_macro_play+0xa0>
                    del_weak_mods(MOD_BIT(macro));
    2b2a:	c7 70       	andi	r28, 0x07	; 7
    2b2c:	8e 2d       	mov	r24, r14
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <action_macro_play+0x92>
    2b30:	88 0f       	add	r24, r24
    2b32:	ca 95       	dec	r28
    2b34:	ea f7       	brpl	.-6      	; 0x2b30 <action_macro_play+0x90>
    2b36:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <del_weak_mods>
                    send_keyboard_report();
    2b3a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <send_keyboard_report>
    2b3e:	1a c0       	rjmp	.+52     	; 0x2b74 <action_macro_play+0xd4>
                } else {
                    unregister_code(macro);
    2b40:	8c 2f       	mov	r24, r28
    2b42:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <unregister_code>
    2b46:	16 c0       	rjmp	.+44     	; 0x2b74 <action_macro_play+0xd4>
                }
                break;
            case WAIT:
                MACRO_READ();
    2b48:	0e 5f       	subi	r16, 0xFE	; 254
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2b50:	cc 23       	and	r28, r28
    2b52:	81 f0       	breq	.+32     	; 0x2b74 <action_macro_play+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b54:	8f e9       	ldi	r24, 0x9F	; 159
    2b56:	9f e0       	ldi	r25, 0x0F	; 15
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <action_macro_play+0xb8>
    2b5c:	00 c0       	rjmp	.+0      	; 0x2b5e <action_macro_play+0xbe>
    2b5e:	00 00       	nop
    2b60:	c1 50       	subi	r28, 0x01	; 1
    2b62:	f6 cf       	rjmp	.-20     	; 0x2b50 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    2b64:	0e 5f       	subi	r16, 0xFE	; 254
    2b66:	1f 4f       	sbci	r17, 0xFF	; 255
    2b68:	fe 01       	movw	r30, r28
    2b6a:	f4 90       	lpm	r15, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    2b6e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <register_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2b72:	8e 01       	movw	r16, r28
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    2b74:	8f 2d       	mov	r24, r15
    2b76:	88 23       	and	r24, r24
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <action_macro_play+0xdc>
    2b7a:	9f cf       	rjmp	.-194    	; 0x2aba <action_macro_play+0x1a>
    2b7c:	ef e9       	ldi	r30, 0x9F	; 159
    2b7e:	ff e0       	ldi	r31, 0x0F	; 15
    2b80:	31 97       	sbiw	r30, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <action_macro_play+0xe0>
    2b84:	00 c0       	rjmp	.+0      	; 0x2b86 <action_macro_play+0xe6>
    2b86:	00 00       	nop
    2b88:	81 50       	subi	r24, 0x01	; 1
    2b8a:	f5 cf       	rjmp	.-22     	; 0x2b76 <action_macro_play+0xd6>
    }
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    2b9a:	08 95       	ret

00002b9c <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2b9c:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <default_layer_state>
    2ba0:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <default_layer_state+0x1>
    2ba4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <default_layer_state+0x2>
    2ba8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <default_layer_state+0x3>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2bac:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002bb0 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    2bb4:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <default_layer_state>
    2bb8:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <default_layer_state+0x1>
    2bbc:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <default_layer_state+0x2>
    2bc0:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <default_layer_state+0x3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	80 2b       	or	r24, r16
    2bca:	91 2b       	or	r25, r17
    2bcc:	a2 2b       	or	r26, r18
    2bce:	b3 2b       	or	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2bd0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <default_layer_state>
    2bd4:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <default_layer_state+0x1>
    2bd8:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <default_layer_state+0x2>
    2bdc:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2be4:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002be8 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    2bec:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <default_layer_state>
    2bf0:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <default_layer_state+0x1>
    2bf4:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <default_layer_state+0x2>
    2bf8:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <default_layer_state+0x3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	80 23       	and	r24, r16
    2c02:	91 23       	and	r25, r17
    2c04:	a2 23       	and	r26, r18
    2c06:	b3 23       	and	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2c08:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <default_layer_state>
    2c0c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <default_layer_state+0x1>
    2c10:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <default_layer_state+0x2>
    2c14:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2c1c:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002c20 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    2c24:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <default_layer_state>
    2c28:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <default_layer_state+0x1>
    2c2c:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <default_layer_state+0x2>
    2c30:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <default_layer_state+0x3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	80 27       	eor	r24, r16
    2c3a:	91 27       	eor	r25, r17
    2c3c:	a2 27       	eor	r26, r18
    2c3e:	b3 27       	eor	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2c40:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <default_layer_state>
    2c44:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <default_layer_state+0x1>
    2c48:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <default_layer_state+0x2>
    2c4c:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2c54:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002c58 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2c58:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <layer_state>
    2c5c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <layer_state+0x1>
    2c60:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <layer_state+0x2>
    2c64:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2c68:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002c6c <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <layer_move+0x12>
    2c76:	44 0f       	add	r20, r20
    2c78:	55 1f       	adc	r21, r21
    2c7a:	66 1f       	adc	r22, r22
    2c7c:	77 1f       	adc	r23, r23
    2c7e:	8a 95       	dec	r24
    2c80:	d2 f7       	brpl	.-12     	; 0x2c76 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2c82:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <layer_state>
    2c86:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <layer_state+0x1>
    2c8a:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <layer_state+0x2>
    2c8e:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2c92:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002c96 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <layer_on+0x12>
    2ca0:	44 0f       	add	r20, r20
    2ca2:	55 1f       	adc	r21, r21
    2ca4:	66 1f       	adc	r22, r22
    2ca6:	77 1f       	adc	r23, r23
    2ca8:	8a 95       	dec	r24
    2caa:	d2 f7       	brpl	.-12     	; 0x2ca0 <layer_on+0xa>
    2cac:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <layer_state>
    2cb0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <layer_state+0x1>
    2cb4:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <layer_state+0x2>
    2cb8:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <layer_state+0x3>
    2cbc:	48 2b       	or	r20, r24
    2cbe:	59 2b       	or	r21, r25
    2cc0:	6a 2b       	or	r22, r26
    2cc2:	7b 2b       	or	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2cc4:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <layer_state>
    2cc8:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <layer_state+0x1>
    2ccc:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <layer_state+0x2>
    2cd0:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2cd4:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002cd8 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	04 c0       	rjmp	.+8      	; 0x2cea <layer_off+0x12>
    2ce2:	44 0f       	add	r20, r20
    2ce4:	55 1f       	adc	r21, r21
    2ce6:	66 1f       	adc	r22, r22
    2ce8:	77 1f       	adc	r23, r23
    2cea:	8a 95       	dec	r24
    2cec:	d2 f7       	brpl	.-12     	; 0x2ce2 <layer_off+0xa>
    2cee:	40 95       	com	r20
    2cf0:	50 95       	com	r21
    2cf2:	60 95       	com	r22
    2cf4:	70 95       	com	r23
    2cf6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <layer_state>
    2cfa:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <layer_state+0x1>
    2cfe:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <layer_state+0x2>
    2d02:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <layer_state+0x3>
    2d06:	48 23       	and	r20, r24
    2d08:	59 23       	and	r21, r25
    2d0a:	6a 23       	and	r22, r26
    2d0c:	7b 23       	and	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2d0e:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <layer_state>
    2d12:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <layer_state+0x1>
    2d16:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <layer_state+0x2>
    2d1a:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2d1e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002d22 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	04 c0       	rjmp	.+8      	; 0x2d34 <layer_invert+0x12>
    2d2c:	44 0f       	add	r20, r20
    2d2e:	55 1f       	adc	r21, r21
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	8a 95       	dec	r24
    2d36:	d2 f7       	brpl	.-12     	; 0x2d2c <layer_invert+0xa>
    2d38:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <layer_state>
    2d3c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <layer_state+0x1>
    2d40:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <layer_state+0x2>
    2d44:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <layer_state+0x3>
    2d48:	48 27       	eor	r20, r24
    2d4a:	59 27       	eor	r21, r25
    2d4c:	6a 27       	eor	r22, r26
    2d4e:	7b 27       	eor	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2d50:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <layer_state>
    2d54:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <layer_state+0x1>
    2d58:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <layer_state+0x2>
    2d5c:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2d60:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002d64 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    2d68:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <layer_state>
    2d6c:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <layer_state+0x1>
    2d70:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <layer_state+0x2>
    2d74:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <layer_state+0x3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	80 2b       	or	r24, r16
    2d7e:	91 2b       	or	r25, r17
    2d80:	a2 2b       	or	r26, r18
    2d82:	b3 2b       	or	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2d84:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <layer_state>
    2d88:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <layer_state+0x1>
    2d8c:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <layer_state+0x2>
    2d90:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <layer_state+0x3>
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2d98:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002d9c <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    2da0:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <layer_state>
    2da4:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <layer_state+0x1>
    2da8:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <layer_state+0x2>
    2dac:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <layer_state+0x3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	80 23       	and	r24, r16
    2db6:	91 23       	and	r25, r17
    2db8:	a2 23       	and	r26, r18
    2dba:	b3 23       	and	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2dbc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <layer_state>
    2dc0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <layer_state+0x1>
    2dc4:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <layer_state+0x2>
    2dc8:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <layer_state+0x3>
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2dd0:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002dd4 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    2dd8:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <layer_state>
    2ddc:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <layer_state+0x1>
    2de0:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <layer_state+0x2>
    2de4:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <layer_state+0x3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	80 27       	eor	r24, r16
    2dee:	91 27       	eor	r25, r17
    2df0:	a2 27       	eor	r26, r18
    2df2:	b3 27       	eor	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2df4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <layer_state>
    2df8:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <layer_state+0x1>
    2dfc:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <layer_state+0x2>
    2e00:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <layer_state+0x3>
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2e08:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <clear_keyboard_but_mods>

00002e0c <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    2e0c:	08 95       	ret

00002e0e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    2e0e:	cf 92       	push	r12
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	8c 01       	movw	r16, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    2e20:	c0 90 72 01 	lds	r12, 0x0172	; 0x800172 <default_layer_state>
    2e24:	d0 90 73 01 	lds	r13, 0x0173	; 0x800173 <default_layer_state+0x1>
    2e28:	e0 90 74 01 	lds	r14, 0x0174	; 0x800174 <default_layer_state+0x2>
    2e2c:	f0 90 75 01 	lds	r15, 0x0175	; 0x800175 <default_layer_state+0x3>
    2e30:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <layer_state>
    2e34:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <layer_state+0x1>
    2e38:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <layer_state+0x2>
    2e3c:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <layer_state+0x3>
    2e40:	c4 2a       	or	r12, r20
    2e42:	d5 2a       	or	r13, r21
    2e44:	e6 2a       	or	r14, r22
    2e46:	f7 2a       	or	r15, r23
    2e48:	cf e1       	ldi	r28, 0x1F	; 31
    2e4a:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2e4c:	d7 01       	movw	r26, r14
    2e4e:	c6 01       	movw	r24, r12
    2e50:	0c 2e       	mov	r0, r28
    2e52:	04 c0       	rjmp	.+8      	; 0x2e5c <layer_switch_get_action+0x4e>
    2e54:	b6 95       	lsr	r27
    2e56:	a7 95       	ror	r26
    2e58:	97 95       	ror	r25
    2e5a:	87 95       	ror	r24
    2e5c:	0a 94       	dec	r0
    2e5e:	d2 f7       	brpl	.-12     	; 0x2e54 <layer_switch_get_action+0x46>
    2e60:	80 ff       	sbrs	r24, 0
    2e62:	07 c0       	rjmp	.+14     	; 0x2e72 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    2e64:	b8 01       	movw	r22, r16
    2e66:	8c 2f       	mov	r24, r28
    2e68:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	91 05       	cpc	r25, r1
    2e70:	31 f4       	brne	.+12     	; 0x2e7e <layer_switch_get_action+0x70>
    2e72:	21 97       	sbiw	r28, 0x01	; 1
    2e74:	58 f7       	brcc	.-42     	; 0x2e4c <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    2e76:	b8 01       	movw	r22, r16
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	ff 90       	pop	r15
    2e88:	ef 90       	pop	r14
    2e8a:	df 90       	pop	r13
    2e8c:	cf 90       	pop	r12
    2e8e:	08 95       	ret

00002e90 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    2e90:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <keyboard_report>
    2e94:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <keyboard_report+0x1>
    2e98:	f9 01       	movw	r30, r18
    2e9a:	32 96       	adiw	r30, 0x02	; 2
    2e9c:	9f ef       	ldi	r25, 0xFF	; 255
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	51 91       	ld	r21, Z+
    2ea2:	58 17       	cp	r21, r24
    2ea4:	89 f0       	breq	.+34     	; 0x2ec8 <add_key+0x38>
    2ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ea8:	19 f4       	brne	.+6      	; 0x2eb0 <add_key+0x20>
    2eaa:	51 11       	cpse	r21, r1
    2eac:	01 c0       	rjmp	.+2      	; 0x2eb0 <add_key+0x20>
    2eae:	94 2f       	mov	r25, r20
    2eb0:	4f 5f       	subi	r20, 0xFF	; 255
    2eb2:	46 30       	cpi	r20, 0x06	; 6
    2eb4:	a9 f7       	brne	.-22     	; 0x2ea0 <add_key+0x10>
    2eb6:	9f 3f       	cpi	r25, 0xFF	; 255
    2eb8:	39 f0       	breq	.+14     	; 0x2ec8 <add_key+0x38>
    2eba:	f9 01       	movw	r30, r18
    2ebc:	e9 0f       	add	r30, r25
    2ebe:	f1 1d       	adc	r31, r1
    2ec0:	97 fd       	sbrc	r25, 7
    2ec2:	fa 95       	dec	r31
    2ec4:	82 83       	std	Z+2, r24	; 0x02
    2ec6:	08 95       	ret
    2ec8:	08 95       	ret

00002eca <del_key>:
    2eca:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <keyboard_report>
    2ece:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <keyboard_report+0x1>
    2ed2:	f9 01       	movw	r30, r18
    2ed4:	32 96       	adiw	r30, 0x02	; 2
    2ed6:	28 5f       	subi	r18, 0xF8	; 248
    2ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eda:	90 81       	ld	r25, Z
    2edc:	98 13       	cpse	r25, r24
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <del_key+0x18>
    2ee0:	10 82       	st	Z, r1
    2ee2:	31 96       	adiw	r30, 0x01	; 1
    2ee4:	e2 17       	cp	r30, r18
    2ee6:	f3 07       	cpc	r31, r19
    2ee8:	c1 f7       	brne	.-16     	; 0x2eda <del_key+0x10>
    2eea:	08 95       	ret

00002eec <clear_keys>:
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <keyboard_report>
    2ef4:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <keyboard_report+0x1>
    2ef8:	e8 0f       	add	r30, r24
    2efa:	f9 1f       	adc	r31, r25
    2efc:	10 82       	st	Z, r1
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	88 30       	cpi	r24, 0x08	; 8
    2f02:	91 05       	cpc	r25, r1
    2f04:	a9 f7       	brne	.-22     	; 0x2ef0 <clear_keys+0x4>
    2f06:	08 95       	ret

00002f08 <add_mods>:
    2f08:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <real_mods>
    2f0c:	89 2b       	or	r24, r25
    2f0e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <real_mods>
    2f12:	08 95       	ret

00002f14 <del_mods>:
    2f14:	80 95       	com	r24
    2f16:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <real_mods>
    2f1a:	89 23       	and	r24, r25
    2f1c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <real_mods>
    2f20:	08 95       	ret

00002f22 <clear_mods>:
    2f22:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <real_mods>
    2f26:	08 95       	ret

00002f28 <add_weak_mods>:
    2f28:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <weak_mods>
    2f2c:	89 2b       	or	r24, r25
    2f2e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <weak_mods>
    2f32:	08 95       	ret

00002f34 <del_weak_mods>:
    2f34:	80 95       	com	r24
    2f36:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <weak_mods>
    2f3a:	89 23       	and	r24, r25
    2f3c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <weak_mods>
    2f40:	08 95       	ret

00002f42 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    2f42:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <weak_mods>
    2f46:	08 95       	ret

00002f48 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2f48:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <oneshot_mods>
    2f4c:	08 95       	ret

00002f4e <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2f4e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <oneshot_mods>
    2f52:	08 95       	ret

00002f54 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2f54:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_report>
    2f58:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_report+0x1>
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	31 96       	adiw	r30, 0x01	; 1
    2f60:	9c 01       	movw	r18, r24
    2f62:	28 5f       	subi	r18, 0xF8	; 248
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2f68:	91 91       	ld	r25, Z+
    2f6a:	91 11       	cpse	r25, r1
            cnt++;
    2f6c:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2f6e:	e2 17       	cp	r30, r18
    2f70:	f3 07       	cpc	r31, r19
    2f72:	d1 f7       	brne	.-12     	; 0x2f68 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2f74:	08 95       	ret

00002f76 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2f76:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <keyboard_report>
    2f7a:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <keyboard_report+0x1>
    2f7e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <real_mods>
    2f82:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2f84:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <keyboard_report>
    2f88:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <keyboard_report+0x1>
    2f8c:	90 81       	ld	r25, Z
    2f8e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <weak_mods>
    2f92:	89 2b       	or	r24, r25
    2f94:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2f96:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <oneshot_mods>
    2f9a:	88 23       	and	r24, r24
    2f9c:	61 f0       	breq	.+24     	; 0x2fb6 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2f9e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <keyboard_report>
    2fa2:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <keyboard_report+0x1>
    2fa6:	90 81       	ld	r25, Z
    2fa8:	89 2b       	or	r24, r25
    2faa:	80 83       	st	Z, r24
        if (has_anykey()) {
    2fac:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <has_anykey>
    2fb0:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2fb2:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <oneshot_mods>
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2fb6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_report>
    2fba:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_report+0x1>
    2fbe:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <host_keyboard_send>

00002fc2 <action_for_key>:
static action_t keycode_to_action(uint8_t keycode);


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    2fc6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <keymap_key_to_keycode>
    switch (keycode) {
    2fca:	90 e4       	ldi	r25, 0x40	; 64
    2fcc:	98 0f       	add	r25, r24
    2fce:	90 32       	cpi	r25, 0x20	; 32
    2fd0:	18 f4       	brcc	.+6      	; 0x2fd8 <action_for_key+0x16>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    2fd2:	0e 94 02 05 	call	0xa04	; 0xa04 <keymap_fn_to_action>
    2fd6:	c2 c0       	rjmp	.+388    	; 0x315c <action_for_key+0x19a>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    2fd8:	8d 3b       	cpi	r24, 0xBD	; 189
    2fda:	50 f4       	brcc	.+20     	; 0x2ff0 <action_for_key+0x2e>
    2fdc:	88 3a       	cpi	r24, 0xA8	; 168
    2fde:	10 f5       	brcc	.+68     	; 0x3024 <action_for_key+0x62>
    2fe0:	85 3a       	cpi	r24, 0xA5	; 165
    2fe2:	b8 f4       	brcc	.+46     	; 0x3012 <action_for_key+0x50>
    2fe4:	84 30       	cpi	r24, 0x04	; 4
    2fe6:	90 f4       	brcc	.+36     	; 0x300c <action_for_key+0x4a>
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	09 f4       	brne	.+2      	; 0x2fee <action_for_key+0x2c>
    2fec:	6f c0       	rjmp	.+222    	; 0x30cc <action_for_key+0x10a>
    2fee:	0b c0       	rjmp	.+22     	; 0x3006 <action_for_key+0x44>
    2ff0:	88 3e       	cpi	r24, 0xE8	; 232
    2ff2:	30 f4       	brcc	.+12     	; 0x3000 <action_for_key+0x3e>
    2ff4:	80 3e       	cpi	r24, 0xE0	; 224
    2ff6:	50 f4       	brcc	.+20     	; 0x300c <action_for_key+0x4a>
    2ff8:	8f 3b       	cpi	r24, 0xBF	; 191
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <action_for_key+0x3c>
    2ffc:	59 c0       	rjmp	.+178    	; 0x30b0 <action_for_key+0xee>
    2ffe:	03 c0       	rjmp	.+6      	; 0x3006 <action_for_key+0x44>
    3000:	80 3f       	cpi	r24, 0xF0	; 240
    3002:	08 f0       	brcs	.+2      	; 0x3006 <action_for_key+0x44>
    3004:	51 c0       	rjmp	.+162    	; 0x30a8 <action_for_key+0xe6>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3006:	c0 e0       	ldi	r28, 0x00	; 0
    3008:	d0 e0       	ldi	r29, 0x00	; 0
    300a:	a7 c0       	rjmp	.+334    	; 0x315a <action_for_key+0x198>
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    300c:	c8 2f       	mov	r28, r24
    300e:	d0 e0       	ldi	r29, 0x00	; 0
    3010:	a4 c0       	rjmp	.+328    	; 0x315a <action_for_key+0x198>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3012:	85 3a       	cpi	r24, 0xA5	; 165
    3014:	09 f4       	brne	.+2      	; 0x3018 <action_for_key+0x56>
    3016:	5d c0       	rjmp	.+186    	; 0x30d2 <action_for_key+0x110>
    3018:	86 3a       	cpi	r24, 0xA6	; 166
    301a:	09 f4       	brne	.+2      	; 0x301e <action_for_key+0x5c>
    301c:	5d c0       	rjmp	.+186    	; 0x30d8 <action_for_key+0x116>
    301e:	c3 e8       	ldi	r28, 0x83	; 131
    3020:	d0 e4       	ldi	r29, 0x40	; 64
    3022:	9b c0       	rjmp	.+310    	; 0x315a <action_for_key+0x198>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3024:	88 3a       	cpi	r24, 0xA8	; 168
    3026:	09 f4       	brne	.+2      	; 0x302a <action_for_key+0x68>
    3028:	5a c0       	rjmp	.+180    	; 0x30de <action_for_key+0x11c>
    302a:	89 3a       	cpi	r24, 0xA9	; 169
    302c:	09 f4       	brne	.+2      	; 0x3030 <action_for_key+0x6e>
    302e:	5a c0       	rjmp	.+180    	; 0x30e4 <action_for_key+0x122>
    3030:	8a 3a       	cpi	r24, 0xAA	; 170
    3032:	09 f4       	brne	.+2      	; 0x3036 <action_for_key+0x74>
    3034:	5a c0       	rjmp	.+180    	; 0x30ea <action_for_key+0x128>
    3036:	8b 3a       	cpi	r24, 0xAB	; 171
    3038:	09 f4       	brne	.+2      	; 0x303c <action_for_key+0x7a>
    303a:	5a c0       	rjmp	.+180    	; 0x30f0 <action_for_key+0x12e>
    303c:	8c 3a       	cpi	r24, 0xAC	; 172
    303e:	09 f4       	brne	.+2      	; 0x3042 <action_for_key+0x80>
    3040:	5a c0       	rjmp	.+180    	; 0x30f6 <action_for_key+0x134>
    3042:	8b 3b       	cpi	r24, 0xBB	; 187
    3044:	09 f4       	brne	.+2      	; 0x3048 <action_for_key+0x86>
    3046:	5a c0       	rjmp	.+180    	; 0x30fc <action_for_key+0x13a>
    3048:	8c 3b       	cpi	r24, 0xBC	; 188
    304a:	09 f4       	brne	.+2      	; 0x304e <action_for_key+0x8c>
    304c:	5a c0       	rjmp	.+180    	; 0x3102 <action_for_key+0x140>
    304e:	8d 3a       	cpi	r24, 0xAD	; 173
    3050:	09 f4       	brne	.+2      	; 0x3054 <action_for_key+0x92>
    3052:	5a c0       	rjmp	.+180    	; 0x3108 <action_for_key+0x146>
    3054:	80 3b       	cpi	r24, 0xB0	; 176
    3056:	09 f4       	brne	.+2      	; 0x305a <action_for_key+0x98>
    3058:	5a c0       	rjmp	.+180    	; 0x310e <action_for_key+0x14c>
    305a:	8e 3a       	cpi	r24, 0xAE	; 174
    305c:	09 f4       	brne	.+2      	; 0x3060 <action_for_key+0x9e>
    305e:	5a c0       	rjmp	.+180    	; 0x3114 <action_for_key+0x152>
    3060:	8f 3a       	cpi	r24, 0xAF	; 175
    3062:	09 f4       	brne	.+2      	; 0x3066 <action_for_key+0xa4>
    3064:	5a c0       	rjmp	.+180    	; 0x311a <action_for_key+0x158>
    3066:	81 3b       	cpi	r24, 0xB1	; 177
    3068:	09 f4       	brne	.+2      	; 0x306c <action_for_key+0xaa>
    306a:	5a c0       	rjmp	.+180    	; 0x3120 <action_for_key+0x15e>
    306c:	82 3b       	cpi	r24, 0xB2	; 178
    306e:	09 f4       	brne	.+2      	; 0x3072 <action_for_key+0xb0>
    3070:	5a c0       	rjmp	.+180    	; 0x3126 <action_for_key+0x164>
    3072:	83 3b       	cpi	r24, 0xB3	; 179
    3074:	09 f4       	brne	.+2      	; 0x3078 <action_for_key+0xb6>
    3076:	5a c0       	rjmp	.+180    	; 0x312c <action_for_key+0x16a>
    3078:	84 3b       	cpi	r24, 0xB4	; 180
    307a:	09 f4       	brne	.+2      	; 0x307e <action_for_key+0xbc>
    307c:	5a c0       	rjmp	.+180    	; 0x3132 <action_for_key+0x170>
    307e:	85 3b       	cpi	r24, 0xB5	; 181
    3080:	09 f4       	brne	.+2      	; 0x3084 <action_for_key+0xc2>
    3082:	5a c0       	rjmp	.+180    	; 0x3138 <action_for_key+0x176>
    3084:	86 3b       	cpi	r24, 0xB6	; 182
    3086:	09 f4       	brne	.+2      	; 0x308a <action_for_key+0xc8>
    3088:	5a c0       	rjmp	.+180    	; 0x313e <action_for_key+0x17c>
    308a:	87 3b       	cpi	r24, 0xB7	; 183
    308c:	09 f4       	brne	.+2      	; 0x3090 <action_for_key+0xce>
    308e:	5a c0       	rjmp	.+180    	; 0x3144 <action_for_key+0x182>
    3090:	88 3b       	cpi	r24, 0xB8	; 184
    3092:	09 f4       	brne	.+2      	; 0x3096 <action_for_key+0xd4>
    3094:	5a c0       	rjmp	.+180    	; 0x314a <action_for_key+0x188>
    3096:	89 3b       	cpi	r24, 0xB9	; 185
    3098:	09 f4       	brne	.+2      	; 0x309c <action_for_key+0xda>
    309a:	5a c0       	rjmp	.+180    	; 0x3150 <action_for_key+0x18e>
    309c:	8a 3b       	cpi	r24, 0xBA	; 186
    309e:	09 f4       	brne	.+2      	; 0x30a2 <action_for_key+0xe0>
    30a0:	5a c0       	rjmp	.+180    	; 0x3156 <action_for_key+0x194>
    30a2:	c0 e0       	ldi	r28, 0x00	; 0
    30a4:	d4 e4       	ldi	r29, 0x44	; 68
    30a6:	59 c0       	rjmp	.+178    	; 0x315a <action_for_key+0x198>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    30a8:	c8 2f       	mov	r28, r24
    30aa:	d0 e0       	ldi	r29, 0x00	; 0
    30ac:	d0 65       	ori	r29, 0x50	; 80
    30ae:	55 c0       	rjmp	.+170    	; 0x315a <action_for_key+0x198>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    30b0:	0e 94 12 12 	call	0x2424	; 0x2424 <clear_keyboard>
    30b4:	2f ef       	ldi	r18, 0xFF	; 255
    30b6:	80 e7       	ldi	r24, 0x70	; 112
    30b8:	92 e0       	ldi	r25, 0x02	; 2
    30ba:	21 50       	subi	r18, 0x01	; 1
    30bc:	80 40       	sbci	r24, 0x00	; 0
    30be:	90 40       	sbci	r25, 0x00	; 0
    30c0:	e1 f7       	brne	.-8      	; 0x30ba <action_for_key+0xf8>
    30c2:	00 c0       	rjmp	.+0      	; 0x30c4 <action_for_key+0x102>
    30c4:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    30c6:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <bootloader_jump>
    30ca:	47 c0       	rjmp	.+142    	; 0x315a <action_for_key+0x198>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    30cc:	c1 e0       	ldi	r28, 0x01	; 1
    30ce:	d0 e0       	ldi	r29, 0x00	; 0
    30d0:	44 c0       	rjmp	.+136    	; 0x315a <action_for_key+0x198>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    30d2:	c1 e8       	ldi	r28, 0x81	; 129
    30d4:	d0 e4       	ldi	r29, 0x40	; 64
    30d6:	41 c0       	rjmp	.+130    	; 0x315a <action_for_key+0x198>
    30d8:	c2 e8       	ldi	r28, 0x82	; 130
    30da:	d0 e4       	ldi	r29, 0x40	; 64
    30dc:	3e c0       	rjmp	.+124    	; 0x315a <action_for_key+0x198>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    30de:	c2 ee       	ldi	r28, 0xE2	; 226
    30e0:	d4 e4       	ldi	r29, 0x44	; 68
    30e2:	3b c0       	rjmp	.+118    	; 0x315a <action_for_key+0x198>
    30e4:	c9 ee       	ldi	r28, 0xE9	; 233
    30e6:	d4 e4       	ldi	r29, 0x44	; 68
    30e8:	38 c0       	rjmp	.+112    	; 0x315a <action_for_key+0x198>
    30ea:	ca ee       	ldi	r28, 0xEA	; 234
    30ec:	d4 e4       	ldi	r29, 0x44	; 68
    30ee:	35 c0       	rjmp	.+106    	; 0x315a <action_for_key+0x198>
    30f0:	c5 eb       	ldi	r28, 0xB5	; 181
    30f2:	d4 e4       	ldi	r29, 0x44	; 68
    30f4:	32 c0       	rjmp	.+100    	; 0x315a <action_for_key+0x198>
    30f6:	c6 eb       	ldi	r28, 0xB6	; 182
    30f8:	d4 e4       	ldi	r29, 0x44	; 68
    30fa:	2f c0       	rjmp	.+94     	; 0x315a <action_for_key+0x198>
    30fc:	c3 eb       	ldi	r28, 0xB3	; 179
    30fe:	d4 e4       	ldi	r29, 0x44	; 68
    3100:	2c c0       	rjmp	.+88     	; 0x315a <action_for_key+0x198>
    3102:	c4 eb       	ldi	r28, 0xB4	; 180
    3104:	d4 e4       	ldi	r29, 0x44	; 68
    3106:	29 c0       	rjmp	.+82     	; 0x315a <action_for_key+0x198>
    3108:	c7 eb       	ldi	r28, 0xB7	; 183
    310a:	d4 e4       	ldi	r29, 0x44	; 68
    310c:	26 c0       	rjmp	.+76     	; 0x315a <action_for_key+0x198>
    310e:	cc ec       	ldi	r28, 0xCC	; 204
    3110:	d4 e4       	ldi	r29, 0x44	; 68
    3112:	23 c0       	rjmp	.+70     	; 0x315a <action_for_key+0x198>
    3114:	cd ec       	ldi	r28, 0xCD	; 205
    3116:	d4 e4       	ldi	r29, 0x44	; 68
    3118:	20 c0       	rjmp	.+64     	; 0x315a <action_for_key+0x198>
    311a:	c3 e8       	ldi	r28, 0x83	; 131
    311c:	d5 e4       	ldi	r29, 0x45	; 69
    311e:	1d c0       	rjmp	.+58     	; 0x315a <action_for_key+0x198>
    3120:	ca e8       	ldi	r28, 0x8A	; 138
    3122:	d5 e4       	ldi	r29, 0x45	; 69
    3124:	1a c0       	rjmp	.+52     	; 0x315a <action_for_key+0x198>
    3126:	c2 e9       	ldi	r28, 0x92	; 146
    3128:	d5 e4       	ldi	r29, 0x45	; 69
    312a:	17 c0       	rjmp	.+46     	; 0x315a <action_for_key+0x198>
    312c:	c4 e9       	ldi	r28, 0x94	; 148
    312e:	d5 e4       	ldi	r29, 0x45	; 69
    3130:	14 c0       	rjmp	.+40     	; 0x315a <action_for_key+0x198>
    3132:	c1 e2       	ldi	r28, 0x21	; 33
    3134:	d6 e4       	ldi	r29, 0x46	; 70
    3136:	11 c0       	rjmp	.+34     	; 0x315a <action_for_key+0x198>
    3138:	c3 e2       	ldi	r28, 0x23	; 35
    313a:	d6 e4       	ldi	r29, 0x46	; 70
    313c:	0e c0       	rjmp	.+28     	; 0x315a <action_for_key+0x198>
    313e:	c4 e2       	ldi	r28, 0x24	; 36
    3140:	d6 e4       	ldi	r29, 0x46	; 70
    3142:	0b c0       	rjmp	.+22     	; 0x315a <action_for_key+0x198>
    3144:	c5 e2       	ldi	r28, 0x25	; 37
    3146:	d6 e4       	ldi	r29, 0x46	; 70
    3148:	08 c0       	rjmp	.+16     	; 0x315a <action_for_key+0x198>
    314a:	c6 e2       	ldi	r28, 0x26	; 38
    314c:	d6 e4       	ldi	r29, 0x46	; 70
    314e:	05 c0       	rjmp	.+10     	; 0x315a <action_for_key+0x198>
    3150:	c7 e2       	ldi	r28, 0x27	; 39
    3152:	d6 e4       	ldi	r29, 0x46	; 70
    3154:	02 c0       	rjmp	.+4      	; 0x315a <action_for_key+0x198>
    3156:	ca e2       	ldi	r28, 0x2A	; 42
    3158:	d6 e4       	ldi	r29, 0x46	; 70
    315a:	ce 01       	movw	r24, r28
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	08 95       	ret

00003162 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	08 95       	ret

00003168 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3168:	08 95       	ret

0000316a <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    316a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
    316e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
    3172:	08 95       	ret

00003174 <suspend_power_down>:
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    3174:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <USB_DeviceState>
    3178:	84 30       	cpi	r24, 0x04	; 4
    317a:	21 f1       	breq	.+72     	; 0x31c4 <suspend_power_down+0x50>
    317c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <wdt_timeout>
    3180:	20 e4       	ldi	r18, 0x40	; 64
    3182:	88 e1       	ldi	r24, 0x18	; 24
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	a8 95       	wdr
    318c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3196:	83 b7       	in	r24, 0x33	; 51
    3198:	81 7f       	andi	r24, 0xF1	; 241
    319a:	84 60       	ori	r24, 0x04	; 4
    319c:	83 bf       	out	0x33, r24	; 51
    319e:	83 b7       	in	r24, 0x33	; 51
    31a0:	81 60       	ori	r24, 0x01	; 1
    31a2:	83 bf       	out	0x33, r24	; 51
    31a4:	78 94       	sei
    31a6:	88 95       	sleep
    31a8:	83 b7       	in	r24, 0x33	; 51
    31aa:	8e 7f       	andi	r24, 0xFE	; 254
    31ac:	83 bf       	out	0x33, r24	; 51
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	a8 95       	wdr
    31b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    31b8:	88 61       	ori	r24, 0x18	; 24
    31ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    31be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	08 95       	ret

000031c6 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    31c6:	cf 93       	push	r28
    matrix_power_up();
    31c8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <matrix_power_up>
    matrix_scan();
    31cc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <matrix_scan>
    matrix_power_down();
    31d0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    31d4:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    31d6:	8c 2f       	mov	r24, r28
    31d8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <matrix_get_row>
    31dc:	81 11       	cpse	r24, r1
    31de:	04 c0       	rjmp	.+8      	; 0x31e8 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    31e0:	cf 5f       	subi	r28, 0xFF	; 255
    31e2:	c2 31       	cpi	r28, 0x12	; 18
    31e4:	c1 f7       	brne	.-16     	; 0x31d6 <suspend_wakeup_condition+0x10>
    31e6:	01 c0       	rjmp	.+2      	; 0x31ea <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    31ea:	cf 91       	pop	r28
    31ec:	08 95       	ret

000031ee <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    31ee:	0c 94 12 12 	jmp	0x2424	; 0x2424 <clear_keyboard>

000031f2 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    31f2:	1f 92       	push	r1
    31f4:	0f 92       	push	r0
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	0f 92       	push	r0
    31fa:	11 24       	eor	r1, r1
    31fc:	8f 93       	push	r24
    31fe:	9f 93       	push	r25
    3200:	af 93       	push	r26
    3202:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3204:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <wdt_timeout>
    3208:	81 11       	cpse	r24, r1
    320a:	13 c0       	rjmp	.+38     	; 0x3232 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    320c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer_count>
    3210:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer_count+0x1>
    3214:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <timer_count+0x2>
    3218:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <timer_count+0x3>
    321c:	41 96       	adiw	r24, 0x11	; 17
    321e:	a1 1d       	adc	r26, r1
    3220:	b1 1d       	adc	r27, r1
    3222:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timer_count>
    3226:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <timer_count+0x1>
    322a:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <timer_count+0x2>
    322e:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3232:	bf 91       	pop	r27
    3234:	af 91       	pop	r26
    3236:	9f 91       	pop	r25
    3238:	8f 91       	pop	r24
    323a:	0f 90       	pop	r0
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	0f 90       	pop	r0
    3240:	1f 90       	pop	r1
    3242:	18 95       	reti

00003244 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	84 bd       	out	0x24, r24	; 36
    3248:	93 e0       	ldi	r25, 0x03	; 3
    324a:	95 bd       	out	0x25, r25	; 37
    324c:	9a ef       	ldi	r25, 0xFA	; 250
    324e:	97 bd       	out	0x27, r25	; 39
    3250:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3254:	08 95       	ret

00003256 <timer_read>:
    3256:	2f b7       	in	r18, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer_count>
    325e:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer_count+0x1>
    3262:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <timer_count+0x2>
    3266:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <timer_count+0x3>
    326a:	2f bf       	out	0x3f, r18	; 63
    326c:	08 95       	ret

0000326e <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    326e:	1f 92       	push	r1
    3270:	0f 92       	push	r0
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	0f 92       	push	r0
    3276:	11 24       	eor	r1, r1
    3278:	8f 93       	push	r24
    327a:	9f 93       	push	r25
    327c:	af 93       	push	r26
    327e:	bf 93       	push	r27
    timer_count++;
    3280:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer_count>
    3284:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer_count+0x1>
    3288:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <timer_count+0x2>
    328c:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <timer_count+0x3>
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	a1 1d       	adc	r26, r1
    3294:	b1 1d       	adc	r27, r1
    3296:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timer_count>
    329a:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <timer_count+0x1>
    329e:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <timer_count+0x2>
    32a2:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <timer_count+0x3>
}
    32a6:	bf 91       	pop	r27
    32a8:	af 91       	pop	r26
    32aa:	9f 91       	pop	r25
    32ac:	8f 91       	pop	r24
    32ae:	0f 90       	pop	r0
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	0f 90       	pop	r0
    32b4:	1f 90       	pop	r1
    32b6:	18 95       	reti

000032b8 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    32b8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <USB_Disable>
    cli();
    32bc:	f8 94       	cli
    32be:	2f ef       	ldi	r18, 0xFF	; 255
    32c0:	87 ea       	ldi	r24, 0xA7	; 167
    32c2:	91 e6       	ldi	r25, 0x61	; 97
    32c4:	21 50       	subi	r18, 0x01	; 1
    32c6:	80 40       	sbci	r24, 0x00	; 0
    32c8:	90 40       	sbci	r25, 0x00	; 0
    32ca:	e1 f7       	brne	.-8      	; 0x32c4 <bootloader_jump+0xc>
    32cc:	00 c0       	rjmp	.+0      	; 0x32ce <bootloader_jump+0x16>
    32ce:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    32d0:	87 e0       	ldi	r24, 0x07	; 7
    32d2:	90 eb       	ldi	r25, 0xB0	; 176
    32d4:	dc 01       	movw	r26, r24
    32d6:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <__bss_end>
    32da:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <__bss_end+0x1>
    32de:	a0 93 d7 02 	sts	0x02D7, r26	; 0x8002d7 <__bss_end+0x2>
    32e2:	b0 93 d8 02 	sts	0x02D8, r27	; 0x8002d8 <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    32e6:	9c e0       	ldi	r25, 0x0C	; 12
    32e8:	88 e1       	ldi	r24, 0x18	; 24
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	a8 95       	wdr
    32f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    wdt_enable(WDTO_250MS);
    for (;;);
    32fa:	ff cf       	rjmp	.-2      	; 0x32fa <bootloader_jump+0x42>

000032fc <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    32fc:	cf 93       	push	r28
    32fe:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    3300:	1f 92       	push	r1
    3302:	8f 93       	push	r24
    3304:	87 ea       	ldi	r24, 0xA7	; 167
    3306:	92 e0       	ldi	r25, 0x02	; 2
    3308:	9f 93       	push	r25
    330a:	8f 93       	push	r24
    330c:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
    default_layer_set(1UL<<layer);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	a0 e0       	ldi	r26, 0x00	; 0
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <switch_default_layer+0x2a>
    331e:	66 0f       	add	r22, r22
    3320:	77 1f       	adc	r23, r23
    3322:	88 1f       	adc	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	ca 95       	dec	r28
    3328:	d2 f7       	brpl	.-12     	; 0x331e <switch_default_layer+0x22>
    332a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <default_layer_set>
    clear_keyboard();
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
}
    3336:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    3338:	0c 94 12 12 	jmp	0x2424	; 0x2424 <clear_keyboard>

0000333c <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    333c:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    333e:	87 32       	cpi	r24, 0x27	; 39
    3340:	88 f5       	brcc	.+98     	; 0x33a4 <command_common+0x68>
    3342:	8e 31       	cpi	r24, 0x1E	; 30
    3344:	08 f0       	brcs	.+2      	; 0x3348 <command_common+0xc>
    3346:	11 c1       	rjmp	.+546    	; 0x356a <command_common+0x22e>
    3348:	8e 30       	cpi	r24, 0x0E	; 14
    334a:	09 f4       	brne	.+2      	; 0x334e <command_common+0x12>
    334c:	87 c0       	rjmp	.+270    	; 0x345c <command_common+0x120>
    334e:	d8 f4       	brcc	.+54     	; 0x3386 <command_common+0x4a>
    3350:	87 30       	cpi	r24, 0x07	; 7
    3352:	09 f4       	brne	.+2      	; 0x3356 <command_common+0x1a>
    3354:	60 c0       	rjmp	.+192    	; 0x3416 <command_common+0xda>
    3356:	8b 30       	cpi	r24, 0x0B	; 11
    3358:	09 f4       	brne	.+2      	; 0x335c <command_common+0x20>
    335a:	4f c0       	rjmp	.+158    	; 0x33fa <command_common+0xbe>
    335c:	86 30       	cpi	r24, 0x06	; 6
    335e:	09 f0       	breq	.+2      	; 0x3362 <command_common+0x26>
    3360:	08 c1       	rjmp	.+528    	; 0x3572 <command_common+0x236>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    3362:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    3366:	81 7f       	andi	r24, 0xF1	; 241
    3368:	8e 7f       	andi	r24, 0xFE	; 254
    336a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <debug_config>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    336e:	8c ea       	ldi	r24, 0xAC	; 172
    3370:	92 e0       	ldi	r25, 0x02	; 2
    3372:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    3376:	8a e2       	ldi	r24, 0x2A	; 42
    3378:	95 e0       	ldi	r25, 0x05	; 5
    337a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            command_state = CONSOLE;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <command_state>
    3384:	46 c0       	rjmp	.+140    	; 0x3412 <command_common+0xd6>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    3386:	86 31       	cpi	r24, 0x16	; 22
    3388:	09 f4       	brne	.+2      	; 0x338c <command_common+0x50>
    338a:	b0 c0       	rjmp	.+352    	; 0x34ec <command_common+0x1b0>
    338c:	20 f4       	brcc	.+8      	; 0x3396 <command_common+0x5a>
    338e:	80 31       	cpi	r24, 0x10	; 16
    3390:	09 f4       	brne	.+2      	; 0x3394 <command_common+0x58>
    3392:	7a c0       	rjmp	.+244    	; 0x3488 <command_common+0x14c>
    3394:	ee c0       	rjmp	.+476    	; 0x3572 <command_common+0x236>
    3396:	89 31       	cpi	r24, 0x19	; 25
    3398:	09 f4       	brne	.+2      	; 0x339c <command_common+0x60>
    339a:	91 c0       	rjmp	.+290    	; 0x34be <command_common+0x182>
    339c:	8b 31       	cpi	r24, 0x1B	; 27
    339e:	09 f4       	brne	.+2      	; 0x33a2 <command_common+0x66>
    33a0:	49 c0       	rjmp	.+146    	; 0x3434 <command_common+0xf8>
    33a2:	e7 c0       	rjmp	.+462    	; 0x3572 <command_common+0x236>
    33a4:	88 33       	cpi	r24, 0x38	; 56
    33a6:	49 f1       	breq	.+82     	; 0x33fa <command_common+0xbe>
    33a8:	50 f4       	brcc	.+20     	; 0x33be <command_common+0x82>
    33aa:	89 32       	cpi	r24, 0x29	; 41
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <command_common+0x74>
    33ae:	db c0       	rjmp	.+438    	; 0x3566 <command_common+0x22a>
    33b0:	85 33       	cpi	r24, 0x35	; 53
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <command_common+0x7a>
    33b4:	d8 c0       	rjmp	.+432    	; 0x3566 <command_common+0x22a>
    33b6:	87 32       	cpi	r24, 0x27	; 39
    33b8:	09 f0       	breq	.+2      	; 0x33bc <command_common+0x80>
    33ba:	db c0       	rjmp	.+438    	; 0x3572 <command_common+0x236>
    33bc:	d4 c0       	rjmp	.+424    	; 0x3566 <command_common+0x22a>
    33be:	83 34       	cpi	r24, 0x43	; 67
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <command_common+0x88>
    33c2:	d1 c0       	rjmp	.+418    	; 0x3566 <command_common+0x22a>
    33c4:	28 f4       	brcc	.+10     	; 0x33d0 <command_common+0x94>
    33c6:	8a 33       	cpi	r24, 0x3A	; 58
    33c8:	08 f4       	brcc	.+2      	; 0x33cc <command_common+0x90>
    33ca:	d3 c0       	rjmp	.+422    	; 0x3572 <command_common+0x236>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    33cc:	89 53       	subi	r24, 0x39	; 57
    33ce:	ce c0       	rjmp	.+412    	; 0x356c <command_common+0x230>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    33d0:	88 34       	cpi	r24, 0x48	; 72
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <command_common+0x9a>
    33d4:	ce c0       	rjmp	.+412    	; 0x3572 <command_common+0x236>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    33d6:	0e 94 12 12 	call	0x2424	; 0x2424 <clear_keyboard>
            print("\n\nbootloader... ");
    33da:	89 e1       	ldi	r24, 0x19	; 25
    33dc:	95 e0       	ldi	r25, 0x05	; 5
    33de:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    33e2:	2f ef       	ldi	r18, 0xFF	; 255
    33e4:	83 ed       	ldi	r24, 0xD3	; 211
    33e6:	90 e3       	ldi	r25, 0x30	; 48
    33e8:	21 50       	subi	r18, 0x01	; 1
    33ea:	80 40       	sbci	r24, 0x00	; 0
    33ec:	90 40       	sbci	r25, 0x00	; 0
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <command_common+0xac>
    33f0:	00 c0       	rjmp	.+0      	; 0x33f2 <command_common+0xb6>
    33f2:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    33f4:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <bootloader_jump>
    33f8:	0c c0       	rjmp	.+24     	; 0x3412 <command_common+0xd6>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    33fa:	87 ec       	ldi	r24, 0xC7	; 199
    33fc:	92 e0       	ldi	r25, 0x02	; 2
    33fe:	41 c0       	rjmp	.+130    	; 0x3482 <command_common+0x146>
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	95 e0       	ldi	r25, 0x05	; 5
    3404:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
                debug_enable   = true;
    3408:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    340c:	81 60       	ori	r24, 0x01	; 1
    340e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <debug_config>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    3412:	c1 e0       	ldi	r28, 0x01	; 1
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
    3414:	b3 c0       	rjmp	.+358    	; 0x357c <command_common+0x240>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    3416:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    341a:	c8 2f       	mov	r28, r24
    341c:	c1 70       	andi	r28, 0x01	; 1
    341e:	80 ff       	sbrs	r24, 0
    3420:	ef cf       	rjmp	.-34     	; 0x3400 <command_common+0xc4>
                print("\ndebug: off\n");
    3422:	8c e0       	ldi	r24, 0x0C	; 12
    3424:	95 e0       	ldi	r25, 0x05	; 5
    3426:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
                debug_matrix   = false;
    342a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    342e:	81 7f       	andi	r24, 0xF1	; 241
    3430:	8e 7f       	andi	r24, 0xFE	; 254
    3432:	3f c0       	rjmp	.+126    	; 0x34b2 <command_common+0x176>
                print("\ndebug: on\n");
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    3434:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <debug_config>
    3438:	91 fb       	bst	r25, 1
    343a:	cc 27       	eor	r28, r28
    343c:	c0 f9       	bld	r28, 0
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	c8 27       	eor	r28, r24
    3442:	89 2f       	mov	r24, r25
    3444:	c0 fb       	bst	r28, 0
    3446:	81 f9       	bld	r24, 1
    3448:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <debug_config>
            if (debug_matrix) {
    344c:	cc 23       	and	r28, r28
    344e:	19 f0       	breq	.+6      	; 0x3456 <command_common+0x11a>
                print("\nmatrix: on\n");
    3450:	83 ef       	ldi	r24, 0xF3	; 243
    3452:	94 e0       	ldi	r25, 0x04	; 4
    3454:	29 c0       	rjmp	.+82     	; 0x34a8 <command_common+0x16c>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    3456:	85 ee       	ldi	r24, 0xE5	; 229
    3458:	94 e0       	ldi	r25, 0x04	; 4
    345a:	13 c0       	rjmp	.+38     	; 0x3482 <command_common+0x146>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    345c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <debug_config>
    3460:	92 fb       	bst	r25, 2
    3462:	cc 27       	eor	r28, r28
    3464:	c0 f9       	bld	r28, 0
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	c8 27       	eor	r28, r24
    346a:	89 2f       	mov	r24, r25
    346c:	c0 fb       	bst	r28, 0
    346e:	82 f9       	bld	r24, 2
    3470:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <debug_config>
            if (debug_keyboard) {
    3474:	cc 23       	and	r28, r28
    3476:	19 f0       	breq	.+6      	; 0x347e <command_common+0x142>
                print("\nkeyboard: on\n");
    3478:	86 ed       	ldi	r24, 0xD6	; 214
    347a:	94 e0       	ldi	r25, 0x04	; 4
    347c:	15 c0       	rjmp	.+42     	; 0x34a8 <command_common+0x16c>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    347e:	86 ec       	ldi	r24, 0xC6	; 198
    3480:	94 e0       	ldi	r25, 0x04	; 4
    3482:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    3486:	c5 cf       	rjmp	.-118    	; 0x3412 <command_common+0xd6>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    3488:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <debug_config>
    348c:	93 fb       	bst	r25, 3
    348e:	cc 27       	eor	r28, r28
    3490:	c0 f9       	bld	r28, 0
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	c8 27       	eor	r28, r24
    3496:	89 2f       	mov	r24, r25
    3498:	c0 fb       	bst	r28, 0
    349a:	83 f9       	bld	r24, 3
    349c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <debug_config>
            if (debug_mouse) {
    34a0:	cc 23       	and	r28, r28
    34a2:	51 f0       	breq	.+20     	; 0x34b8 <command_common+0x17c>
                print("\nmouse: on\n");
    34a4:	8a eb       	ldi	r24, 0xBA	; 186
    34a6:	94 e0       	ldi	r25, 0x04	; 4
    34a8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
                debug_enable = true;
    34ac:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <debug_config>
    34b0:	81 60       	ori	r24, 0x01	; 1
    34b2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <debug_config>
    34b6:	62 c0       	rjmp	.+196    	; 0x357c <command_common+0x240>
            } else {
                print("\nmouse: off\n");
    34b8:	8d ea       	ldi	r24, 0xAD	; 173
    34ba:	94 e0       	ldi	r25, 0x04	; 4
    34bc:	e2 cf       	rjmp	.-60     	; 0x3482 <command_common+0x146>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    34be:	8e e9       	ldi	r24, 0x9E	; 158
    34c0:	94 e0       	ldi	r25, 0x04	; 4
    34c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    34c6:	8e e7       	ldi	r24, 0x7E	; 126
    34c8:	94 e0       	ldi	r25, 0x04	; 4
    34ca:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    34ce:	8f e3       	ldi	r24, 0x3F	; 63
    34d0:	94 e0       	ldi	r25, 0x04	; 4
    34d2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    34d6:	82 e1       	ldi	r24, 0x12	; 18
    34d8:	94 e0       	ldi	r25, 0x04	; 4
    34da:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            /* build options */
            print("OPTIONS:"
    34de:	8e ee       	ldi	r24, 0xEE	; 238
    34e0:	93 e0       	ldi	r25, 0x03	; 3
    34e2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    34e6:	82 ec       	ldi	r24, 0xC2	; 194
    34e8:	93 e0       	ldi	r25, 0x03	; 3
    34ea:	cb cf       	rjmp	.-106    	; 0x3482 <command_common+0x146>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    34ec:	84 eb       	ldi	r24, 0xB4	; 180
    34ee:	93 e0       	ldi	r25, 0x03	; 3
    34f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            print_val_hex8(host_keyboard_leds());
    34f4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <host_keyboard_leds>
    34f8:	1f 92       	push	r1
    34fa:	8f 93       	push	r24
    34fc:	8a e9       	ldi	r24, 0x9A	; 154
    34fe:	93 e0       	ldi	r25, 0x03	; 3
    3500:	9f 93       	push	r25
    3502:	8f 93       	push	r24
    3504:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
            print_val_hex8(keyboard_protocol);
    3508:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <keyboard_protocol>
    350c:	1f 92       	push	r1
    350e:	8f 93       	push	r24
    3510:	83 e8       	ldi	r24, 0x83	; 131
    3512:	93 e0       	ldi	r25, 0x03	; 3
    3514:	9f 93       	push	r25
    3516:	8f 93       	push	r24
    3518:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
            print_val_hex8(keyboard_idle);
    351c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <keyboard_idle>
    3520:	1f 92       	push	r1
    3522:	8f 93       	push	r24
    3524:	80 e7       	ldi	r24, 0x70	; 112
    3526:	93 e0       	ldi	r25, 0x03	; 3
    3528:	9f 93       	push	r25
    352a:	8f 93       	push	r24
    352c:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_count);
    3530:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer_count>
    3534:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer_count+0x1>
    3538:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <timer_count+0x2>
    353c:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <timer_count+0x3>
    3540:	bf 93       	push	r27
    3542:	af 93       	push	r26
    3544:	9f 93       	push	r25
    3546:	8f 93       	push	r24
    3548:	8c e5       	ldi	r24, 0x5C	; 92
    354a:	93 e0       	ldi	r25, 0x03	; 3
    354c:	9f 93       	push	r25
    354e:	8f 93       	push	r24
    3550:	0e 94 87 03 	call	0x70e	; 0x70e <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    3554:	8d b7       	in	r24, 0x3d	; 61
    3556:	9e b7       	in	r25, 0x3e	; 62
    3558:	42 96       	adiw	r24, 0x12	; 18
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	9e bf       	out	0x3e, r25	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	8d bf       	out	0x3d, r24	; 61
    3564:	56 cf       	rjmp	.-340    	; 0x3412 <command_common+0xd6>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	01 c0       	rjmp	.+2      	; 0x356c <command_common+0x230>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    356a:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    356c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <switch_default_layer>
    3570:	50 cf       	rjmp	.-352    	; 0x3412 <command_common+0xd6>
            break;
        default:
            print("?");
    3572:	8a e5       	ldi	r24, 0x5A	; 90
    3574:	93 e0       	ldi	r25, 0x03	; 3
    3576:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
            return false;
    357a:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    357c:	8c 2f       	mov	r24, r28
    357e:	cf 91       	pop	r28
    3580:	08 95       	ret

00003582 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	08 95       	ret

00003586 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	08 95       	ret

0000358a <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    358a:	cf 93       	push	r28
    358c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    358e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <command_state>
    3592:	88 23       	and	r24, r24
    3594:	19 f0       	breq	.+6      	; 0x359c <command_proc+0x12>
    3596:	81 30       	cpi	r24, 0x01	; 1
    3598:	49 f0       	breq	.+18     	; 0x35ac <command_proc+0x22>
    359a:	3e c0       	rjmp	.+124    	; 0x3618 <command_proc+0x8e>
        case ONESHOT:
            if (!IS_COMMAND())
    359c:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <keyboard_report>
    35a0:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <keyboard_report+0x1>
    35a4:	80 81       	ld	r24, Z
    35a6:	82 32       	cpi	r24, 0x22	; 34
    35a8:	c9 f5       	brne	.+114    	; 0x361c <command_proc+0x92>
    35aa:	07 c0       	rjmp	.+14     	; 0x35ba <command_proc+0x30>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    35ac:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <keyboard_report>
    35b0:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <keyboard_report+0x1>
    35b4:	80 81       	ld	r24, Z
    35b6:	82 32       	cpi	r24, 0x22	; 34
    35b8:	61 f4       	brne	.+24     	; 0x35d2 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    35ba:	8c 2f       	mov	r24, r28
    35bc:	0e 94 c1 1a 	call	0x3582	; 0x3582 <command_extra>
    35c0:	81 11       	cpse	r24, r1
    35c2:	04 c0       	rjmp	.+8      	; 0x35cc <command_proc+0x42>
    35c4:	8c 2f       	mov	r24, r28
    35c6:	0e 94 9e 19 	call	0x333c	; 0x333c <command_common>
    35ca:	24 c0       	rjmp	.+72     	; 0x3614 <command_proc+0x8a>
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	21 c0       	rjmp	.+66     	; 0x3614 <command_proc+0x8a>
            else
                return (command_console_extra(code) || command_console(code));
    35d2:	8c 2f       	mov	r24, r28
    35d4:	0e 94 c3 1a 	call	0x3586	; 0x3586 <command_console_extra>
    35d8:	81 11       	cpse	r24, r1
    35da:	1b c0       	rjmp	.+54     	; 0x3612 <command_proc+0x88>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    35dc:	c4 31       	cpi	r28, 0x14	; 20
    35de:	89 f0       	breq	.+34     	; 0x3602 <command_proc+0x78>
    35e0:	18 f4       	brcc	.+6      	; 0x35e8 <command_proc+0x5e>
    35e2:	cb 30       	cpi	r28, 0x0B	; 11
    35e4:	29 f0       	breq	.+10     	; 0x35f0 <command_proc+0x66>
    35e6:	10 c0       	rjmp	.+32     	; 0x3608 <command_proc+0x7e>
    35e8:	c9 32       	cpi	r28, 0x29	; 41
    35ea:	59 f0       	breq	.+22     	; 0x3602 <command_proc+0x78>
    35ec:	c8 33       	cpi	r28, 0x38	; 56
    35ee:	61 f4       	brne	.+24     	; 0x3608 <command_proc+0x7e>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    35f0:	8c ea       	ldi	r24, 0xAC	; 172
    35f2:	92 e0       	ldi	r25, 0x02	; 2
    35f4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    35f8:	83 ea       	ldi	r24, 0xA3	; 163
    35fa:	92 e0       	ldi	r25, 0x02	; 2
    35fc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <command_proc+0x88>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    3602:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <command_state>
    3606:	0c c0       	rjmp	.+24     	; 0x3620 <command_proc+0x96>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    3608:	81 ea       	ldi	r24, 0xA1	; 161
    360a:	92 e0       	ldi	r25, 0x02	; 2
    360c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <xputs>
    3610:	07 c0       	rjmp	.+14     	; 0x3620 <command_proc+0x96>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	81 70       	andi	r24, 0x01	; 1
    3616:	06 c0       	rjmp	.+12     	; 0x3624 <command_proc+0x9a>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    3618:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <command_state>
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <command_proc+0x9a>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	f8 cf       	rjmp	.-16     	; 0x3614 <command_proc+0x8a>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    3624:	cf 91       	pop	r28
    3626:	08 95       	ret

00003628 <__udivmodqi4>:
    3628:	99 1b       	sub	r25, r25
    362a:	79 e0       	ldi	r23, 0x09	; 9
    362c:	04 c0       	rjmp	.+8      	; 0x3636 <__udivmodqi4_ep>

0000362e <__udivmodqi4_loop>:
    362e:	99 1f       	adc	r25, r25
    3630:	96 17       	cp	r25, r22
    3632:	08 f0       	brcs	.+2      	; 0x3636 <__udivmodqi4_ep>
    3634:	96 1b       	sub	r25, r22

00003636 <__udivmodqi4_ep>:
    3636:	88 1f       	adc	r24, r24
    3638:	7a 95       	dec	r23
    363a:	c9 f7       	brne	.-14     	; 0x362e <__udivmodqi4_loop>
    363c:	80 95       	com	r24
    363e:	08 95       	ret

00003640 <__tablejump2__>:
    3640:	ee 0f       	add	r30, r30
    3642:	ff 1f       	adc	r31, r31
    3644:	00 24       	eor	r0, r0
    3646:	00 1c       	adc	r0, r0
    3648:	0b be       	out	0x3b, r0	; 59
    364a:	07 90       	elpm	r0, Z+
    364c:	f6 91       	elpm	r31, Z
    364e:	e0 2d       	mov	r30, r0
    3650:	09 94       	ijmp

00003652 <_exit>:
    3652:	f8 94       	cli

00003654 <__stop_program>:
    3654:	ff cf       	rjmp	.-2      	; 0x3654 <__stop_program>
